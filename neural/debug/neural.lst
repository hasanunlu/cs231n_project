
/home/hunlu/workspace/freedom-e-sdk/software/neural/debug/neural.elf:     file format elf32-littleriscv
/home/hunlu/workspace/freedom-e-sdk/software/neural/debug/neural.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x0004634c memsz 0x0004634c flags rwx
    LOAD off    0x00047818 vaddr 0x80000818 paddr 0x80000818 align 2**12
         filesz 0x00000000 memsz 0x0000309c flags rw-
    LOAD off    0x00048000 vaddr 0x80000000 paddr 0x20446350 align 2**12
         filesz 0x00000818 memsz 0x00000818 flags rw-
    LOAD off    0x00048818 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00048818 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019e  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00008c38  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           0003d508  20408e38  20408e38  00009e38  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       0000000c  20446340  20446340  00047340  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000818  80000000  20446350  00048000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0000009c  80000818  80000818  00047818  2**3  ALLOC
  6 .stack            00002800  800008b4  800008b4  00047818  2**0  ALLOC
  7 .heap             00000800  800030b4  800030b4  00047818  2**0  ALLOC
  8 .debug_info       0003089d  00000000  00000000  00048818  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000052e0  00000000  00000000  000790b5  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000d78  00000000  00000000  0007e398  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000fd0  00000000  00000000  0007f110  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00011543  00000000  00000000  000800e0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00005382  00000000  00000000  00091623  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  000969a5  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  000969cd  2**0  CONTENTS, READONLY
 16 .debug_frame      000032b4  00000000  00000000  000969f8  2**2  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc        00002ff8  00000000  00000000  00099cac  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20408e38 l    d  .rodata	00000000 .rodata
20446340 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000818 l    d  .bss	00000000 .bss
800008b4 l    d  .stack	00000000 .stack
800030b4 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
20446328 l       .rodata	00000000 argv
2044632c l       .rodata	00000000 envp
20446330 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20401c2a l     F .text	0000006a std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
204020d0 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
2040332a l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20403350 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20403374 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
204033b0 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20403510 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20403a4e l     F .text	00000024 __metal_driver_cpu_hartid
20403a72 l     F .text	0000002a __metal_driver_cpu_timebase
20403a9c l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
2040535e l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20405388 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
204053b0 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
204053d8 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20405400 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
20405956 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
20405970 l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfrosc_config_base
20405986 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
2040599a l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
20405a52 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
20405a6c l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfxosc_config_base
20405a82 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
20405a96 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
20405b3e l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
20405b58 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
20405b72 l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_divider_base
20405b88 l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
20405b9c l     F .text	00000012 __metal_driver_sifive_fe310_g000_pll_config_base
20405bae l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
20405bbe l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
20405bd4 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
20405be6 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
204459f0 l     O .rodata	00000880 pll_configs
20405bf8 l     F .text	0000004e get_pll_config_freq
20405c46 l     F .text	00000028 metal_sifive_fe310_g000_pll_init
20405e92 l     F .text	000000ac find_closest_config
20405f3e l     F .text	00000132 configure_pll
204061d6 l     F .text	0000002a use_hfxosc
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
20406200 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20406278 l     F .text	00000026 __metal_driver_sifive_gpio0_base
2040629e l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204062c8 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_spi0.c
20406b32 l     F .text	00000040 __metal_driver_sifive_spi0_control_base
20406b72 l     F .text	00000048 __metal_driver_sifive_spi0_clock
20406bba l     F .text	00000040 __metal_driver_sifive_spi0_pinmux
20406bfa l     F .text	0000003e __metal_driver_sifive_spi0_pinmux_output_selector
20406c38 l     F .text	0000003e __metal_driver_sifive_spi0_pinmux_source_selector
20406c76 l     F .text	0000024c configure_spi
20406ec2 l     F .text	00000096 spi_mode_switch
20407490 l     F .text	00000062 pre_rate_change_callback_func
204074f2 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 sifive_uart0.c
204075f4 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
2040761e l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
2040764c l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20407674 l     F .text	0000002e __metal_driver_sifive_uart0_clock
204076a2 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
204076cc l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
204076f6 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
204078f0 l     F .text	000000d8 pre_rate_change_callback_func
204079c8 l     F .text	0000002e post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1_a-vector.o
20408180 l       .text	00000000 IRQ_0
20408184 l       .text	00000000 IRQ_1
20408188 l       .text	00000000 IRQ_2
2040818c l       .text	00000000 IRQ_3
20408190 l       .text	00000000 IRQ_4
20408194 l       .text	00000000 IRQ_5
20408198 l       .text	00000000 IRQ_6
2040819c l       .text	00000000 IRQ_7
204081a0 l       .text	00000000 IRQ_8
204081a4 l       .text	00000000 IRQ_9
204081a8 l       .text	00000000 IRQ_10
204081ac l       .text	00000000 IRQ_11
204081b0 l       .text	00000000 IRQ_12
204081b4 l       .text	00000000 IRQ_13
204081b8 l       .text	00000000 IRQ_14
204081bc l       .text	00000000 IRQ_15
204081c0 l       .text	00000000 IRQ_LC0
204081c4 l       .text	00000000 IRQ_LC1
204081c8 l       .text	00000000 IRQ_LC2
204081cc l       .text	00000000 IRQ_LC3
204081d0 l       .text	00000000 IRQ_LC4
204081d4 l       .text	00000000 IRQ_LC5
204081d8 l       .text	00000000 IRQ_LC6
204081dc l       .text	00000000 IRQ_LC7
204081e0 l       .text	00000000 IRQ_LC8
204081e4 l       .text	00000000 IRQ_LC9
204081e8 l       .text	00000000 IRQ_LC10
204081ec l       .text	00000000 IRQ_LC11
204081f0 l       .text	00000000 IRQ_LC12
204081f4 l       .text	00000000 IRQ_LC13
204081f8 l       .text	00000000 IRQ_LC14
204081fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20408200 l     F .text	00000062 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000814 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80000824 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 tty.c
20408e00 l     F .text	00000024 metal_tty_init
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
2044634c l       .init_array	00000000 __fini_array_end
2044634c l       .init_array	00000000 __fini_array_start
2044634c l       .init_array	00000000 __init_array_end
20446340 l       .init_array	00000000 __preinit_array_end
20446340 l       .init_array	00000000 __init_array_start
20446340 l       .init_array	00000000 __preinit_array_start
20401722 g     F .text	00000028 putchar
20446308 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
2040253e g     F .text	0000002a _isatty_r
204042d2  w    F .text	00000096 metal_lc4_interrupt_vector_handler
2040b640 g     O .rodata	00000040 w_3_bias
204017cc g     F .text	000000da _puts_r
20402568 g     F .text	0000002e _lseek_r
20407b5a g     F .text	00000026 metal_clock_get_rate_hz
20407850 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
204036ec g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
2040423c  w    F .text	00000096 metal_lc3_interrupt_vector_handler
20404ac2 g     F .text	00000038 __metal_valid_interrupt_id
2043a690 g     O .rodata	00009d80 w_9_weight
204016e2 g     F .text	00000040 printf
80000fc8 g       .data	00000000 __global_pointer$
20404eec g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
20407b06 g     F .text	00000054 _metal_clock_append_to_callbacks
20405450 g     F .text	00000038 __metal_plic0_complete_interrupt
20404d44 g     F .text	00000150 __metal_driver_riscv_cpu_controller_interrupt_register
2040247e g     F .text	00000036 __sseek
20401ce4 g     F .text	00000066 __sinit
204090c0 g     O .rodata	00002580 w_3_weight
204018b0 g     F .text	000000c0 __swbuf_r
20401c9e g     F .text	00000046 __sfmoreglue
204025b2 g     F .text	00000002 __malloc_unlock
20407caa g     F .text	0000002e metal_cpu_get
80000780 g     O .data	00000020 __metal_dt_serial_10013000
20402c9c g     F .text	0000024a .hidden __divsf3
2040670c g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20445750 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
800008b4 g       .bss	00000000 metal_segment_bss_target_end
204033e0 g     F .text	0000009a __metal_clint0_mtime_get
204052f2 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204031f2 g     F .text	00000060 .hidden __fixsfsi
80000740 g     O .data	00000020 __metal_dt_spi_10014000
204064bc g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
204084da g     F .text	00000008 __errno
80000000 g       .data	00000000 metal_segment_itim_target_start
20407c5a g     F .text	0000002a metal_cpu_get_timebase
20407764 g     F .text	00000034 __metal_driver_sifive_uart0_txready
20445298 g     O .rodata	00000028 w_11_bias
20407d72 g     F .text	00000040 metal_gpio_enable_output
20400070 g     F .init	0000000e __metal_synchronize_harts
80000818 g       .bss	00000000 metal_segment_bss_target_start
2040347a g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20402512 g     F .text	0000002c _fstat_r
2040695c g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
800008b0 g     O .bss	00000004 errno
20405d14 g     F .text	0000017e __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00002800 g       *ABS*	00000000 __stack_size
20407bcc g     F .text	00000032 metal_clock_register_pre_rate_change_callback
20406f58 g     F .text	0000046e __metal_driver_sifive_spi0_transfer
204045c0  w    F .text	00000096 metal_lc9_interrupt_vector_handler
204459a4 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20445964 g     O .rodata	00000040 __metal_driver_vtable_cpu
20408134 g     F .text	0000002e metal_uart_set_baud_rate
204079f6 g     F .text	000000d0 __metal_driver_sifive_uart0_init
20404f80 g     F .text	00000072 __metal_driver_cpu_mcycle_get
20446270 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
800007cc  w    O .data	00000004 __metal_gpio_table
800030b4 g       .heap	00000000 metal_segment_heap_target_start
20401c94 g     F .text	0000000a _cleanup_r
800007e8 g     O .data	00000004 __metal_dt_cpu_0
2040452a  w    F .text	00000096 metal_lc8_interrupt_vector_handler
20406070 g     F .text	00000166 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
204082f0 g     F .text	0000004a metal_timer_get_timebase_frequency
204018a6 g     F .text	0000000a puts
20404818  w    F .text	00000096 metal_lc13_interrupt_vector_handler
20407df2 g     F .text	00000068 metal_gpio_set_pin
20403c34 g     F .text	00000018 __metal_default_exception_handler
2040835c g     F .text	00000026 _fstat
20403a1a g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
2043a678 g     O .rodata	00000018 w_7_weight_2d
204054ec g     F .text	00000062 __metal_plic0_set_priority
20404f08 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402f5e g     F .text	00000078 .hidden __lesf2
20403ac6 g     F .text	00000030 __metal_driver_cpu_get
20445918 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20403b28 g     F .text	00000018 __metal_interrupt_global_disable
20404494  w    F .text	00000096 metal_lc7_interrupt_vector_handler
20404656  w    F .text	00000096 metal_lc10_interrupt_vector_handler
204023d6 g     F .text	0000002a _sbrk_r
2040590e g     F .text	00000048 __metal_driver_riscv_plic0_disable
20404bb6 g     F .text	0000004e __metal_exception_register
20400422 g     F .text	00000032 reLU
20402962 g     F .text	0000002e _read_r
20405114 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
2040659e g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20403d24 g     F .text	00000068 __metal_default_sw_handler
20407bfe g     F .text	00000032 metal_clock_register_post_rate_change_callback
2040b698 g     O .rodata	0002ee00 w_7_weight
8000006c g     O .data	0000000c __metal_dt_clock_2
20407720 g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
20408a5a g     F .text	00000352 .hidden __umoddi3
20408382 g     F .text	00000020 _isatty
20406664 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
8000080c g     O .data	00000008 __metal_driver_vtable_fixed_clock
800007dc g     O .data	00000004 _global_impure_ptr
20403d8c  w    F .text	00000094 metal_timer_interrupt_vector_handler
20408542 g     F .text	0000006a __libc_init_array
204065de g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
204046ec  w    F .text	00000096 metal_lc11_interrupt_vector_handler
204086fc g     F .text	0000035e .hidden __udivdi3
20405b1c g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20404e94 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
204083f6 g     F .text	0000006a _sbrk
20406558 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20407ac6 g     F .text	00000040 _metal_clock_call_all_callbacks
204462f8 g     O .rodata	00000010 __metal_driver_vtable_sifive_spi0
2040017c g     F .init	00000002 _init
20403b8a g     F .text	0000001a __metal_interrupt_timer_disable
20406756 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
204051ca g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
2040b680 g     O .rodata	00000018 w_3_weight_2d
204462bc g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
204066a4 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
2040850a g     F .text	00000038 __libc_fini_array
800007b8 g     O .data	0000000c __metal_dt_clock_4
20406ae4 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
204007ee g     F .text	0000005a i2c_start
20405154 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
20407f5a g     F .text	0000002e metal_spi_set_baud_rate
80000000 g       .data	00000000 metal_segment_data_target_start
20400848 g     F .text	00000066 i2c_busy
20403bdc g     F .text	0000002c __metal_interrupt_local_enable
204039e6 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20408dac g     F .text	0000002c metal_tty_putc
20405612 g     F .text	00000018 __metal_plic0_default_handler
2040174a g     F .text	00000082 _putc_r
20400200 g     F .text	000000de print_twoD
20400d78 g     F .text	000000ba read_fifo_len
20402ee6 g     F .text	00000078 .hidden __gtsf2
80000060 g     O .data	0000000c __metal_dt_clock_0
20407fba g     F .text	000000e6 metal_gettimeofday
00000800 g       *ABS*	00000000 __heap_size
20407ee8 g     F .text	0000002c metal_spi_init
2044553c g     O .rodata	00000020 __sf_fake_stderr
20403bc0 g     F .text	0000001c __metal_interrupt_external_disable
20407740 g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
204073c6 g     F .text	00000020 __metal_driver_sifive_spi0_get_baud_rate
800007d0  w    O .data	00000008 __metal_spi_table
20404f64 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20404c04 g     F .text	00000140 __metal_driver_riscv_cpu_controller_interrupt_init
204073e6 g     F .text	000000aa __metal_driver_sifive_spi0_set_baud_rate
204032ee g     F .text	0000003c .hidden __clzsi2
204020fa g     F .text	00000042 __sfputs_r
204052ac g     F .text	00000046 __metal_driver_cpu_exception_register
20403b40 g     F .text	00000018 __metal_interrupt_software_enable
20404110  w    F .text	00000096 metal_lc1_interrupt_vector_handler
20402596 g     F .text	0000001a memchr
20401f46 g     F .text	000000ac _free_r
80000820 g     O .bss	00000004 _global_atexit
204049da g     F .text	00000050 __metal_controller_interrupt_vector_mode
20408634 g     F .text	000000c8 __call_exitprocs
800030b4 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
204059ac g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
204082a6 g     F .text	0000004a metal_timer_get_cyclecount
204083a2 g     F .text	0000002a _lseek
2040528c g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20405320 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20403ba4 g     F .text	0000001c __metal_interrupt_external_enable
204085ac g     F .text	00000088 __register_exitproc
20407798 g     F .text	00000042 __metal_driver_sifive_uart0_putc
204056be g     F .text	00000146 __metal_driver_riscv_plic0_init
204058c6 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20407cf2 g     F .text	00000040 metal_gpio_enable_input
2040652c g     F .text	0000002c __metal_driver_sifive_gpio0_output
204043fe  w    F .text	00000096 metal_lc6_interrupt_vector_handler
20403af6 g     F .text	0000001a __metal_myhart_id
20407f88 g     F .text	00000032 metal_spi_get_device
20406b04 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
2040070e g     F .text	00000072 get_class
20403c92  w    F .text	00000092 metal_software_interrupt_vector_handler
20404ec0 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
204024e8 g     F .text	0000002a _close_r
20407c30 g     F .text	0000002a metal_cpu_get_timer
20444410 g     O .rodata	00000150 w_9_bias
20407830 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
204035ce g     F .text	000000da __metal_driver_riscv_clint0_register
20407d32 g     F .text	00000040 metal_gpio_disable_input
800007e0 g     O .data	00000008 __metal_dt_clint_2000000
20401970 g     F .text	0000010c __swsetup_r
20401d4a g     F .text	0000009c __sfp
20407b80 g     F .text	0000004c metal_clock_set_rate_hz
204008ae g     F .text	00000042 i2c_stop
20407ea8 g     F .text	00000032 metal_gpio_get_device
20402400 g     F .text	00000030 __sread
2040647c g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
20403c64  w    F .text	0000002e metal_interrupt_vector_handler
204025b0 g     F .text	00000002 __malloc_lock
20401bc6 g     F .text	00000064 _fflush_r
204090a8 g     O .rodata	00000018 w_0_weight_2d
204054c0 g     F .text	0000002c __metal_plic0_get_threshold
20406212 g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
2044555c g     O .rodata	00000020 __sf_fake_stdin
20404afa g     F .text	000000bc __metal_local_interrupt_enable
204038b0 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
2040163a g     F .text	000000a8 memset
20404368  w    F .text	00000096 metal_lc5_interrupt_vector_handler
20400e32 g     F .text	00000808 main
80000818 g       .data	00000000 metal_segment_data_target_end
800007f4 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
20405168 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
204452d8 g     O .rodata	00000184 OV2640_QVGA
20402f5e g     F .text	00000078 .hidden __ltsf2
2040522c g     F .text	00000060 __metal_driver_cpu_get_msip
20407eda g     F .text	0000000e metal_shutdown
80000000 g       .data	00000000 metal_segment_itim_target_end
2040533e g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20405422 g     F .text	0000002e __metal_plic0_claim_interrupt
204024b4 g     F .text	00000006 __sclose
20404782  w    F .text	00000096 metal_lc12_interrupt_vector_handler
2043a498 g     O .rodata	000001e0 w_7_bias
204008f0 g     F .text	000003aa i2c_send_bytes_rs
20401ff2 g     F .text	000000de _malloc_r
204036d0 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
800007f0 g     O .data	00000004 __metal_dt_prci_10008000
20404ff2 g     F .text	00000046 __metal_driver_cpu_timebase_get
20402fd6 g     F .text	0000021c .hidden __mulsf3
20400000 g       .init	00000000 _enter
20407cd8 g     F .text	0000001a metal_cpu_get_current_hartid
20405aa8 g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20408180 g       .text	00000000 __metal_vector_table
20446350 g       *ABS*	00000000 metal_segment_itim_source_start
20400454 g     F .text	000002ba conv2D
800007c8  w    O .data	00000004 __metal_cpu_table
80000088 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
204016e2 g     F .text	00000040 iprintf
20445650 g     O .rodata	00000100 .hidden __clz_tab
20409090 g     O .rodata	00000018 w_0_bias
20403b10 g     F .text	00000018 __metal_interrupt_global_enable
204084d0 g     F .text	0000000a atexit
20408dd8 g     F .text	00000028 metal_tty_putc_raw
20402ee6 g     F .text	00000078 .hidden __gesf2
204024ba g     F .text	0000002e _write_r
20400c9a g     F .text	0000006a i2c_read_byte
20403b70 g     F .text	0000001a __metal_interrupt_timer_enable
204077da g     F .text	00000056 __metal_driver_sifive_uart0_getc
204037f8 g     F .text	000000b8 __metal_driver_riscv_clint0_disable
204025b4 g     F .text	0000010c _printf_common
800007d8 g     O .data	00000004 _impure_ptr
2040509e g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20401a7c g     F .text	0000014a __sflush_r
20407db2 g     F .text	00000040 metal_gpio_disable_output
20405c6e g     F .text	000000a6 __metal_driver_sifive_fe310_g000_pll_init
80000078 g     O .data	0000000c __metal_dt_clock_5
204007b0 g     F .text	0000003e i2c_init
204002de g     F .text	00000144 dot
20406240 g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
20408262 g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
20407f14 g     F .text	00000046 metal_spi_transfer
20403740 g     F .text	000000b8 __metal_driver_riscv_clint0_enable
20444560 g     O .rodata	00000018 w_9_weight_2d
20446350 g       *ABS*	00000000 metal_segment_data_source_start
800038b4 g       .heap	00000000 metal_segment_heap_target_end
20404a2a g     F .text	00000098 __metal_controller_interrupt_vector
800007ac g     O .data	0000000c __metal_dt_clock_1
80000440 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20401e52 g     F .text	00000058 __swhatbuf_r
2040661e g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20403e20 g     F .text	0000006a __metal_default_timer_handler
20408460 g     F .text	00000070 _write
2040562a g     F .text	00000094 __metal_plic0_handler
204041a6  w    F .text	00000096 metal_lc2_interrupt_vector_handler
20404944  w    F .text	00000096 metal_lc15_interrupt_vector_handler
20407c84 g     F .text	00000026 metal_cpu_interrupt_controller
20402430 g     F .text	0000004e __swrite
204084e2 g     F .text	00000028 exit
2040213c g     F .text	0000029a _vfiprintf_r
20401de6 g     F .text	0000006c _fwalk_reent
20403252 g     F .text	0000009c .hidden __floatunsisf
20408282 g     F .text	00000024 __metal_driver_fixed_clock_set_rate_hz
2044557c g     O .rodata	00000020 __sf_fake_stdout
800007ec g     O .data	00000004 __metal_dt_gpio_10012000
20403c4c g     F .text	00000018 __metal_default_interrupt_handler
20407e5a g     F .text	0000004e metal_gpio_get_input_pin
20408106 g     F .text	0000002e metal_uart_putc
204083cc g     F .text	0000002a _read
20406502 g     F .text	0000002a __metal_driver_sifive_gpio0_input
204452c0 g     O .rodata	00000018 w_11_weight_2d
20444578 g     O .rodata	00000d20 w_11_weight
20403f00 g     F .text	00000154 __metal_exception_handler
2040407a  w    F .text	00000096 metal_lc0_interrupt_vector_handler
20408e24 g     F .text	00000014 _exit
20408e38 g     O .rodata	00000258 w_0_weight
20405038 g     F .text	00000066 __metal_driver_cpu_mtime_get
20401eaa g     F .text	0000009c __smakebuf_r
204036a8 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204026c0 g     F .text	000002a2 _printf_i
8000081c g     O .bss	00000004 __malloc_sbrk_start
20407522 g     F .text	000000d2 __metal_driver_sifive_spi0_init
204048ae  w    F .text	00000096 metal_lc14_interrupt_vector_handler
800007fc g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
20403546 g     F .text	00000088 __metal_driver_riscv_clint0_init
20400780 g     F .text	00000030 basic_delay
80000818 g     O .bss	00000004 __malloc_free_list
80000760 g     O .data	00000020 __metal_dt_spi_10024000
2040213c g     F .text	0000029a _vfprintf_r
2040512a g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20405584 g     F .text	0000008e __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20405a30 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
2040513e g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20403c08 g     F .text	0000002c __metal_interrupt_local_disable
20403b58 g     F .text	00000018 __metal_interrupt_software_disable
20402990 g     F .text	0000030c .hidden __addsf3
2040554e g     F .text	00000036 __metal_plic0_get_priority
204080a0 g     F .text	0000003a metal_time
204080da g     F .text	0000002c metal_uart_init
800007a0 g     O .data	0000000c __metal_dt_clock_3
20405488 g     F .text	00000038 __metal_plic0_set_threshold
2040833a g     F .text	00000022 _close
20400d04 g     F .text	00000074 i2c_write_byte
80000804 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
20405804 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	fc818193          	addi	gp,gp,-56 # 80000fc8 <__global_pointer$>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	f4818193          	addi	gp,gp,-184 # 80000fc8 <__global_pointer$>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc03117          	auipc	sp,0x5fc03
2040008c:	02c10113          	addi	sp,sp,44 # 800030b4 <_sp>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	dfc02317          	auipc	t1,0xdfc02
20400096:	76e30313          	addi	t1,t1,1902 # 2800 <__stack_size>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
2040009a:	00a28563          	beq	t0,a0,204000a4 <_start+0x26>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009e:	911a                	add	sp,sp,t1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
204000a0:	0285                	addi	t0,t0,1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
204000a2:	bfe5                	j	2040009a <_start+0x1c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a4:	ff017113          	andi	sp,sp,-16
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a8:	00000293          	li	t0,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000ac:	08551963          	bne	a0,t0,2040013e <_skip_init>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000b0:	00046297          	auipc	t0,0x46
204000b4:	2a028293          	addi	t0,t0,672 # 20446350 <metal_segment_data_source_start>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b8:	5fc00317          	auipc	t1,0x5fc00
204000bc:	f4830313          	addi	t1,t1,-184 # 80000000 <metal_segment_data_target_start>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000c0:	85018393          	addi	t2,gp,-1968 # 80000818 <metal_segment_data_target_end>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c4:	00628c63          	beq	t0,t1,204000dc <_start+0x5e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c8:	00735a63          	bge	t1,t2,204000dc <_start+0x5e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000cc:	0002a503          	lw	a0,0(t0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000d0:	0291                	addi	t0,t0,4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000d2:	00a32023          	sw	a0,0(t1)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d6:	0311                	addi	t1,t1,4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d8:	fe734ae3          	blt	t1,t2,204000cc <_start+0x4e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000dc:	00046297          	auipc	t0,0x46
204000e0:	27428293          	addi	t0,t0,628 # 20446350 <metal_segment_data_source_start>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e4:	5fc00317          	auipc	t1,0x5fc00
204000e8:	f1c30313          	addi	t1,t1,-228 # 80000000 <metal_segment_data_target_start>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000ec:	5fc00397          	auipc	t2,0x5fc00
204000f0:	f1438393          	addi	t2,t2,-236 # 80000000 <metal_segment_data_target_start>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f4:	00628c63          	beq	t0,t1,2040010c <_start+0x8e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f8:	00735a63          	bge	t1,t2,2040010c <_start+0x8e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000fc:	0002a503          	lw	a0,0(t0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
20400100:	0291                	addi	t0,t0,4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
20400102:	00a32023          	sw	a0,0(t1)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400106:	0311                	addi	t1,t1,4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400108:	fe734ae3          	blt	t1,t2,204000fc <_start+0x7e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
2040010c:	0000100f          	fence.i
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400110:	5fc00317          	auipc	t1,0x5fc00
20400114:	70830313          	addi	t1,t1,1800 # 80000818 <metal_segment_data_target_end>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400118:	8ec18393          	addi	t2,gp,-1812 # 800008b4 <metal_segment_bss_target_end>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00008517          	auipc	a0,0x8
20400132:	3dc50513          	addi	a0,a0,988 # 2040850a <__libc_fini_array>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	39a080ef          	jal	ra,204084d0 <atexit>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	408080ef          	jal	ra,20408542 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__stack_size+0xd828>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00046597          	auipc	a1,0x46
20400166:	1c658593          	addi	a1,a1,454 # 20446328 <argv>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00046617          	auipc	a2,0x46
2040016e:	1c260613          	addi	a2,a2,450 # 2044632c <envp>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	36e080ef          	jal	ra,204084e2 <exit>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	49f000ef          	jal	ra,20400e32 <main>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400198:	4092                	lw	ra,4(sp)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
2040019a:	0141                	addi	sp,sp,16
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019c:	8082                	ret

Disassembly of section .text:

20400200 <print_twoD>:
print_twoD():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:236
};

// data_t arr[32] __attribute__ ((section ("customdata"))) = { 4 };

void print_twoD(twoD_t *tmp, uint32_t channel, float scale)
{
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:238
#if (DEBUG)
	printf("Size: %uX%uX%u\n", tmp->channel, tmp->r, tmp->c);
20400214:	fdc42783          	lw	a5,-36(s0)
20400218:	47d8                	lw	a4,12(a5)
2040021a:	fdc42783          	lw	a5,-36(s0)
2040021e:	4390                	lw	a2,0(a5)
20400220:	fdc42783          	lw	a5,-36(s0)
20400224:	43dc                	lw	a5,4(a5)
20400226:	86be                	mv	a3,a5
20400228:	85ba                	mv	a1,a4
2040022a:	204457b7          	lui	a5,0x20445
2040022e:	45c78513          	addi	a0,a5,1116 # 2044545c <OV2640_QVGA+0x184>
20400232:	4b0010ef          	jal	ra,204016e2 <iprintf>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:239
	for (uint32_t i = 0; i < tmp->r; i++)
20400236:	fe042623          	sw	zero,-20(s0)
2040023a:	a071                	j	204002c6 <print_twoD+0xc6>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:241
	{
		for (uint32_t j = 0; j < tmp->c; j++)
2040023c:	fe042423          	sw	zero,-24(s0)
20400240:	a0a5                	j	204002a8 <print_twoD+0xa8>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:243 (discriminator 3)
		{
			printf("%03d ", (int32_t)(tmp->data[channel * tmp->c * tmp->r + i * tmp->c + j]*scale));
20400242:	fdc42783          	lw	a5,-36(s0)
20400246:	4b98                	lw	a4,16(a5)
20400248:	fdc42783          	lw	a5,-36(s0)
2040024c:	43d4                	lw	a3,4(a5)
2040024e:	fd842783          	lw	a5,-40(s0)
20400252:	02f686b3          	mul	a3,a3,a5
20400256:	fdc42783          	lw	a5,-36(s0)
2040025a:	439c                	lw	a5,0(a5)
2040025c:	02f686b3          	mul	a3,a3,a5
20400260:	fdc42783          	lw	a5,-36(s0)
20400264:	43d0                	lw	a2,4(a5)
20400266:	fec42783          	lw	a5,-20(s0)
2040026a:	02f607b3          	mul	a5,a2,a5
2040026e:	96be                	add	a3,a3,a5
20400270:	fe842783          	lw	a5,-24(s0)
20400274:	97b6                	add	a5,a5,a3
20400276:	078a                	slli	a5,a5,0x2
20400278:	97ba                	add	a5,a5,a4
2040027a:	439c                	lw	a5,0(a5)
2040027c:	fd442583          	lw	a1,-44(s0)
20400280:	853e                	mv	a0,a5
20400282:	555020ef          	jal	ra,20402fd6 <__mulsf3>
20400286:	87aa                	mv	a5,a0
20400288:	853e                	mv	a0,a5
2040028a:	769020ef          	jal	ra,204031f2 <__fixsfsi>
2040028e:	87aa                	mv	a5,a0
20400290:	85be                	mv	a1,a5
20400292:	204457b7          	lui	a5,0x20445
20400296:	46c78513          	addi	a0,a5,1132 # 2044546c <OV2640_QVGA+0x194>
2040029a:	448010ef          	jal	ra,204016e2 <iprintf>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:241 (discriminator 3)
		for (uint32_t j = 0; j < tmp->c; j++)
2040029e:	fe842783          	lw	a5,-24(s0)
204002a2:	0785                	addi	a5,a5,1
204002a4:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:241 (discriminator 1)
204002a8:	fdc42783          	lw	a5,-36(s0)
204002ac:	43dc                	lw	a5,4(a5)
204002ae:	fe842703          	lw	a4,-24(s0)
204002b2:	f8f768e3          	bltu	a4,a5,20400242 <print_twoD+0x42>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:245 (discriminator 2)
		}
		printf("\n");
204002b6:	4529                	li	a0,10
204002b8:	46a010ef          	jal	ra,20401722 <putchar>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:239 (discriminator 2)
	for (uint32_t i = 0; i < tmp->r; i++)
204002bc:	fec42783          	lw	a5,-20(s0)
204002c0:	0785                	addi	a5,a5,1
204002c2:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:239 (discriminator 1)
204002c6:	fdc42783          	lw	a5,-36(s0)
204002ca:	439c                	lw	a5,0(a5)
204002cc:	fec42703          	lw	a4,-20(s0)
204002d0:	f6f766e3          	bltu	a4,a5,2040023c <print_twoD+0x3c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:248
	}
#endif
}
204002d4:	0001                	nop
204002d6:	50b2                	lw	ra,44(sp)
204002d8:	5422                	lw	s0,40(sp)
204002da:	6145                	addi	sp,sp,48
204002dc:	8082                	ret

204002de <dot>:
dot():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:276
		}
	}
}

void dot(twoD_t *input, const twoD_t *weights, twoD_t *output, data_t (*activation)(data_t))
{
204002de:	7179                	addi	sp,sp,-48
204002e0:	d606                	sw	ra,44(sp)
204002e2:	d422                	sw	s0,40(sp)
204002e4:	1800                	addi	s0,sp,48
204002e6:	fca42e23          	sw	a0,-36(s0)
204002ea:	fcb42c23          	sw	a1,-40(s0)
204002ee:	fcc42a23          	sw	a2,-44(s0)
204002f2:	fcd42823          	sw	a3,-48(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:277
	if (weights->r != input->r * input->c * input->channel)
204002f6:	fd842783          	lw	a5,-40(s0)
204002fa:	4398                	lw	a4,0(a5)
204002fc:	fdc42783          	lw	a5,-36(s0)
20400300:	4394                	lw	a3,0(a5)
20400302:	fdc42783          	lw	a5,-36(s0)
20400306:	43dc                	lw	a5,4(a5)
20400308:	02f686b3          	mul	a3,a3,a5
2040030c:	fdc42783          	lw	a5,-36(s0)
20400310:	47dc                	lw	a5,12(a5)
20400312:	02f687b3          	mul	a5,a3,a5
20400316:	00f70863          	beq	a4,a5,20400326 <dot+0x48>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:279
	{
		printf("size mismatch\n");
2040031a:	204457b7          	lui	a5,0x20445
2040031e:	47478513          	addi	a0,a5,1140 # 20445474 <OV2640_QVGA+0x19c>
20400322:	584010ef          	jal	ra,204018a6 <puts>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:282
	}

	output->r = weights->c;
20400326:	fd842783          	lw	a5,-40(s0)
2040032a:	43d8                	lw	a4,4(a5)
2040032c:	fd442783          	lw	a5,-44(s0)
20400330:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:283
	output->c = 1;
20400332:	fd442783          	lw	a5,-44(s0)
20400336:	4705                	li	a4,1
20400338:	c3d8                	sw	a4,4(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:287

	data_t sum;

	for (uint32_t i = 0; i < weights->c;  i++)
2040033a:	fe042423          	sw	zero,-24(s0)
2040033e:	a0f1                	j	2040040a <dot+0x12c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:289
	{
		sum = 0;
20400340:	00000793          	li	a5,0
20400344:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:290
		for (uint32_t j = 0; j < weights->r;  j++)
20400348:	fe042223          	sw	zero,-28(s0)
2040034c:	a899                	j	204003a2 <dot+0xc4>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:292 (discriminator 3)
		{
			sum += input->data[j] * weights->data[i * weights->r + j];
2040034e:	fdc42783          	lw	a5,-36(s0)
20400352:	4b98                	lw	a4,16(a5)
20400354:	fe442783          	lw	a5,-28(s0)
20400358:	078a                	slli	a5,a5,0x2
2040035a:	97ba                	add	a5,a5,a4
2040035c:	4390                	lw	a2,0(a5)
2040035e:	fd842783          	lw	a5,-40(s0)
20400362:	4b98                	lw	a4,16(a5)
20400364:	fd842783          	lw	a5,-40(s0)
20400368:	4394                	lw	a3,0(a5)
2040036a:	fe842783          	lw	a5,-24(s0)
2040036e:	02f686b3          	mul	a3,a3,a5
20400372:	fe442783          	lw	a5,-28(s0)
20400376:	97b6                	add	a5,a5,a3
20400378:	078a                	slli	a5,a5,0x2
2040037a:	97ba                	add	a5,a5,a4
2040037c:	439c                	lw	a5,0(a5)
2040037e:	85be                	mv	a1,a5
20400380:	8532                	mv	a0,a2
20400382:	455020ef          	jal	ra,20402fd6 <__mulsf3>
20400386:	87aa                	mv	a5,a0
20400388:	85be                	mv	a1,a5
2040038a:	fec42503          	lw	a0,-20(s0)
2040038e:	602020ef          	jal	ra,20402990 <__addsf3>
20400392:	87aa                	mv	a5,a0
20400394:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:290 (discriminator 3)
		for (uint32_t j = 0; j < weights->r;  j++)
20400398:	fe442783          	lw	a5,-28(s0)
2040039c:	0785                	addi	a5,a5,1
2040039e:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:290 (discriminator 1)
204003a2:	fd842783          	lw	a5,-40(s0)
204003a6:	439c                	lw	a5,0(a5)
204003a8:	fe442703          	lw	a4,-28(s0)
204003ac:	faf761e3          	bltu	a4,a5,2040034e <dot+0x70>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:295
		}

		if (weights->bias)
204003b0:	fd842783          	lw	a5,-40(s0)
204003b4:	4bdc                	lw	a5,20(a5)
204003b6:	c38d                	beqz	a5,204003d8 <dot+0xfa>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:297
		{
			sum += weights->bias[i];
204003b8:	fd842783          	lw	a5,-40(s0)
204003bc:	4bd8                	lw	a4,20(a5)
204003be:	fe842783          	lw	a5,-24(s0)
204003c2:	078a                	slli	a5,a5,0x2
204003c4:	97ba                	add	a5,a5,a4
204003c6:	439c                	lw	a5,0(a5)
204003c8:	85be                	mv	a1,a5
204003ca:	fec42503          	lw	a0,-20(s0)
204003ce:	5c2020ef          	jal	ra,20402990 <__addsf3>
204003d2:	87aa                	mv	a5,a0
204003d4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:300
		}

		if (activation)
204003d8:	fd042783          	lw	a5,-48(s0)
204003dc:	cb81                	beqz	a5,204003ec <dot+0x10e>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:302
		{
			sum = activation(sum);
204003de:	fd042783          	lw	a5,-48(s0)
204003e2:	fec42503          	lw	a0,-20(s0)
204003e6:	9782                	jalr	a5
204003e8:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:305 (discriminator 2)
		}
        
        output->data[i] = sum;
204003ec:	fd442783          	lw	a5,-44(s0)
204003f0:	4b98                	lw	a4,16(a5)
204003f2:	fe842783          	lw	a5,-24(s0)
204003f6:	078a                	slli	a5,a5,0x2
204003f8:	97ba                	add	a5,a5,a4
204003fa:	fec42703          	lw	a4,-20(s0)
204003fe:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:287 (discriminator 2)
	for (uint32_t i = 0; i < weights->c;  i++)
20400400:	fe842783          	lw	a5,-24(s0)
20400404:	0785                	addi	a5,a5,1
20400406:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:287 (discriminator 1)
2040040a:	fd842783          	lw	a5,-40(s0)
2040040e:	43dc                	lw	a5,4(a5)
20400410:	fe842703          	lw	a4,-24(s0)
20400414:	f2f766e3          	bltu	a4,a5,20400340 <dot+0x62>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:307
	}
}
20400418:	0001                	nop
2040041a:	50b2                	lw	ra,44(sp)
2040041c:	5422                	lw	s0,40(sp)
2040041e:	6145                	addi	sp,sp,48
20400420:	8082                	ret

20400422 <reLU>:
reLU():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:310

data_t reLU(data_t a)
{
20400422:	1101                	addi	sp,sp,-32
20400424:	ce06                	sw	ra,28(sp)
20400426:	cc22                	sw	s0,24(sp)
20400428:	1000                	addi	s0,sp,32
2040042a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:311
	return a > 0 ? a : 0;
2040042e:	00000593          	li	a1,0
20400432:	fec42503          	lw	a0,-20(s0)
20400436:	2b1020ef          	jal	ra,20402ee6 <__gesf2>
2040043a:	87aa                	mv	a5,a0
2040043c:	00f05563          	blez	a5,20400446 <reLU+0x24>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:311 (discriminator 1)
20400440:	fec42783          	lw	a5,-20(s0)
20400444:	a019                	j	2040044a <reLU+0x28>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:311 (discriminator 2)
20400446:	00000793          	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:312 (discriminator 5)
}
2040044a:	853e                	mv	a0,a5
2040044c:	40f2                	lw	ra,28(sp)
2040044e:	4462                	lw	s0,24(sp)
20400450:	6105                	addi	sp,sp,32
20400452:	8082                	ret

20400454 <conv2D>:
conv2D():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:316

// only works when stride = r = c
void conv2D(twoD_t *input, const twoD_t *kernel, twoD_t *output, data_t (*activation)(data_t), uint32_t stride, uint32_t r, uint32_t c)
{
20400454:	711d                	addi	sp,sp,-96
20400456:	ce86                	sw	ra,92(sp)
20400458:	cca2                	sw	s0,88(sp)
2040045a:	1080                	addi	s0,sp,96
2040045c:	faa42e23          	sw	a0,-68(s0)
20400460:	fab42c23          	sw	a1,-72(s0)
20400464:	fac42a23          	sw	a2,-76(s0)
20400468:	fad42823          	sw	a3,-80(s0)
2040046c:	fae42623          	sw	a4,-84(s0)
20400470:	faf42423          	sw	a5,-88(s0)
20400474:	fb042223          	sw	a6,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:317
	uint32_t aux_r = input->r - kernel->r + 1;
20400478:	fbc42783          	lw	a5,-68(s0)
2040047c:	4398                	lw	a4,0(a5)
2040047e:	fb842783          	lw	a5,-72(s0)
20400482:	439c                	lw	a5,0(a5)
20400484:	40f707b3          	sub	a5,a4,a5
20400488:	0785                	addi	a5,a5,1
2040048a:	fcf42223          	sw	a5,-60(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:318
	uint32_t aux_c = input->c - kernel->c + 1;
2040048e:	fbc42783          	lw	a5,-68(s0)
20400492:	43d8                	lw	a4,4(a5)
20400494:	fb842783          	lw	a5,-72(s0)
20400498:	43dc                	lw	a5,4(a5)
2040049a:	40f707b3          	sub	a5,a4,a5
2040049e:	0785                	addi	a5,a5,1
204004a0:	fcf42023          	sw	a5,-64(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:322
	data_t aux_sum;
	data_t max_pool;

	output->r = aux_r / stride;
204004a4:	fc442703          	lw	a4,-60(s0)
204004a8:	fac42783          	lw	a5,-84(s0)
204004ac:	02f75733          	divu	a4,a4,a5
204004b0:	fb442783          	lw	a5,-76(s0)
204004b4:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:323
	output->c = aux_c / stride;
204004b6:	fc042703          	lw	a4,-64(s0)
204004ba:	fac42783          	lw	a5,-84(s0)
204004be:	02f75733          	divu	a4,a4,a5
204004c2:	fb442783          	lw	a5,-76(s0)
204004c6:	c3d8                	sw	a4,4(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:325

	for (uint32_t out_ch = 0; out_ch < output->channel; out_ch++)
204004c8:	fe042223          	sw	zero,-28(s0)
204004cc:	a42d                	j	204006f6 <conv2D+0x2a2>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:327
	{
		for (uint32_t i = 0; i < aux_r;  i+=stride)
204004ce:	fe042023          	sw	zero,-32(s0)
204004d2:	a439                	j	204006e0 <conv2D+0x28c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:329
		{
			for (uint32_t j = 0; j < aux_c;  j+=stride)
204004d4:	fc042e23          	sw	zero,-36(s0)
204004d8:	a2fd                	j	204006c6 <conv2D+0x272>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:331
			{
				max_pool = 0; /* it is safe because post ReLU values are being compared */
204004da:	00000793          	li	a5,0
204004de:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:332
				for (uint32_t i_pool = 0; i_pool < r;  i_pool++)
204004e2:	fc042c23          	sw	zero,-40(s0)
204004e6:	a249                	j	20400668 <conv2D+0x214>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:334
				{
					for (uint32_t j_pool = 0; j_pool < c;  j_pool++)
204004e8:	fc042a23          	sw	zero,-44(s0)
204004ec:	a29d                	j	20400652 <conv2D+0x1fe>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:336
					{
						aux_sum = 0;
204004ee:	00000793          	li	a5,0
204004f2:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:337
						for (uint32_t ii = 0; ii < kernel->r;  ii++)
204004f6:	fc042823          	sw	zero,-48(s0)
204004fa:	a0ed                	j	204005e4 <conv2D+0x190>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:339
						{
							for (uint32_t jj = 0; jj < kernel->c;  jj++)
204004fc:	fc042623          	sw	zero,-52(s0)
20400500:	a0f1                	j	204005cc <conv2D+0x178>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:341
							{
								for (uint32_t in_ch = 0; in_ch < input->channel;  in_ch++)
20400502:	fc042423          	sw	zero,-56(s0)
20400506:	a07d                	j	204005b4 <conv2D+0x160>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:343 (discriminator 3)
								{
									aux_sum += input->data[in_ch * input->r * input->c + (i+i_pool+ii) * input->c + (j+j_pool+jj)] * kernel->data[out_ch * kernel->in_channel * kernel->r * kernel->c + in_ch * kernel->r * kernel->c + ii * kernel->c + jj];
20400508:	fbc42783          	lw	a5,-68(s0)
2040050c:	4b98                	lw	a4,16(a5)
2040050e:	fbc42783          	lw	a5,-68(s0)
20400512:	4394                	lw	a3,0(a5)
20400514:	fc842783          	lw	a5,-56(s0)
20400518:	02f686b3          	mul	a3,a3,a5
2040051c:	fe042603          	lw	a2,-32(s0)
20400520:	fd842783          	lw	a5,-40(s0)
20400524:	963e                	add	a2,a2,a5
20400526:	fd042783          	lw	a5,-48(s0)
2040052a:	97b2                	add	a5,a5,a2
2040052c:	96be                	add	a3,a3,a5
2040052e:	fbc42783          	lw	a5,-68(s0)
20400532:	43dc                	lw	a5,4(a5)
20400534:	02f686b3          	mul	a3,a3,a5
20400538:	fdc42603          	lw	a2,-36(s0)
2040053c:	fd442783          	lw	a5,-44(s0)
20400540:	963e                	add	a2,a2,a5
20400542:	fcc42783          	lw	a5,-52(s0)
20400546:	97b2                	add	a5,a5,a2
20400548:	97b6                	add	a5,a5,a3
2040054a:	078a                	slli	a5,a5,0x2
2040054c:	97ba                	add	a5,a5,a4
2040054e:	4390                	lw	a2,0(a5)
20400550:	fb842783          	lw	a5,-72(s0)
20400554:	4b98                	lw	a4,16(a5)
20400556:	fb842783          	lw	a5,-72(s0)
2040055a:	4794                	lw	a3,8(a5)
2040055c:	fe442783          	lw	a5,-28(s0)
20400560:	02f686b3          	mul	a3,a3,a5
20400564:	fc842783          	lw	a5,-56(s0)
20400568:	96be                	add	a3,a3,a5
2040056a:	fb842783          	lw	a5,-72(s0)
2040056e:	439c                	lw	a5,0(a5)
20400570:	02f686b3          	mul	a3,a3,a5
20400574:	fd042783          	lw	a5,-48(s0)
20400578:	96be                	add	a3,a3,a5
2040057a:	fb842783          	lw	a5,-72(s0)
2040057e:	43dc                	lw	a5,4(a5)
20400580:	02f686b3          	mul	a3,a3,a5
20400584:	fcc42783          	lw	a5,-52(s0)
20400588:	97b6                	add	a5,a5,a3
2040058a:	078a                	slli	a5,a5,0x2
2040058c:	97ba                	add	a5,a5,a4
2040058e:	439c                	lw	a5,0(a5)
20400590:	85be                	mv	a1,a5
20400592:	8532                	mv	a0,a2
20400594:	243020ef          	jal	ra,20402fd6 <__mulsf3>
20400598:	87aa                	mv	a5,a0
2040059a:	85be                	mv	a1,a5
2040059c:	fec42503          	lw	a0,-20(s0)
204005a0:	3f0020ef          	jal	ra,20402990 <__addsf3>
204005a4:	87aa                	mv	a5,a0
204005a6:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:341 (discriminator 3)
								for (uint32_t in_ch = 0; in_ch < input->channel;  in_ch++)
204005aa:	fc842783          	lw	a5,-56(s0)
204005ae:	0785                	addi	a5,a5,1
204005b0:	fcf42423          	sw	a5,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:341 (discriminator 1)
204005b4:	fbc42783          	lw	a5,-68(s0)
204005b8:	47dc                	lw	a5,12(a5)
204005ba:	fc842703          	lw	a4,-56(s0)
204005be:	f4f765e3          	bltu	a4,a5,20400508 <conv2D+0xb4>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:339 (discriminator 2)
							for (uint32_t jj = 0; jj < kernel->c;  jj++)
204005c2:	fcc42783          	lw	a5,-52(s0)
204005c6:	0785                	addi	a5,a5,1
204005c8:	fcf42623          	sw	a5,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:339 (discriminator 1)
204005cc:	fb842783          	lw	a5,-72(s0)
204005d0:	43dc                	lw	a5,4(a5)
204005d2:	fcc42703          	lw	a4,-52(s0)
204005d6:	f2f766e3          	bltu	a4,a5,20400502 <conv2D+0xae>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:337 (discriminator 2)
						for (uint32_t ii = 0; ii < kernel->r;  ii++)
204005da:	fd042783          	lw	a5,-48(s0)
204005de:	0785                	addi	a5,a5,1
204005e0:	fcf42823          	sw	a5,-48(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:337 (discriminator 1)
204005e4:	fb842783          	lw	a5,-72(s0)
204005e8:	439c                	lw	a5,0(a5)
204005ea:	fd042703          	lw	a4,-48(s0)
204005ee:	f0f767e3          	bltu	a4,a5,204004fc <conv2D+0xa8>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:347
								}
							}
						}
						if (kernel->bias)
204005f2:	fb842783          	lw	a5,-72(s0)
204005f6:	4bdc                	lw	a5,20(a5)
204005f8:	c38d                	beqz	a5,2040061a <conv2D+0x1c6>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:349
						{
							aux_sum += kernel->bias[out_ch];
204005fa:	fb842783          	lw	a5,-72(s0)
204005fe:	4bd8                	lw	a4,20(a5)
20400600:	fe442783          	lw	a5,-28(s0)
20400604:	078a                	slli	a5,a5,0x2
20400606:	97ba                	add	a5,a5,a4
20400608:	439c                	lw	a5,0(a5)
2040060a:	85be                	mv	a1,a5
2040060c:	fec42503          	lw	a0,-20(s0)
20400610:	380020ef          	jal	ra,20402990 <__addsf3>
20400614:	87aa                	mv	a5,a0
20400616:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:352
						}

						if (activation)
2040061a:	fb042783          	lw	a5,-80(s0)
2040061e:	cb81                	beqz	a5,2040062e <conv2D+0x1da>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:354
						{
							aux_sum = activation(aux_sum);
20400620:	fb042783          	lw	a5,-80(s0)
20400624:	fec42503          	lw	a0,-20(s0)
20400628:	9782                	jalr	a5
2040062a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:357
						}

						if (aux_sum > max_pool)
2040062e:	fe842583          	lw	a1,-24(s0)
20400632:	fec42503          	lw	a0,-20(s0)
20400636:	0b1020ef          	jal	ra,20402ee6 <__gesf2>
2040063a:	87aa                	mv	a5,a0
2040063c:	00f05663          	blez	a5,20400648 <conv2D+0x1f4>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:359
						{
							max_pool = aux_sum;
20400640:	fec42783          	lw	a5,-20(s0)
20400644:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:334 (discriminator 2)
					for (uint32_t j_pool = 0; j_pool < c;  j_pool++)
20400648:	fd442783          	lw	a5,-44(s0)
2040064c:	0785                	addi	a5,a5,1
2040064e:	fcf42a23          	sw	a5,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:334 (discriminator 1)
20400652:	fd442703          	lw	a4,-44(s0)
20400656:	fa442783          	lw	a5,-92(s0)
2040065a:	e8f76ae3          	bltu	a4,a5,204004ee <conv2D+0x9a>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:332 (discriminator 2)
				for (uint32_t i_pool = 0; i_pool < r;  i_pool++)
2040065e:	fd842783          	lw	a5,-40(s0)
20400662:	0785                	addi	a5,a5,1
20400664:	fcf42c23          	sw	a5,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:332 (discriminator 1)
20400668:	fd842703          	lw	a4,-40(s0)
2040066c:	fa842783          	lw	a5,-88(s0)
20400670:	e6f76ce3          	bltu	a4,a5,204004e8 <conv2D+0x94>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:363 (discriminator 2)
						}
					}
				}
				output->data[out_ch * output->r * output->c  + i/stride * output->c + j/stride] = max_pool;
20400674:	fb442783          	lw	a5,-76(s0)
20400678:	4b98                	lw	a4,16(a5)
2040067a:	fb442783          	lw	a5,-76(s0)
2040067e:	4394                	lw	a3,0(a5)
20400680:	fe442783          	lw	a5,-28(s0)
20400684:	02f686b3          	mul	a3,a3,a5
20400688:	fe042603          	lw	a2,-32(s0)
2040068c:	fac42783          	lw	a5,-84(s0)
20400690:	02f657b3          	divu	a5,a2,a5
20400694:	96be                	add	a3,a3,a5
20400696:	fb442783          	lw	a5,-76(s0)
2040069a:	43dc                	lw	a5,4(a5)
2040069c:	02f686b3          	mul	a3,a3,a5
204006a0:	fdc42603          	lw	a2,-36(s0)
204006a4:	fac42783          	lw	a5,-84(s0)
204006a8:	02f657b3          	divu	a5,a2,a5
204006ac:	97b6                	add	a5,a5,a3
204006ae:	078a                	slli	a5,a5,0x2
204006b0:	97ba                	add	a5,a5,a4
204006b2:	fe842703          	lw	a4,-24(s0)
204006b6:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:329 (discriminator 2)
			for (uint32_t j = 0; j < aux_c;  j+=stride)
204006b8:	fdc42703          	lw	a4,-36(s0)
204006bc:	fac42783          	lw	a5,-84(s0)
204006c0:	97ba                	add	a5,a5,a4
204006c2:	fcf42e23          	sw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:329 (discriminator 1)
204006c6:	fdc42703          	lw	a4,-36(s0)
204006ca:	fc042783          	lw	a5,-64(s0)
204006ce:	e0f766e3          	bltu	a4,a5,204004da <conv2D+0x86>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:327 (discriminator 2)
		for (uint32_t i = 0; i < aux_r;  i+=stride)
204006d2:	fe042703          	lw	a4,-32(s0)
204006d6:	fac42783          	lw	a5,-84(s0)
204006da:	97ba                	add	a5,a5,a4
204006dc:	fef42023          	sw	a5,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:327 (discriminator 1)
204006e0:	fe042703          	lw	a4,-32(s0)
204006e4:	fc442783          	lw	a5,-60(s0)
204006e8:	def766e3          	bltu	a4,a5,204004d4 <conv2D+0x80>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:325 (discriminator 2)
	for (uint32_t out_ch = 0; out_ch < output->channel; out_ch++)
204006ec:	fe442783          	lw	a5,-28(s0)
204006f0:	0785                	addi	a5,a5,1
204006f2:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:325 (discriminator 1)
204006f6:	fb442783          	lw	a5,-76(s0)
204006fa:	47dc                	lw	a5,12(a5)
204006fc:	fe442703          	lw	a4,-28(s0)
20400700:	dcf767e3          	bltu	a4,a5,204004ce <conv2D+0x7a>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:367
			}
		}
	}
}
20400704:	0001                	nop
20400706:	40f6                	lw	ra,92(sp)
20400708:	4466                	lw	s0,88(sp)
2040070a:	6125                	addi	sp,sp,96
2040070c:	8082                	ret

2040070e <get_class>:
get_class():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:370

uint32_t get_class(const twoD_t *output)
{
2040070e:	7179                	addi	sp,sp,-48
20400710:	d606                	sw	ra,44(sp)
20400712:	d422                	sw	s0,40(sp)
20400714:	1800                	addi	s0,sp,48
20400716:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:371
	uint32_t max_inx = 0;
2040071a:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:372
	for (uint32_t i = 0; i < output->r; i++)
2040071e:	fe042423          	sw	zero,-24(s0)
20400722:	a089                	j	20400764 <get_class+0x56>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:374
	{
		if (output->data[i] > output->data[max_inx])
20400724:	fdc42783          	lw	a5,-36(s0)
20400728:	4b98                	lw	a4,16(a5)
2040072a:	fe842783          	lw	a5,-24(s0)
2040072e:	078a                	slli	a5,a5,0x2
20400730:	97ba                	add	a5,a5,a4
20400732:	4394                	lw	a3,0(a5)
20400734:	fdc42783          	lw	a5,-36(s0)
20400738:	4b98                	lw	a4,16(a5)
2040073a:	fec42783          	lw	a5,-20(s0)
2040073e:	078a                	slli	a5,a5,0x2
20400740:	97ba                	add	a5,a5,a4
20400742:	439c                	lw	a5,0(a5)
20400744:	85be                	mv	a1,a5
20400746:	8536                	mv	a0,a3
20400748:	79e020ef          	jal	ra,20402ee6 <__gesf2>
2040074c:	87aa                	mv	a5,a0
2040074e:	00f05663          	blez	a5,2040075a <get_class+0x4c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:376
		{
			max_inx = i;
20400752:	fe842783          	lw	a5,-24(s0)
20400756:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:372 (discriminator 2)
	for (uint32_t i = 0; i < output->r; i++)
2040075a:	fe842783          	lw	a5,-24(s0)
2040075e:	0785                	addi	a5,a5,1
20400760:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:372 (discriminator 1)
20400764:	fdc42783          	lw	a5,-36(s0)
20400768:	439c                	lw	a5,0(a5)
2040076a:	fe842703          	lw	a4,-24(s0)
2040076e:	faf76be3          	bltu	a4,a5,20400724 <get_class+0x16>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:379
		}
	}
	return max_inx;
20400772:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:380
}
20400776:	853e                	mv	a0,a5
20400778:	50b2                	lw	ra,44(sp)
2040077a:	5422                	lw	s0,40(sp)
2040077c:	6145                	addi	sp,sp,48
2040077e:	8082                	ret

20400780 <basic_delay>:
basic_delay():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:383

void basic_delay(uint32_t amount)
{
20400780:	7179                	addi	sp,sp,-48
20400782:	d622                	sw	s0,44(sp)
20400784:	1800                	addi	s0,sp,48
20400786:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:384
	for(volatile uint32_t i = 0; i < amount; i++)
2040078a:	fe042623          	sw	zero,-20(s0)
2040078e:	a039                	j	2040079c <basic_delay+0x1c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:385 (discriminator 3)
		__asm__("nop");
20400790:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:384 (discriminator 3)
	for(volatile uint32_t i = 0; i < amount; i++)
20400792:	fec42783          	lw	a5,-20(s0)
20400796:	0785                	addi	a5,a5,1
20400798:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:384 (discriminator 1)
2040079c:	fec42783          	lw	a5,-20(s0)
204007a0:	fdc42703          	lw	a4,-36(s0)
204007a4:	fee7e6e3          	bltu	a5,a4,20400790 <basic_delay+0x10>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:386
}
204007a8:	0001                	nop
204007aa:	5432                	lw	s0,44(sp)
204007ac:	6145                	addi	sp,sp,48
204007ae:	8082                	ret

204007b0 <i2c_init>:
i2c_init():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:389

void i2c_init(struct metal_gpio *gpio_device)
{
204007b0:	1101                	addi	sp,sp,-32
204007b2:	ce06                	sw	ra,28(sp)
204007b4:	cc22                	sw	s0,24(sp)
204007b6:	1000                	addi	s0,sp,32
204007b8:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:390
	metal_gpio_disable_output(gpio_device, SDA);
204007bc:	45b1                	li	a1,12
204007be:	fec42503          	lw	a0,-20(s0)
204007c2:	5f0070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:391
	metal_gpio_enable_input(gpio_device, SDA);
204007c6:	45b1                	li	a1,12
204007c8:	fec42503          	lw	a0,-20(s0)
204007cc:	526070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:392
	metal_gpio_disable_output(gpio_device, SCL);
204007d0:	45b5                	li	a1,13
204007d2:	fec42503          	lw	a0,-20(s0)
204007d6:	5dc070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:393
	metal_gpio_enable_input(gpio_device, SCL);
204007da:	45b5                	li	a1,13
204007dc:	fec42503          	lw	a0,-20(s0)
204007e0:	512070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:394
}
204007e4:	0001                	nop
204007e6:	40f2                	lw	ra,28(sp)
204007e8:	4462                	lw	s0,24(sp)
204007ea:	6105                	addi	sp,sp,32
204007ec:	8082                	ret

204007ee <i2c_start>:
i2c_start():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:397

void i2c_start(struct metal_gpio *gpio_device)
{
204007ee:	1101                	addi	sp,sp,-32
204007f0:	ce06                	sw	ra,28(sp)
204007f2:	cc22                	sw	s0,24(sp)
204007f4:	1000                	addi	s0,sp,32
204007f6:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:398
	metal_gpio_disable_input(gpio_device, SCL);
204007fa:	45b5                	li	a1,13
204007fc:	fec42503          	lw	a0,-20(s0)
20400800:	532070ef          	jal	ra,20407d32 <metal_gpio_disable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:399
	metal_gpio_disable_input(gpio_device, SDA);
20400804:	45b1                	li	a1,12
20400806:	fec42503          	lw	a0,-20(s0)
2040080a:	528070ef          	jal	ra,20407d32 <metal_gpio_disable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:401

	metal_gpio_set_pin(gpio_device, SDA, 0);
2040080e:	4601                	li	a2,0
20400810:	45b1                	li	a1,12
20400812:	fec42503          	lw	a0,-20(s0)
20400816:	5dc070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:402
	metal_gpio_enable_output(gpio_device, SDA);
2040081a:	45b1                	li	a1,12
2040081c:	fec42503          	lw	a0,-20(s0)
20400820:	552070ef          	jal	ra,20407d72 <metal_gpio_enable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:403
	basic_delay(SHORT_DELAY);
20400824:	4515                	li	a0,5
20400826:	3fa9                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:404
	metal_gpio_set_pin(gpio_device, SCL, 0);
20400828:	4601                	li	a2,0
2040082a:	45b5                	li	a1,13
2040082c:	fec42503          	lw	a0,-20(s0)
20400830:	5c2070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:405
	metal_gpio_enable_output(gpio_device, SCL);
20400834:	45b5                	li	a1,13
20400836:	fec42503          	lw	a0,-20(s0)
2040083a:	538070ef          	jal	ra,20407d72 <metal_gpio_enable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:406
}
2040083e:	0001                	nop
20400840:	40f2                	lw	ra,28(sp)
20400842:	4462                	lw	s0,24(sp)
20400844:	6105                	addi	sp,sp,32
20400846:	8082                	ret

20400848 <i2c_busy>:
i2c_busy():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:409

_Bool i2c_busy(struct metal_gpio *gpio_device)
{
20400848:	1101                	addi	sp,sp,-32
2040084a:	ce06                	sw	ra,28(sp)
2040084c:	cc22                	sw	s0,24(sp)
2040084e:	1000                	addi	s0,sp,32
20400850:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:410
	metal_gpio_disable_output(gpio_device, SCL);
20400854:	45b5                	li	a1,13
20400856:	fec42503          	lw	a0,-20(s0)
2040085a:	558070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:411
	metal_gpio_enable_input(gpio_device, SCL);
2040085e:	45b5                	li	a1,13
20400860:	fec42503          	lw	a0,-20(s0)
20400864:	48e070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:412
	metal_gpio_disable_output(gpio_device, SDA);
20400868:	45b1                	li	a1,12
2040086a:	fec42503          	lw	a0,-20(s0)
2040086e:	544070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:413
	metal_gpio_enable_input(gpio_device, SDA);
20400872:	45b1                	li	a1,12
20400874:	fec42503          	lw	a0,-20(s0)
20400878:	47a070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:414
	return !(metal_gpio_get_input_pin(gpio_device, SDA) && metal_gpio_get_input_pin(gpio_device, SCL));
2040087c:	45b1                	li	a1,12
2040087e:	fec42503          	lw	a0,-20(s0)
20400882:	5d8070ef          	jal	ra,20407e5a <metal_gpio_get_input_pin>
20400886:	87aa                	mv	a5,a0
20400888:	cb81                	beqz	a5,20400898 <i2c_busy+0x50>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:414 (discriminator 2)
2040088a:	45b5                	li	a1,13
2040088c:	fec42503          	lw	a0,-20(s0)
20400890:	5ca070ef          	jal	ra,20407e5a <metal_gpio_get_input_pin>
20400894:	87aa                	mv	a5,a0
20400896:	e399                	bnez	a5,2040089c <i2c_busy+0x54>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:414 (discriminator 3)
20400898:	4785                	li	a5,1
2040089a:	a011                	j	2040089e <i2c_busy+0x56>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:414 (discriminator 4)
2040089c:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:414 (discriminator 6)
2040089e:	8b85                	andi	a5,a5,1
204008a0:	0ff7f793          	andi	a5,a5,255
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:415 (discriminator 6)
}
204008a4:	853e                	mv	a0,a5
204008a6:	40f2                	lw	ra,28(sp)
204008a8:	4462                	lw	s0,24(sp)
204008aa:	6105                	addi	sp,sp,32
204008ac:	8082                	ret

204008ae <i2c_stop>:
i2c_stop():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:418

void i2c_stop(struct metal_gpio *gpio_device)
{
204008ae:	1101                	addi	sp,sp,-32
204008b0:	ce06                	sw	ra,28(sp)
204008b2:	cc22                	sw	s0,24(sp)
204008b4:	1000                	addi	s0,sp,32
204008b6:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:419
	metal_gpio_disable_output(gpio_device, SCL);
204008ba:	45b5                	li	a1,13
204008bc:	fec42503          	lw	a0,-20(s0)
204008c0:	4f2070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:420
	metal_gpio_enable_input(gpio_device, SCL);
204008c4:	45b5                	li	a1,13
204008c6:	fec42503          	lw	a0,-20(s0)
204008ca:	428070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:421
	basic_delay(SHORT_DELAY);
204008ce:	4515                	li	a0,5
204008d0:	3d45                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:422
	metal_gpio_disable_output(gpio_device, SDA);
204008d2:	45b1                	li	a1,12
204008d4:	fec42503          	lw	a0,-20(s0)
204008d8:	4da070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:423
	metal_gpio_enable_input(gpio_device, SDA);
204008dc:	45b1                	li	a1,12
204008de:	fec42503          	lw	a0,-20(s0)
204008e2:	410070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:424
}
204008e6:	0001                	nop
204008e8:	40f2                	lw	ra,28(sp)
204008ea:	4462                	lw	s0,24(sp)
204008ec:	6105                	addi	sp,sp,32
204008ee:	8082                	ret

204008f0 <i2c_send_bytes_rs>:
i2c_send_bytes_rs():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:427

void i2c_send_bytes_rs(struct metal_gpio *gpio_device, uint8_t* data, uint8_t size, _Bool rs, uint8_t* data_r, uint8_t size_r)
{
204008f0:	7179                	addi	sp,sp,-48
204008f2:	d606                	sw	ra,44(sp)
204008f4:	d422                	sw	s0,40(sp)
204008f6:	1800                	addi	s0,sp,48
204008f8:	fca42e23          	sw	a0,-36(s0)
204008fc:	fcb42c23          	sw	a1,-40(s0)
20400900:	fce42823          	sw	a4,-48(s0)
20400904:	873e                	mv	a4,a5
20400906:	87b2                	mv	a5,a2
20400908:	fcf40ba3          	sb	a5,-41(s0)
2040090c:	87b6                	mv	a5,a3
2040090e:	fcf40b23          	sb	a5,-42(s0)
20400912:	87ba                	mv	a5,a4
20400914:	fcf40aa3          	sb	a5,-43(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:428
  uint8_t address_r = data[0] | 0x01;
20400918:	fd842783          	lw	a5,-40(s0)
2040091c:	0007c783          	lbu	a5,0(a5)
20400920:	0017e793          	ori	a5,a5,1
20400924:	fef407a3          	sb	a5,-17(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:430

  for(uint8_t ii=0; ii<size; ii++)
20400928:	fe040723          	sb	zero,-18(s0)
2040092c:	a21d                	j	20400a52 <i2c_send_bytes_rs+0x162>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:432
  {
	metal_gpio_disable_input(gpio_device, SDA);
2040092e:	45b1                	li	a1,12
20400930:	fdc42503          	lw	a0,-36(s0)
20400934:	3fe070ef          	jal	ra,20407d32 <metal_gpio_disable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:433
	metal_gpio_enable_output(gpio_device, SDA);
20400938:	45b1                	li	a1,12
2040093a:	fdc42503          	lw	a0,-36(s0)
2040093e:	434070ef          	jal	ra,20407d72 <metal_gpio_enable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:434
    for(uint8_t i=0; i<9; i++)
20400942:	fe0406a3          	sb	zero,-19(s0)
20400946:	a8e5                	j	20400a3e <i2c_send_bytes_rs+0x14e>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:436
    {
	  basic_delay(SHORT_DELAY);
20400948:	4515                	li	a0,5
2040094a:	3d1d                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:438

      if(i != 8)
2040094c:	fed44703          	lbu	a4,-19(s0)
20400950:	47a1                	li	a5,8
20400952:	02f70b63          	beq	a4,a5,20400988 <i2c_send_bytes_rs+0x98>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:440
      {
        if(data[ii] & 0x80)
20400956:	fee44783          	lbu	a5,-18(s0)
2040095a:	fd842703          	lw	a4,-40(s0)
2040095e:	97ba                	add	a5,a5,a4
20400960:	0007c783          	lbu	a5,0(a5)
20400964:	07e2                	slli	a5,a5,0x18
20400966:	87e1                	srai	a5,a5,0x18
20400968:	0007d963          	bgez	a5,2040097a <i2c_send_bytes_rs+0x8a>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:441
			metal_gpio_set_pin(gpio_device, SDA, 1);
2040096c:	4605                	li	a2,1
2040096e:	45b1                	li	a1,12
20400970:	fdc42503          	lw	a0,-36(s0)
20400974:	47e070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
20400978:	a8ad                	j	204009f2 <i2c_send_bytes_rs+0x102>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:443
        else
			metal_gpio_set_pin(gpio_device, SDA, 0);
2040097a:	4601                	li	a2,0
2040097c:	45b1                	li	a1,12
2040097e:	fdc42503          	lw	a0,-36(s0)
20400982:	470070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
20400986:	a0b5                	j	204009f2 <i2c_send_bytes_rs+0x102>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:447
      }
      else
      {
		metal_gpio_disable_output(gpio_device, SDA);
20400988:	45b1                	li	a1,12
2040098a:	fdc42503          	lw	a0,-36(s0)
2040098e:	424070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:448
		metal_gpio_enable_input(gpio_device, SDA);
20400992:	45b1                	li	a1,12
20400994:	fdc42503          	lw	a0,-36(s0)
20400998:	35a070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:449
        if(metal_gpio_get_input_pin(gpio_device, SDA))
2040099c:	45b1                	li	a1,12
2040099e:	fdc42503          	lw	a0,-36(s0)
204009a2:	4b8070ef          	jal	ra,20407e5a <metal_gpio_get_input_pin>
204009a6:	87aa                	mv	a5,a0
204009a8:	c799                	beqz	a5,204009b6 <i2c_send_bytes_rs+0xc6>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:451
        {
            printf("NO ACK\n");
204009aa:	204457b7          	lui	a5,0x20445
204009ae:	48478513          	addi	a0,a5,1156 # 20445484 <OV2640_QVGA+0x1ac>
204009b2:	6f5000ef          	jal	ra,204018a6 <puts>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:454
        }

		metal_gpio_disable_input(gpio_device, SDA);
204009b6:	45b1                	li	a1,12
204009b8:	fdc42503          	lw	a0,-36(s0)
204009bc:	376070ef          	jal	ra,20407d32 <metal_gpio_disable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:455
		metal_gpio_enable_output(gpio_device, SDA);
204009c0:	45b1                	li	a1,12
204009c2:	fdc42503          	lw	a0,-36(s0)
204009c6:	3ac070ef          	jal	ra,20407d72 <metal_gpio_enable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:456
        if(rs == 0)
204009ca:	fd644783          	lbu	a5,-42(s0)
204009ce:	0017c793          	xori	a5,a5,1
204009d2:	0ff7f793          	andi	a5,a5,255
204009d6:	cb81                	beqz	a5,204009e6 <i2c_send_bytes_rs+0xf6>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:458
        {
          metal_gpio_set_pin(gpio_device, SDA, 0);
204009d8:	4601                	li	a2,0
204009da:	45b1                	li	a1,12
204009dc:	fdc42503          	lw	a0,-36(s0)
204009e0:	412070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
204009e4:	a039                	j	204009f2 <i2c_send_bytes_rs+0x102>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:462
        }
        else
        {
          metal_gpio_set_pin(gpio_device, SDA, 1);
204009e6:	4605                	li	a2,1
204009e8:	45b1                	li	a1,12
204009ea:	fdc42503          	lw	a0,-36(s0)
204009ee:	404070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:466 (discriminator 2)
        }

      }
      basic_delay(LONG_DELAY-SHORT_DELAY);
204009f2:	4551                	li	a0,20
204009f4:	3371                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:468 (discriminator 2)

      metal_gpio_set_pin(gpio_device, SCL, 1);
204009f6:	4605                	li	a2,1
204009f8:	45b5                	li	a1,13
204009fa:	fdc42503          	lw	a0,-36(s0)
204009fe:	3f4070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:470 (discriminator 2)

      basic_delay(LONG_DELAY);
20400a02:	4565                	li	a0,25
20400a04:	3bb5                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:472 (discriminator 2)

      metal_gpio_set_pin(gpio_device, SCL, 0);
20400a06:	4601                	li	a2,0
20400a08:	45b5                	li	a1,13
20400a0a:	fdc42503          	lw	a0,-36(s0)
20400a0e:	3e4070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:474 (discriminator 2)

      data[ii] <<= 1;
20400a12:	fee44783          	lbu	a5,-18(s0)
20400a16:	fd842703          	lw	a4,-40(s0)
20400a1a:	97ba                	add	a5,a5,a4
20400a1c:	0007c703          	lbu	a4,0(a5)
20400a20:	fee44783          	lbu	a5,-18(s0)
20400a24:	fd842683          	lw	a3,-40(s0)
20400a28:	97b6                	add	a5,a5,a3
20400a2a:	0706                	slli	a4,a4,0x1
20400a2c:	0ff77713          	andi	a4,a4,255
20400a30:	00e78023          	sb	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:434 (discriminator 2)
    for(uint8_t i=0; i<9; i++)
20400a34:	fed44783          	lbu	a5,-19(s0)
20400a38:	0785                	addi	a5,a5,1
20400a3a:	fef406a3          	sb	a5,-19(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:434 (discriminator 1)
20400a3e:	fed44703          	lbu	a4,-19(s0)
20400a42:	47a1                	li	a5,8
20400a44:	f0e7f2e3          	bgeu	a5,a4,20400948 <i2c_send_bytes_rs+0x58>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:430 (discriminator 2)
  for(uint8_t ii=0; ii<size; ii++)
20400a48:	fee44783          	lbu	a5,-18(s0)
20400a4c:	0785                	addi	a5,a5,1
20400a4e:	fef40723          	sb	a5,-18(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:430 (discriminator 1)
20400a52:	fee44703          	lbu	a4,-18(s0)
20400a56:	fd744783          	lbu	a5,-41(s0)
20400a5a:	ecf76ae3          	bltu	a4,a5,2040092e <i2c_send_bytes_rs+0x3e>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:478
    }
  }

  if(rs == 0)
20400a5e:	fd644783          	lbu	a5,-42(s0)
20400a62:	0017c793          	xori	a5,a5,1
20400a66:	0ff7f793          	andi	a5,a5,255
20400a6a:	22079363          	bnez	a5,20400c90 <i2c_send_bytes_rs+0x3a0>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:481
    return;

  metal_gpio_set_pin(gpio_device, SCL, 1);
20400a6e:	4605                	li	a2,1
20400a70:	45b5                	li	a1,13
20400a72:	fdc42503          	lw	a0,-36(s0)
20400a76:	37c070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:483

  basic_delay(SHORT_DELAY);
20400a7a:	4515                	li	a0,5
20400a7c:	3311                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:485

  metal_gpio_set_pin(gpio_device, SDA, 0);
20400a7e:	4601                	li	a2,0
20400a80:	45b1                	li	a1,12
20400a82:	fdc42503          	lw	a0,-36(s0)
20400a86:	36c070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:487

  basic_delay(SHORT_DELAY);
20400a8a:	4515                	li	a0,5
20400a8c:	39d5                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:489

  metal_gpio_set_pin(gpio_device, SCL, 0);
20400a8e:	4601                	li	a2,0
20400a90:	45b5                	li	a1,13
20400a92:	fdc42503          	lw	a0,-36(s0)
20400a96:	35c070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:491

  for(uint8_t i=0; i<9; i++)
20400a9a:	fe040623          	sb	zero,-20(s0)
20400a9e:	a859                	j	20400b34 <i2c_send_bytes_rs+0x244>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:493
  {
    basic_delay(SHORT_DELAY);
20400aa0:	4515                	li	a0,5
20400aa2:	39f9                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:494
    if(i != 8)
20400aa4:	fec44703          	lbu	a4,-20(s0)
20400aa8:	47a1                	li	a5,8
20400aaa:	02f70463          	beq	a4,a5,20400ad2 <i2c_send_bytes_rs+0x1e2>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:496
    {
      if(address_r & 0x80)
20400aae:	fef40783          	lb	a5,-17(s0)
20400ab2:	0007d963          	bgez	a5,20400ac4 <i2c_send_bytes_rs+0x1d4>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:497
        metal_gpio_set_pin(gpio_device, SDA, 1);
20400ab6:	4605                	li	a2,1
20400ab8:	45b1                	li	a1,12
20400aba:	fdc42503          	lw	a0,-36(s0)
20400abe:	334070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
20400ac2:	a83d                	j	20400b00 <i2c_send_bytes_rs+0x210>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:499
      else
        metal_gpio_set_pin(gpio_device, SDA, 0);
20400ac4:	4601                	li	a2,0
20400ac6:	45b1                	li	a1,12
20400ac8:	fdc42503          	lw	a0,-36(s0)
20400acc:	326070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
20400ad0:	a805                	j	20400b00 <i2c_send_bytes_rs+0x210>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:503
    }
    else
    {
	  metal_gpio_disable_output(gpio_device, SDA);
20400ad2:	45b1                	li	a1,12
20400ad4:	fdc42503          	lw	a0,-36(s0)
20400ad8:	2da070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:504
	  metal_gpio_enable_input(gpio_device, SDA);
20400adc:	45b1                	li	a1,12
20400ade:	fdc42503          	lw	a0,-36(s0)
20400ae2:	210070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:505
      if(metal_gpio_get_input_pin(gpio_device, SDA))
20400ae6:	45b1                	li	a1,12
20400ae8:	fdc42503          	lw	a0,-36(s0)
20400aec:	36e070ef          	jal	ra,20407e5a <metal_gpio_get_input_pin>
20400af0:	87aa                	mv	a5,a0
20400af2:	c799                	beqz	a5,20400b00 <i2c_send_bytes_rs+0x210>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:507
      {
          printf("NO ACK\n");
20400af4:	204457b7          	lui	a5,0x20445
20400af8:	48478513          	addi	a0,a5,1156 # 20445484 <OV2640_QVGA+0x1ac>
20400afc:	5ab000ef          	jal	ra,204018a6 <puts>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:510 (discriminator 2)
      }
    }
    basic_delay(LONG_DELAY-SHORT_DELAY);
20400b00:	4551                	li	a0,20
20400b02:	39bd                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:512 (discriminator 2)

    metal_gpio_set_pin(gpio_device, SCL, 1);
20400b04:	4605                	li	a2,1
20400b06:	45b5                	li	a1,13
20400b08:	fdc42503          	lw	a0,-36(s0)
20400b0c:	2e6070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:514 (discriminator 2)

    basic_delay(LONG_DELAY);
20400b10:	4565                	li	a0,25
20400b12:	31bd                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:516 (discriminator 2)

    metal_gpio_set_pin(gpio_device, SCL, 0);
20400b14:	4601                	li	a2,0
20400b16:	45b5                	li	a1,13
20400b18:	fdc42503          	lw	a0,-36(s0)
20400b1c:	2d6070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:518 (discriminator 2)

    address_r <<= 1;
20400b20:	fef44783          	lbu	a5,-17(s0)
20400b24:	0786                	slli	a5,a5,0x1
20400b26:	fef407a3          	sb	a5,-17(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:491 (discriminator 2)
  for(uint8_t i=0; i<9; i++)
20400b2a:	fec44783          	lbu	a5,-20(s0)
20400b2e:	0785                	addi	a5,a5,1
20400b30:	fef40623          	sb	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:491 (discriminator 1)
20400b34:	fec44703          	lbu	a4,-20(s0)
20400b38:	47a1                	li	a5,8
20400b3a:	f6e7f3e3          	bgeu	a5,a4,20400aa0 <i2c_send_bytes_rs+0x1b0>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:522
  }

  // Receive Data
  for(uint8_t ii=0; ii<size_r; ii++)
20400b3e:	fe0405a3          	sb	zero,-21(s0)
20400b42:	a281                	j	20400c82 <i2c_send_bytes_rs+0x392>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:524
  {
    for(uint8_t i=0; i<9; i++)
20400b44:	fe040523          	sb	zero,-22(s0)
20400b48:	a201                	j	20400c48 <i2c_send_bytes_rs+0x358>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:526
    {
      metal_gpio_set_pin(gpio_device, SCL, 1);
20400b4a:	4605                	li	a2,1
20400b4c:	45b5                	li	a1,13
20400b4e:	fdc42503          	lw	a0,-36(s0)
20400b52:	2a0070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:528

      if(i!=8)
20400b56:	fea44703          	lbu	a4,-22(s0)
20400b5a:	47a1                	li	a5,8
20400b5c:	02f70363          	beq	a4,a5,20400b82 <i2c_send_bytes_rs+0x292>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:529
        data_r[ii] <<= 1;
20400b60:	feb44783          	lbu	a5,-21(s0)
20400b64:	fd042703          	lw	a4,-48(s0)
20400b68:	97ba                	add	a5,a5,a4
20400b6a:	0007c703          	lbu	a4,0(a5)
20400b6e:	feb44783          	lbu	a5,-21(s0)
20400b72:	fd042683          	lw	a3,-48(s0)
20400b76:	97b6                	add	a5,a5,a3
20400b78:	0706                	slli	a4,a4,0x1
20400b7a:	0ff77713          	andi	a4,a4,255
20400b7e:	00e78023          	sb	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:531

      basic_delay(SHORT_DELAY);
20400b82:	4515                	li	a0,5
20400b84:	3ef5                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:533

      if(i!=8)
20400b86:	fea44703          	lbu	a4,-22(s0)
20400b8a:	47a1                	li	a5,8
20400b8c:	02f70c63          	beq	a4,a5,20400bc4 <i2c_send_bytes_rs+0x2d4>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:535
      {
        if(metal_gpio_get_input_pin(gpio_device, SDA))
20400b90:	45b1                	li	a1,12
20400b92:	fdc42503          	lw	a0,-36(s0)
20400b96:	2c4070ef          	jal	ra,20407e5a <metal_gpio_get_input_pin>
20400b9a:	87aa                	mv	a5,a0
20400b9c:	cbb9                	beqz	a5,20400bf2 <i2c_send_bytes_rs+0x302>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:537
        {
          data_r[ii] |= 0x1;
20400b9e:	feb44783          	lbu	a5,-21(s0)
20400ba2:	fd042703          	lw	a4,-48(s0)
20400ba6:	97ba                	add	a5,a5,a4
20400ba8:	0007c703          	lbu	a4,0(a5)
20400bac:	feb44783          	lbu	a5,-21(s0)
20400bb0:	fd042683          	lw	a3,-48(s0)
20400bb4:	97b6                	add	a5,a5,a3
20400bb6:	00176713          	ori	a4,a4,1
20400bba:	0ff77713          	andi	a4,a4,255
20400bbe:	00e78023          	sb	a4,0(a5)
20400bc2:	a805                	j	20400bf2 <i2c_send_bytes_rs+0x302>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:540
        }
      }
      else if(ii == (size_r-1))
20400bc4:	feb44703          	lbu	a4,-21(s0)
20400bc8:	fd544783          	lbu	a5,-43(s0)
20400bcc:	17fd                	addi	a5,a5,-1
20400bce:	02f71263          	bne	a4,a5,20400bf2 <i2c_send_bytes_rs+0x302>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:542
      {
		metal_gpio_disable_input(gpio_device, SDA);
20400bd2:	45b1                	li	a1,12
20400bd4:	fdc42503          	lw	a0,-36(s0)
20400bd8:	15a070ef          	jal	ra,20407d32 <metal_gpio_disable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:543
		metal_gpio_enable_output(gpio_device, SDA);
20400bdc:	45b1                	li	a1,12
20400bde:	fdc42503          	lw	a0,-36(s0)
20400be2:	190070ef          	jal	ra,20407d72 <metal_gpio_enable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:544
        metal_gpio_set_pin(gpio_device, SDA, 0);
20400be6:	4601                	li	a2,0
20400be8:	45b1                	li	a1,12
20400bea:	fdc42503          	lw	a0,-36(s0)
20400bee:	204070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:549
      } else {

      }

      basic_delay(LONG_DELAY-SHORT_DELAY);
20400bf2:	4551                	li	a0,20
20400bf4:	3671                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:551

      metal_gpio_set_pin(gpio_device, SCL, 0);
20400bf6:	4601                	li	a2,0
20400bf8:	45b5                	li	a1,13
20400bfa:	fdc42503          	lw	a0,-36(s0)
20400bfe:	1f4070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:553

      if((i==7) && (ii != (size_r-1))){
20400c02:	fea44703          	lbu	a4,-22(s0)
20400c06:	479d                	li	a5,7
20400c08:	02f71963          	bne	a4,a5,20400c3a <i2c_send_bytes_rs+0x34a>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:553 (discriminator 1)
20400c0c:	feb44703          	lbu	a4,-21(s0)
20400c10:	fd544783          	lbu	a5,-43(s0)
20400c14:	17fd                	addi	a5,a5,-1
20400c16:	02f70263          	beq	a4,a5,20400c3a <i2c_send_bytes_rs+0x34a>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:554
		metal_gpio_disable_input(gpio_device, SDA);
20400c1a:	45b1                	li	a1,12
20400c1c:	fdc42503          	lw	a0,-36(s0)
20400c20:	112070ef          	jal	ra,20407d32 <metal_gpio_disable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:555
		metal_gpio_enable_output(gpio_device, SDA);
20400c24:	45b1                	li	a1,12
20400c26:	fdc42503          	lw	a0,-36(s0)
20400c2a:	148070ef          	jal	ra,20407d72 <metal_gpio_enable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:556
        metal_gpio_set_pin(gpio_device, SDA, 0);
20400c2e:	4601                	li	a2,0
20400c30:	45b1                	li	a1,12
20400c32:	fdc42503          	lw	a0,-36(s0)
20400c36:	1bc070ef          	jal	ra,20407df2 <metal_gpio_set_pin>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:558 (discriminator 2)
      }
      basic_delay(LONG_DELAY);
20400c3a:	4565                	li	a0,25
20400c3c:	3691                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:524 (discriminator 2)
    for(uint8_t i=0; i<9; i++)
20400c3e:	fea44783          	lbu	a5,-22(s0)
20400c42:	0785                	addi	a5,a5,1
20400c44:	fef40523          	sb	a5,-22(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:524 (discriminator 1)
20400c48:	fea44703          	lbu	a4,-22(s0)
20400c4c:	47a1                	li	a5,8
20400c4e:	eee7fee3          	bgeu	a5,a4,20400b4a <i2c_send_bytes_rs+0x25a>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:562

    }

    if(ii != (size_r-1)){
20400c52:	feb44703          	lbu	a4,-21(s0)
20400c56:	fd544783          	lbu	a5,-43(s0)
20400c5a:	17fd                	addi	a5,a5,-1
20400c5c:	00f70e63          	beq	a4,a5,20400c78 <i2c_send_bytes_rs+0x388>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:563
		  metal_gpio_disable_output(gpio_device, SDA);
20400c60:	45b1                	li	a1,12
20400c62:	fdc42503          	lw	a0,-36(s0)
20400c66:	14c070ef          	jal	ra,20407db2 <metal_gpio_disable_output>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:564
		  metal_gpio_enable_input(gpio_device, SDA);
20400c6a:	45b1                	li	a1,12
20400c6c:	fdc42503          	lw	a0,-36(s0)
20400c70:	082070ef          	jal	ra,20407cf2 <metal_gpio_enable_input>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:565
          basic_delay(SHORT_DELAY);
20400c74:	4515                	li	a0,5
20400c76:	3629                	jal	20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:522 (discriminator 2)
  for(uint8_t ii=0; ii<size_r; ii++)
20400c78:	feb44783          	lbu	a5,-21(s0)
20400c7c:	0785                	addi	a5,a5,1
20400c7e:	fef405a3          	sb	a5,-21(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:522 (discriminator 1)
20400c82:	feb44703          	lbu	a4,-21(s0)
20400c86:	fd544783          	lbu	a5,-43(s0)
20400c8a:	eaf76de3          	bltu	a4,a5,20400b44 <i2c_send_bytes_rs+0x254>
20400c8e:	a011                	j	20400c92 <i2c_send_bytes_rs+0x3a2>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:479
    return;
20400c90:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:568
    }
  }
}
20400c92:	50b2                	lw	ra,44(sp)
20400c94:	5422                	lw	s0,40(sp)
20400c96:	6145                	addi	sp,sp,48
20400c98:	8082                	ret

20400c9a <i2c_read_byte>:
i2c_read_byte():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:572

/* Address is 7 bit. */
uint8_t i2c_read_byte(struct metal_gpio *gpio_device, uint8_t address, uint8_t reg_addr)
{
20400c9a:	7179                	addi	sp,sp,-48
20400c9c:	d606                	sw	ra,44(sp)
20400c9e:	d422                	sw	s0,40(sp)
20400ca0:	1800                	addi	s0,sp,48
20400ca2:	fca42e23          	sw	a0,-36(s0)
20400ca6:	87ae                	mv	a5,a1
20400ca8:	8732                	mv	a4,a2
20400caa:	fcf40da3          	sb	a5,-37(s0)
20400cae:	87ba                	mv	a5,a4
20400cb0:	fcf40d23          	sb	a5,-38(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:575
  uint8_t temp[2];
  uint8_t data;
  temp[0]=address<<1;
20400cb4:	fdb44783          	lbu	a5,-37(s0)
20400cb8:	0786                	slli	a5,a5,0x1
20400cba:	0ff7f793          	andi	a5,a5,255
20400cbe:	fef40623          	sb	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:576
  temp[1]=reg_addr;
20400cc2:	fda44783          	lbu	a5,-38(s0)
20400cc6:	fef406a3          	sb	a5,-19(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:577
  while(i2c_busy(gpio_device));
20400cca:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:577 (discriminator 1)
20400ccc:	fdc42503          	lw	a0,-36(s0)
20400cd0:	3ea5                	jal	20400848 <i2c_busy>
20400cd2:	87aa                	mv	a5,a0
20400cd4:	ffe5                	bnez	a5,20400ccc <i2c_read_byte+0x32>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:578
  i2c_start(gpio_device);
20400cd6:	fdc42503          	lw	a0,-36(s0)
20400cda:	3e11                	jal	204007ee <i2c_start>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:579
  i2c_send_bytes_rs(gpio_device, temp, sizeof(temp), 1, &data, 1);
20400cdc:	feb40713          	addi	a4,s0,-21
20400ce0:	fec40593          	addi	a1,s0,-20
20400ce4:	4785                	li	a5,1
20400ce6:	4685                	li	a3,1
20400ce8:	4609                	li	a2,2
20400cea:	fdc42503          	lw	a0,-36(s0)
20400cee:	3109                	jal	204008f0 <i2c_send_bytes_rs>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:580
  i2c_stop(gpio_device);
20400cf0:	fdc42503          	lw	a0,-36(s0)
20400cf4:	3e6d                	jal	204008ae <i2c_stop>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:581
  return data;
20400cf6:	feb44783          	lbu	a5,-21(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:582
}
20400cfa:	853e                	mv	a0,a5
20400cfc:	50b2                	lw	ra,44(sp)
20400cfe:	5422                	lw	s0,40(sp)
20400d00:	6145                	addi	sp,sp,48
20400d02:	8082                	ret

20400d04 <i2c_write_byte>:
i2c_write_byte():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:586


void i2c_write_byte(struct metal_gpio *gpio_device, uint8_t address, uint8_t reg_addr, uint8_t val)
{
20400d04:	7179                	addi	sp,sp,-48
20400d06:	d606                	sw	ra,44(sp)
20400d08:	d422                	sw	s0,40(sp)
20400d0a:	1800                	addi	s0,sp,48
20400d0c:	fca42e23          	sw	a0,-36(s0)
20400d10:	87ae                	mv	a5,a1
20400d12:	8736                	mv	a4,a3
20400d14:	fcf40da3          	sb	a5,-37(s0)
20400d18:	87b2                	mv	a5,a2
20400d1a:	fcf40d23          	sb	a5,-38(s0)
20400d1e:	87ba                	mv	a5,a4
20400d20:	fcf40ca3          	sb	a5,-39(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:589
  uint8_t temp[3];
  uint8_t data;
  temp[0]=address<<1;
20400d24:	fdb44783          	lbu	a5,-37(s0)
20400d28:	0786                	slli	a5,a5,0x1
20400d2a:	0ff7f793          	andi	a5,a5,255
20400d2e:	fef40623          	sb	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:590
  temp[1]=reg_addr;
20400d32:	fda44783          	lbu	a5,-38(s0)
20400d36:	fef406a3          	sb	a5,-19(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:591
  temp[2]=val;
20400d3a:	fd944783          	lbu	a5,-39(s0)
20400d3e:	fef40723          	sb	a5,-18(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:592
  while(i2c_busy(gpio_device));
20400d42:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:592 (discriminator 1)
20400d44:	fdc42503          	lw	a0,-36(s0)
20400d48:	3601                	jal	20400848 <i2c_busy>
20400d4a:	87aa                	mv	a5,a0
20400d4c:	ffe5                	bnez	a5,20400d44 <i2c_write_byte+0x40>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:593
  i2c_start(gpio_device);
20400d4e:	fdc42503          	lw	a0,-36(s0)
20400d52:	3c71                	jal	204007ee <i2c_start>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:594
  i2c_send_bytes_rs(gpio_device, temp, sizeof(temp), 0, &data, 1);
20400d54:	feb40713          	addi	a4,s0,-21
20400d58:	fec40593          	addi	a1,s0,-20
20400d5c:	4785                	li	a5,1
20400d5e:	4681                	li	a3,0
20400d60:	460d                	li	a2,3
20400d62:	fdc42503          	lw	a0,-36(s0)
20400d66:	3669                	jal	204008f0 <i2c_send_bytes_rs>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:595
  i2c_stop(gpio_device);
20400d68:	fdc42503          	lw	a0,-36(s0)
20400d6c:	3689                	jal	204008ae <i2c_stop>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:596
}
20400d6e:	0001                	nop
20400d70:	50b2                	lw	ra,44(sp)
20400d72:	5422                	lw	s0,40(sp)
20400d74:	6145                	addi	sp,sp,48
20400d76:	8082                	ret

20400d78 <read_fifo_len>:
read_fifo_len():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:599

uint32_t read_fifo_len(struct metal_spi *spi, struct metal_spi_config *conf)
{
20400d78:	7179                	addi	sp,sp,-48
20400d7a:	d606                	sw	ra,44(sp)
20400d7c:	d422                	sw	s0,40(sp)
20400d7e:	1800                	addi	s0,sp,48
20400d80:	fca42e23          	sw	a0,-36(s0)
20400d84:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:600
	uint32_t len = 0;
20400d88:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:601
	char tx_buf[2] = {0x42, 0x00};
20400d8c:	04200793          	li	a5,66
20400d90:	fef40423          	sb	a5,-24(s0)
20400d94:	fe0404a3          	sb	zero,-23(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:603
	char rx_buf[2];
	metal_spi_transfer(spi, conf, 2, tx_buf, rx_buf);
20400d98:	fe440713          	addi	a4,s0,-28
20400d9c:	fe840793          	addi	a5,s0,-24
20400da0:	86be                	mv	a3,a5
20400da2:	4609                	li	a2,2
20400da4:	fd842583          	lw	a1,-40(s0)
20400da8:	fdc42503          	lw	a0,-36(s0)
20400dac:	168070ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:604
	len |= rx_buf[1];
20400db0:	fe544783          	lbu	a5,-27(s0)
20400db4:	873e                	mv	a4,a5
20400db6:	fec42783          	lw	a5,-20(s0)
20400dba:	8fd9                	or	a5,a5,a4
20400dbc:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:606

	tx_buf[0] = 0x43;
20400dc0:	04300793          	li	a5,67
20400dc4:	fef40423          	sb	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:607
	metal_spi_transfer(spi, conf, 2, tx_buf, rx_buf);
20400dc8:	fe440713          	addi	a4,s0,-28
20400dcc:	fe840793          	addi	a5,s0,-24
20400dd0:	86be                	mv	a3,a5
20400dd2:	4609                	li	a2,2
20400dd4:	fd842583          	lw	a1,-40(s0)
20400dd8:	fdc42503          	lw	a0,-36(s0)
20400ddc:	138070ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:608
	len |= rx_buf[1] << 8;
20400de0:	fe544783          	lbu	a5,-27(s0)
20400de4:	07a2                	slli	a5,a5,0x8
20400de6:	873e                	mv	a4,a5
20400de8:	fec42783          	lw	a5,-20(s0)
20400dec:	8fd9                	or	a5,a5,a4
20400dee:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:610

	tx_buf[0] = 0x44;
20400df2:	04400793          	li	a5,68
20400df6:	fef40423          	sb	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:611
	metal_spi_transfer(spi, conf, 2, tx_buf, rx_buf);
20400dfa:	fe440713          	addi	a4,s0,-28
20400dfe:	fe840793          	addi	a5,s0,-24
20400e02:	86be                	mv	a3,a5
20400e04:	4609                	li	a2,2
20400e06:	fd842583          	lw	a1,-40(s0)
20400e0a:	fdc42503          	lw	a0,-36(s0)
20400e0e:	106070ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:612
	len |= rx_buf[1] << 16;
20400e12:	fe544783          	lbu	a5,-27(s0)
20400e16:	07c2                	slli	a5,a5,0x10
20400e18:	873e                	mv	a4,a5
20400e1a:	fec42783          	lw	a5,-20(s0)
20400e1e:	8fd9                	or	a5,a5,a4
20400e20:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:614

	return len;
20400e24:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:615
}
20400e28:	853e                	mv	a0,a5
20400e2a:	50b2                	lw	ra,44(sp)
20400e2c:	5422                	lw	s0,40(sp)
20400e2e:	6145                	addi	sp,sp,48
20400e30:	8082                	ret

20400e32 <main>:
main():
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:617

int main() {
20400e32:	cb010113          	addi	sp,sp,-848
20400e36:	34112623          	sw	ra,844(sp)
20400e3a:	34812423          	sw	s0,840(sp)
20400e3e:	34912223          	sw	s1,836(sp)
20400e42:	0e80                	addi	s0,sp,848
20400e44:	7379                	lui	t1,0xffffe
20400e46:	911a                	add	sp,sp,t1
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:618
	long cpu_clock = metal_clock_get_rate_hz(&__metal_dt_clock_4.clock);
20400e48:	800007b7          	lui	a5,0x80000
20400e4c:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xffffcf04>
20400e50:	50b060ef          	jal	ra,20407b5a <metal_clock_get_rate_hz>
20400e54:	fca42c23          	sw	a0,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:619
	long new_cpu_clock = metal_clock_set_rate_hz(&__metal_dt_clock_4.clock, 360000000L);
20400e58:	157537b7          	lui	a5,0x15753
20400e5c:	a0078593          	addi	a1,a5,-1536 # 15752a00 <__stack_size+0x15750200>
20400e60:	800007b7          	lui	a5,0x80000
20400e64:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xffffcf04>
20400e68:	519060ef          	jal	ra,20407b80 <metal_clock_set_rate_hz>
20400e6c:	fca42a23          	sw	a0,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:620
	printf("New clk: %ld\n", new_cpu_clock);
20400e70:	fd442583          	lw	a1,-44(s0)
20400e74:	204457b7          	lui	a5,0x20445
20400e78:	48c78513          	addi	a0,a5,1164 # 2044548c <OV2640_QVGA+0x1b4>
20400e7c:	067000ef          	jal	ra,204016e2 <iprintf>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:627
	twoD_t input, output, output2, output3, output4, output5;

	// Maximum memory usage is 2*max(32*32, 6*14*14, 16*5*5, 120, 84, 10)*sizeof(data_t), ping pong buffer is being used.
	// Maximum memory usage is 2*max(1024, 1176, 400, 120, 84, 10)*sizeof(data_t), ping pong buffer is being used.

	data_t buffer1[1024] = {0};
20400e80:	77fd                	lui	a5,0xfffff
20400e82:	ff040713          	addi	a4,s0,-16
20400e86:	97ba                	add	a5,a5,a4
20400e88:	f4878793          	addi	a5,a5,-184 # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
20400e8c:	6705                	lui	a4,0x1
20400e8e:	863a                	mv	a2,a4
20400e90:	4581                	li	a1,0
20400e92:	853e                	mv	a0,a5
20400e94:	7a6000ef          	jal	ra,2040163a <memset>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:628
	data_t buffer2[1176] = {0};
20400e98:	77f9                	lui	a5,0xffffe
20400e9a:	ff040713          	addi	a4,s0,-16
20400e9e:	97ba                	add	a5,a5,a4
20400ea0:	ce878713          	addi	a4,a5,-792 # ffffdce8 <metal_segment_heap_target_end+0x7fffa434>
20400ea4:	6785                	lui	a5,0x1
20400ea6:	26078793          	addi	a5,a5,608 # 1260 <__heap_size+0xa60>
20400eaa:	863e                	mv	a2,a5
20400eac:	4581                	li	a1,0
20400eae:	853a                	mv	a0,a4
20400eb0:	78a000ef          	jal	ra,2040163a <memset>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:630

	input.r = input.c = 32;
20400eb4:	02000793          	li	a5,32
20400eb8:	faf42a23          	sw	a5,-76(s0)
20400ebc:	fb442783          	lw	a5,-76(s0)
20400ec0:	faf42823          	sw	a5,-80(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:631
	input.channel = 1;
20400ec4:	4785                	li	a5,1
20400ec6:	faf42e23          	sw	a5,-68(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:632
	input.data = buffer1;
20400eca:	77fd                	lui	a5,0xfffff
20400ecc:	f4878793          	addi	a5,a5,-184 # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
20400ed0:	ff040713          	addi	a4,s0,-16
20400ed4:	97ba                	add	a5,a5,a4
20400ed6:	fcf42023          	sw	a5,-64(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:633
	input.bias = NULL;
20400eda:	fc042223          	sw	zero,-60(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:635

	output.r = output.c = (32-5+1)/2;
20400ede:	47b9                	li	a5,14
20400ee0:	f8f42e23          	sw	a5,-100(s0)
20400ee4:	f9c42783          	lw	a5,-100(s0)
20400ee8:	f8f42c23          	sw	a5,-104(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:636
	output.data = buffer2;
20400eec:	77f9                	lui	a5,0xffffe
20400eee:	ce878793          	addi	a5,a5,-792 # ffffdce8 <metal_segment_heap_target_end+0x7fffa434>
20400ef2:	ff040713          	addi	a4,s0,-16
20400ef6:	97ba                	add	a5,a5,a4
20400ef8:	faf42423          	sw	a5,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:637
	output.bias = NULL;
20400efc:	fa042623          	sw	zero,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:639

	output2.r = output2.c = (14-5+1)/2;
20400f00:	4795                	li	a5,5
20400f02:	f8f42223          	sw	a5,-124(s0)
20400f06:	f8442783          	lw	a5,-124(s0)
20400f0a:	f8f42023          	sw	a5,-128(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:640
	output2.data = buffer1;
20400f0e:	77fd                	lui	a5,0xfffff
20400f10:	f4878793          	addi	a5,a5,-184 # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
20400f14:	ff040713          	addi	a4,s0,-16
20400f18:	97ba                	add	a5,a5,a4
20400f1a:	f8f42823          	sw	a5,-112(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:641
	output2.bias = NULL;
20400f1e:	f8042a23          	sw	zero,-108(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:643

	output3.r = 120;
20400f22:	07800793          	li	a5,120
20400f26:	f6f42423          	sw	a5,-152(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:644
	output3.c = 1;
20400f2a:	4785                	li	a5,1
20400f2c:	f6f42623          	sw	a5,-148(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:645
	output3.data = buffer2;
20400f30:	77f9                	lui	a5,0xffffe
20400f32:	ce878793          	addi	a5,a5,-792 # ffffdce8 <metal_segment_heap_target_end+0x7fffa434>
20400f36:	ff040713          	addi	a4,s0,-16
20400f3a:	97ba                	add	a5,a5,a4
20400f3c:	f6f42c23          	sw	a5,-136(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:646
	output3.bias = NULL;
20400f40:	f6042e23          	sw	zero,-132(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:648

	output4.r = 84;
20400f44:	05400793          	li	a5,84
20400f48:	f4f42823          	sw	a5,-176(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:649
	output4.c = 1;
20400f4c:	4785                	li	a5,1
20400f4e:	f4f42a23          	sw	a5,-172(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:650
	output4.data = buffer1;
20400f52:	77fd                	lui	a5,0xfffff
20400f54:	f4878793          	addi	a5,a5,-184 # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
20400f58:	ff040713          	addi	a4,s0,-16
20400f5c:	97ba                	add	a5,a5,a4
20400f5e:	f6f42023          	sw	a5,-160(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:651
	output4.bias = NULL;
20400f62:	f6042223          	sw	zero,-156(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:653

	output5.r = 10;
20400f66:	47a9                	li	a5,10
20400f68:	f2f42c23          	sw	a5,-200(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:654
	output5.c = 1;
20400f6c:	4785                	li	a5,1
20400f6e:	f2f42e23          	sw	a5,-196(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:655
	output5.data = buffer2;
20400f72:	77f9                	lui	a5,0xffffe
20400f74:	ce878793          	addi	a5,a5,-792 # ffffdce8 <metal_segment_heap_target_end+0x7fffa434>
20400f78:	ff040713          	addi	a4,s0,-16
20400f7c:	97ba                	add	a5,a5,a4
20400f7e:	f4f42423          	sw	a5,-184(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:656
	output5.bias = NULL;
20400f82:	f4042623          	sw	zero,-180(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:658

	struct metal_gpio *gpio_device = metal_gpio_get_device(0);
20400f86:	4501                	li	a0,0
20400f88:	721060ef          	jal	ra,20407ea8 <metal_gpio_get_device>
20400f8c:	fca42823          	sw	a0,-48(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:659
	i2c_init(gpio_device);
20400f90:	fd042503          	lw	a0,-48(s0)
20400f94:	81dff0ef          	jal	ra,204007b0 <i2c_init>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:660
	if ((i2c_read_byte(gpio_device, OV2640_I2C_ADDR, OV2640_PIDH) == 0x26) &&
20400f98:	4629                	li	a2,10
20400f9a:	03000593          	li	a1,48
20400f9e:	fd042503          	lw	a0,-48(s0)
20400fa2:	39e5                	jal	20400c9a <i2c_read_byte>
20400fa4:	87aa                	mv	a5,a0
20400fa6:	873e                	mv	a4,a5
20400fa8:	02600793          	li	a5,38
20400fac:	02f71463          	bne	a4,a5,20400fd4 <main+0x1a2>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:661 (discriminator 1)
			(i2c_read_byte(gpio_device, OV2640_I2C_ADDR, OV2640_PIDL) == 0x42))
20400fb0:	462d                	li	a2,11
20400fb2:	03000593          	li	a1,48
20400fb6:	fd042503          	lw	a0,-48(s0)
20400fba:	31c5                	jal	20400c9a <i2c_read_byte>
20400fbc:	87aa                	mv	a5,a0
20400fbe:	873e                	mv	a4,a5
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:660 (discriminator 1)
	if ((i2c_read_byte(gpio_device, OV2640_I2C_ADDR, OV2640_PIDH) == 0x26) &&
20400fc0:	04200793          	li	a5,66
20400fc4:	00f71863          	bne	a4,a5,20400fd4 <main+0x1a2>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:663
	{
		printf("OV2640 OK!\n");
20400fc8:	204457b7          	lui	a5,0x20445
20400fcc:	49c78513          	addi	a0,a5,1180 # 2044549c <OV2640_QVGA+0x1c4>
20400fd0:	0d7000ef          	jal	ra,204018a6 <puts>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:666
	}

	i2c_write_byte(gpio_device, OV2640_I2C_ADDR, 0xff, 0x01);
20400fd4:	4685                	li	a3,1
20400fd6:	0ff00613          	li	a2,255
20400fda:	03000593          	li	a1,48
20400fde:	fd042503          	lw	a0,-48(s0)
20400fe2:	330d                	jal	20400d04 <i2c_write_byte>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:667
	i2c_write_byte(gpio_device, OV2640_I2C_ADDR, 0x12, 0x80);
20400fe4:	08000693          	li	a3,128
20400fe8:	4649                	li	a2,18
20400fea:	03000593          	li	a1,48
20400fee:	fd042503          	lw	a0,-48(s0)
20400ff2:	3b09                	jal	20400d04 <i2c_write_byte>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:668
	uint32_t config_row = sizeof(OV2640_QVGA) / sizeof(OV2640_QVGA[0]);
20400ff4:	0c200793          	li	a5,194
20400ff8:	fcf42623          	sw	a5,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:669
	for (uint32_t i = 0; i < config_row; i++)
20400ffc:	fe042623          	sw	zero,-20(s0)
20401000:	a099                	j	20401046 <main+0x214>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:671 (discriminator 3)
	{
		i2c_write_byte(gpio_device, OV2640_I2C_ADDR, OV2640_QVGA[i][0], OV2640_QVGA[i][1]);
20401002:	204457b7          	lui	a5,0x20445
20401006:	2d878713          	addi	a4,a5,728 # 204452d8 <OV2640_QVGA>
2040100a:	fec42783          	lw	a5,-20(s0)
2040100e:	0786                	slli	a5,a5,0x1
20401010:	97ba                	add	a5,a5,a4
20401012:	0007c603          	lbu	a2,0(a5)
20401016:	204457b7          	lui	a5,0x20445
2040101a:	2d878713          	addi	a4,a5,728 # 204452d8 <OV2640_QVGA>
2040101e:	fec42783          	lw	a5,-20(s0)
20401022:	0786                	slli	a5,a5,0x1
20401024:	97ba                	add	a5,a5,a4
20401026:	0017c783          	lbu	a5,1(a5)
2040102a:	86be                	mv	a3,a5
2040102c:	03000593          	li	a1,48
20401030:	fd042503          	lw	a0,-48(s0)
20401034:	39c1                	jal	20400d04 <i2c_write_byte>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:673 (discriminator 3)
		//printf("i2c read: [%x]=%x --- %x\n", OV2640_QVGA[i][0], OV2640_QVGA[i][1], i2c_read_byte(gpio_device, OV2640_I2C_ADDR, OV2640_QVGA[i][0]));
		basic_delay(LONG_DELAY);
20401036:	4565                	li	a0,25
20401038:	f48ff0ef          	jal	ra,20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:669 (discriminator 3)
	for (uint32_t i = 0; i < config_row; i++)
2040103c:	fec42783          	lw	a5,-20(s0)
20401040:	0785                	addi	a5,a5,1
20401042:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:669 (discriminator 1)
20401046:	fec42703          	lw	a4,-20(s0)
2040104a:	fcc42783          	lw	a5,-52(s0)
2040104e:	faf76ae3          	bltu	a4,a5,20401002 <main+0x1d0>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:676
	}

	struct metal_spi *spi = metal_spi_get_device(1);
20401052:	4505                	li	a0,1
20401054:	735060ef          	jal	ra,20407f88 <metal_spi_get_device>
20401058:	fca42423          	sw	a0,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:678

	if(spi == NULL) {
2040105c:	fc842783          	lw	a5,-56(s0)
20401060:	eb89                	bnez	a5,20401072 <main+0x240>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:679
		printf("Failed to get spi1 device \n");
20401062:	204457b7          	lui	a5,0x20445
20401066:	4a878513          	addi	a0,a5,1192 # 204454a8 <OV2640_QVGA+0x1d0>
2040106a:	03d000ef          	jal	ra,204018a6 <puts>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:680
		return 1;
2040106e:	4785                	li	a5,1
20401070:	ab4d                	j	20401622 <main+0x7f0>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:683
	}

	metal_spi_init(spi, 500000);
20401072:	0007a7b7          	lui	a5,0x7a
20401076:	12078593          	addi	a1,a5,288 # 7a120 <__stack_size+0x77920>
2040107a:	fc842503          	lw	a0,-56(s0)
2040107e:	66b060ef          	jal	ra,20407ee8 <metal_spi_init>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:686

	/* CPOL = 0, CPHA = 1, MSB-first, CS active low */
	struct metal_spi_config config = {
20401082:	77f9                	lui	a5,0xffffe
20401084:	ff040713          	addi	a4,s0,-16
20401088:	97ba                	add	a5,a5,a4
2040108a:	cc07a623          	sw	zero,-820(a5) # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
2040108e:	cc07a823          	sw	zero,-816(a5)
20401092:	cc07aa23          	sw	zero,-812(a5)
20401096:	cc07ac23          	sw	zero,-808(a5)
2040109a:	cc07ae23          	sw	zero,-804(a5)
2040109e:	ce07a023          	sw	zero,-800(a5)
204010a2:	ce07a223          	sw	zero,-796(a5)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:697
		.csid = 0,
//		.cmd_num = 1,
//		.addr_num = 1,
//		.dummy_num = 1,
	};
	char tx_buf[2] = {OV2640_SPI_VERSION, 0x00};
204010a6:	77f9                	lui	a5,0xffffe
204010a8:	ff040713          	addi	a4,s0,-16
204010ac:	97ba                	add	a5,a5,a4
204010ae:	04000713          	li	a4,64
204010b2:	cce78423          	sb	a4,-824(a5) # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
204010b6:	77f9                	lui	a5,0xffffe
204010b8:	ff040713          	addi	a4,s0,-16
204010bc:	97ba                	add	a5,a5,a4
204010be:	cc0784a3          	sb	zero,-823(a5) # ffffdcc9 <metal_segment_heap_target_end+0x7fffa415>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:699
	char rx_buf[2];
	metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
204010c2:	77f9                	lui	a5,0xffffe
204010c4:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
204010c8:	ff040713          	addi	a4,s0,-16
204010cc:	973e                	add	a4,a4,a5
204010ce:	77f9                	lui	a5,0xffffe
204010d0:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
204010d4:	ff040693          	addi	a3,s0,-16
204010d8:	96be                	add	a3,a3,a5
204010da:	77f9                	lui	a5,0xffffe
204010dc:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
204010e0:	ff040613          	addi	a2,s0,-16
204010e4:	97b2                	add	a5,a5,a2
204010e6:	4609                	li	a2,2
204010e8:	85be                	mv	a1,a5
204010ea:	fc842503          	lw	a0,-56(s0)
204010ee:	627060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:700
	if (rx_buf[1] == 0x73 )
204010f2:	77f9                	lui	a5,0xffffe
204010f4:	ff040713          	addi	a4,s0,-16
204010f8:	97ba                	add	a5,a5,a4
204010fa:	cc57c703          	lbu	a4,-827(a5) # ffffdcc5 <metal_segment_heap_target_end+0x7fffa411>
204010fe:	07300793          	li	a5,115
20401102:	02f71663          	bne	a4,a5,2040112e <main+0x2fc>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:701
	printf("Arducam OK! %x-%x\n", rx_buf[0], rx_buf[1]);
20401106:	77f9                	lui	a5,0xffffe
20401108:	ff040713          	addi	a4,s0,-16
2040110c:	97ba                	add	a5,a5,a4
2040110e:	cc47c783          	lbu	a5,-828(a5) # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
20401112:	873e                	mv	a4,a5
20401114:	77f9                	lui	a5,0xffffe
20401116:	ff040693          	addi	a3,s0,-16
2040111a:	97b6                	add	a5,a5,a3
2040111c:	cc57c783          	lbu	a5,-827(a5) # ffffdcc5 <metal_segment_heap_target_end+0x7fffa411>
20401120:	863e                	mv	a2,a5
20401122:	85ba                	mv	a1,a4
20401124:	204457b7          	lui	a5,0x20445
20401128:	4c478513          	addi	a0,a5,1220 # 204454c4 <OV2640_QVGA+0x1ec>
2040112c:	2b5d                	jal	204016e2 <iprintf>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:703

	tx_buf[0] = 0x80 | OV2640_SPI_MODE;
2040112e:	77f9                	lui	a5,0xffffe
20401130:	ff040713          	addi	a4,s0,-16
20401134:	97ba                	add	a5,a5,a4
20401136:	f8200713          	li	a4,-126
2040113a:	cce78423          	sb	a4,-824(a5) # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:704
	tx_buf[1] = 0x00;
2040113e:	77f9                	lui	a5,0xffffe
20401140:	ff040713          	addi	a4,s0,-16
20401144:	97ba                	add	a5,a5,a4
20401146:	cc0784a3          	sb	zero,-823(a5) # ffffdcc9 <metal_segment_heap_target_end+0x7fffa415>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:705
	metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
2040114a:	77f9                	lui	a5,0xffffe
2040114c:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
20401150:	ff040713          	addi	a4,s0,-16
20401154:	973e                	add	a4,a4,a5
20401156:	77f9                	lui	a5,0xffffe
20401158:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
2040115c:	ff040693          	addi	a3,s0,-16
20401160:	96be                	add	a3,a3,a5
20401162:	77f9                	lui	a5,0xffffe
20401164:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
20401168:	ff040613          	addi	a2,s0,-16
2040116c:	97b2                	add	a5,a5,a2
2040116e:	4609                	li	a2,2
20401170:	85be                	mv	a1,a5
20401172:	fc842503          	lw	a0,-56(s0)
20401176:	59f060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:707

	tx_buf[0] = 0x80 | OV2640_SPI_FRMCTRL;
2040117a:	77f9                	lui	a5,0xffffe
2040117c:	ff040713          	addi	a4,s0,-16
20401180:	97ba                	add	a5,a5,a4
20401182:	f8100713          	li	a4,-127
20401186:	cce78423          	sb	a4,-824(a5) # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:708
	tx_buf[1] = 0x00;
2040118a:	77f9                	lui	a5,0xffffe
2040118c:	ff040713          	addi	a4,s0,-16
20401190:	97ba                	add	a5,a5,a4
20401192:	cc0784a3          	sb	zero,-823(a5) # ffffdcc9 <metal_segment_heap_target_end+0x7fffa415>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:710
	// Capture 1 frame
	metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
20401196:	77f9                	lui	a5,0xffffe
20401198:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
2040119c:	ff040713          	addi	a4,s0,-16
204011a0:	973e                	add	a4,a4,a5
204011a2:	77f9                	lui	a5,0xffffe
204011a4:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
204011a8:	ff040693          	addi	a3,s0,-16
204011ac:	96be                	add	a3,a3,a5
204011ae:	77f9                	lui	a5,0xffffe
204011b0:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
204011b4:	ff040613          	addi	a2,s0,-16
204011b8:	97b2                	add	a5,a5,a2
204011ba:	4609                	li	a2,2
204011bc:	85be                	mv	a1,a5
204011be:	fc842503          	lw	a0,-56(s0)
204011c2:	553060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:715
	for(;;)
	{

	// Fifo clear
	tx_buf[0] = 0x80 | OV2640_SPI_FIFO;
204011c6:	77f9                	lui	a5,0xffffe
204011c8:	ff040713          	addi	a4,s0,-16
204011cc:	97ba                	add	a5,a5,a4
204011ce:	f8400713          	li	a4,-124
204011d2:	cce78423          	sb	a4,-824(a5) # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:716
	tx_buf[1] = 0x01;
204011d6:	77f9                	lui	a5,0xffffe
204011d8:	ff040713          	addi	a4,s0,-16
204011dc:	97ba                	add	a5,a5,a4
204011de:	4705                	li	a4,1
204011e0:	cce784a3          	sb	a4,-823(a5) # ffffdcc9 <metal_segment_heap_target_end+0x7fffa415>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:717
	metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
204011e4:	77f9                	lui	a5,0xffffe
204011e6:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
204011ea:	ff040713          	addi	a4,s0,-16
204011ee:	973e                	add	a4,a4,a5
204011f0:	77f9                	lui	a5,0xffffe
204011f2:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
204011f6:	ff040693          	addi	a3,s0,-16
204011fa:	96be                	add	a3,a3,a5
204011fc:	77f9                	lui	a5,0xffffe
204011fe:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
20401202:	ff040613          	addi	a2,s0,-16
20401206:	97b2                	add	a5,a5,a2
20401208:	4609                	li	a2,2
2040120a:	85be                	mv	a1,a5
2040120c:	fc842503          	lw	a0,-56(s0)
20401210:	505060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:720

	// Fifo clear
	tx_buf[0] = 0x80 | OV2640_SPI_FIFO;
20401214:	77f9                	lui	a5,0xffffe
20401216:	ff040713          	addi	a4,s0,-16
2040121a:	97ba                	add	a5,a5,a4
2040121c:	f8400713          	li	a4,-124
20401220:	cce78423          	sb	a4,-824(a5) # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:721
	tx_buf[1] = 0x01;
20401224:	77f9                	lui	a5,0xffffe
20401226:	ff040713          	addi	a4,s0,-16
2040122a:	97ba                	add	a5,a5,a4
2040122c:	4705                	li	a4,1
2040122e:	cce784a3          	sb	a4,-823(a5) # ffffdcc9 <metal_segment_heap_target_end+0x7fffa415>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:722
	metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
20401232:	77f9                	lui	a5,0xffffe
20401234:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
20401238:	ff040713          	addi	a4,s0,-16
2040123c:	973e                	add	a4,a4,a5
2040123e:	77f9                	lui	a5,0xffffe
20401240:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
20401244:	ff040693          	addi	a3,s0,-16
20401248:	96be                	add	a3,a3,a5
2040124a:	77f9                	lui	a5,0xffffe
2040124c:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
20401250:	ff040613          	addi	a2,s0,-16
20401254:	97b2                	add	a5,a5,a2
20401256:	4609                	li	a2,2
20401258:	85be                	mv	a1,a5
2040125a:	fc842503          	lw	a0,-56(s0)
2040125e:	4b7060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:725


	basic_delay(LONG_DELAY);
20401262:	4565                	li	a0,25
20401264:	d1cff0ef          	jal	ra,20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:728

	// Start fifo capture
	tx_buf[0] = 0x80 | OV2640_SPI_FIFO;
20401268:	77f9                	lui	a5,0xffffe
2040126a:	ff040713          	addi	a4,s0,-16
2040126e:	97ba                	add	a5,a5,a4
20401270:	f8400713          	li	a4,-124
20401274:	cce78423          	sb	a4,-824(a5) # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:729
	tx_buf[1] = 0x02;
20401278:	77f9                	lui	a5,0xffffe
2040127a:	ff040713          	addi	a4,s0,-16
2040127e:	97ba                	add	a5,a5,a4
20401280:	4709                	li	a4,2
20401282:	cce784a3          	sb	a4,-823(a5) # ffffdcc9 <metal_segment_heap_target_end+0x7fffa415>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:730
	metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
20401286:	77f9                	lui	a5,0xffffe
20401288:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
2040128c:	ff040713          	addi	a4,s0,-16
20401290:	973e                	add	a4,a4,a5
20401292:	77f9                	lui	a5,0xffffe
20401294:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
20401298:	ff040693          	addi	a3,s0,-16
2040129c:	96be                	add	a3,a3,a5
2040129e:	77f9                	lui	a5,0xffffe
204012a0:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
204012a4:	ff040613          	addi	a2,s0,-16
204012a8:	97b2                	add	a5,a5,a2
204012aa:	4609                	li	a2,2
204012ac:	85be                	mv	a1,a5
204012ae:	fc842503          	lw	a0,-56(s0)
204012b2:	463060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:732

	tx_buf[0] = 0x41;
204012b6:	77f9                	lui	a5,0xffffe
204012b8:	ff040713          	addi	a4,s0,-16
204012bc:	97ba                	add	a5,a5,a4
204012be:	04100713          	li	a4,65
204012c2:	cce78423          	sb	a4,-824(a5) # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:735
	while(1)
	{
		metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
204012c6:	77f9                	lui	a5,0xffffe
204012c8:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
204012cc:	ff040713          	addi	a4,s0,-16
204012d0:	973e                	add	a4,a4,a5
204012d2:	77f9                	lui	a5,0xffffe
204012d4:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
204012d8:	ff040693          	addi	a3,s0,-16
204012dc:	96be                	add	a3,a3,a5
204012de:	77f9                	lui	a5,0xffffe
204012e0:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
204012e4:	ff040613          	addi	a2,s0,-16
204012e8:	97b2                	add	a5,a5,a2
204012ea:	4609                	li	a2,2
204012ec:	85be                	mv	a1,a5
204012ee:	fc842503          	lw	a0,-56(s0)
204012f2:	423060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:736
		if (rx_buf[1] & 0x08)
204012f6:	77f9                	lui	a5,0xffffe
204012f8:	ff040713          	addi	a4,s0,-16
204012fc:	97ba                	add	a5,a5,a4
204012fe:	cc57c783          	lbu	a5,-827(a5) # ffffdcc5 <metal_segment_heap_target_end+0x7fffa411>
20401302:	8ba1                	andi	a5,a5,8
20401304:	c7ad                	beqz	a5,2040136e <main+0x53c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:738
		{
			printf("Capture done: 0x%x-0x%x\n", rx_buf[0], rx_buf[1]);
20401306:	77f9                	lui	a5,0xffffe
20401308:	ff040713          	addi	a4,s0,-16
2040130c:	97ba                	add	a5,a5,a4
2040130e:	cc47c783          	lbu	a5,-828(a5) # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
20401312:	873e                	mv	a4,a5
20401314:	77f9                	lui	a5,0xffffe
20401316:	ff040693          	addi	a3,s0,-16
2040131a:	97b6                	add	a5,a5,a3
2040131c:	cc57c783          	lbu	a5,-827(a5) # ffffdcc5 <metal_segment_heap_target_end+0x7fffa411>
20401320:	863e                	mv	a2,a5
20401322:	85ba                	mv	a1,a4
20401324:	204457b7          	lui	a5,0x20445
20401328:	4d878513          	addi	a0,a5,1240 # 204454d8 <OV2640_QVGA+0x200>
2040132c:	2e5d                	jal	204016e2 <iprintf>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:739
			break;
2040132e:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:744
		}
		basic_delay(SHORT_DELAY);
	}

	uint32_t fifo_size = read_fifo_len(spi, &config);
20401330:	77f9                	lui	a5,0xffffe
20401332:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
20401336:	ff040713          	addi	a4,s0,-16
2040133a:	97ba                	add	a5,a5,a4
2040133c:	85be                	mv	a1,a5
2040133e:	fc842503          	lw	a0,-56(s0)
20401342:	3c1d                	jal	20400d78 <read_fifo_len>
20401344:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:745
	printf("Fifo_len: %d\n", fifo_size);
20401348:	fe842583          	lw	a1,-24(s0)
2040134c:	204457b7          	lui	a5,0x20445
20401350:	4f478513          	addi	a0,a5,1268 # 204454f4 <OV2640_QVGA+0x21c>
20401354:	2679                	jal	204016e2 <iprintf>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:747
	
	tx_buf[0] = 0x3D;
20401356:	77f9                	lui	a5,0xffffe
20401358:	ff040713          	addi	a4,s0,-16
2040135c:	97ba                	add	a5,a5,a4
2040135e:	03d00713          	li	a4,61
20401362:	cce78423          	sb	a4,-824(a5) # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:752

	//metal_tty_putc_raw('a');
	//metal_tty_putc_raw('b');
	
	uint8_t offset = SKIP_BYTES;
20401366:	47a1                	li	a5,8
20401368:	fef403a3          	sb	a5,-25(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:753
	while(offset--)
2040136c:	a0a9                	j	204013b6 <main+0x584>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:741
		basic_delay(SHORT_DELAY);
2040136e:	4515                	li	a0,5
20401370:	c10ff0ef          	jal	ra,20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:735
		metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
20401374:	bf89                	j	204012c6 <main+0x494>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:755
	{
		fifo_size--;
20401376:	fe842783          	lw	a5,-24(s0)
2040137a:	17fd                	addi	a5,a5,-1
2040137c:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:756
		metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
20401380:	77f9                	lui	a5,0xffffe
20401382:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
20401386:	ff040713          	addi	a4,s0,-16
2040138a:	973e                	add	a4,a4,a5
2040138c:	77f9                	lui	a5,0xffffe
2040138e:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
20401392:	ff040693          	addi	a3,s0,-16
20401396:	96be                	add	a3,a3,a5
20401398:	77f9                	lui	a5,0xffffe
2040139a:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
2040139e:	ff040613          	addi	a2,s0,-16
204013a2:	97b2                	add	a5,a5,a2
204013a4:	4609                	li	a2,2
204013a6:	85be                	mv	a1,a5
204013a8:	fc842503          	lw	a0,-56(s0)
204013ac:	369060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:757
		basic_delay(LONG_DELAY);
204013b0:	4565                	li	a0,25
204013b2:	bceff0ef          	jal	ra,20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:753
	while(offset--)
204013b6:	fe744783          	lbu	a5,-25(s0)
204013ba:	fff78713          	addi	a4,a5,-1
204013be:	fee403a3          	sb	a4,-25(s0)
204013c2:	fbd5                	bnez	a5,20401376 <main+0x544>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:760
	}

	uint32_t buffer1_inx = 0; 
204013c4:	fe042023          	sw	zero,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:761
	for (uint8_t r = 0; r < 64; r++)
204013c8:	fc040fa3          	sb	zero,-33(s0)
204013cc:	a235                	j	204014f8 <main+0x6c6>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:763
	{
		for (uint8_t c = 0; c < 64; c++)
204013ce:	fc040f23          	sb	zero,-34(s0)
204013d2:	aa01                	j	204014e2 <main+0x6b0>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:765
		{
			metal_spi_transfer(spi, &config, 2, tx_buf, rx_buf);
204013d4:	77f9                	lui	a5,0xffffe
204013d6:	cc478793          	addi	a5,a5,-828 # ffffdcc4 <metal_segment_heap_target_end+0x7fffa410>
204013da:	ff040713          	addi	a4,s0,-16
204013de:	973e                	add	a4,a4,a5
204013e0:	77f9                	lui	a5,0xffffe
204013e2:	cc878793          	addi	a5,a5,-824 # ffffdcc8 <metal_segment_heap_target_end+0x7fffa414>
204013e6:	ff040693          	addi	a3,s0,-16
204013ea:	96be                	add	a3,a3,a5
204013ec:	77f9                	lui	a5,0xffffe
204013ee:	ccc78793          	addi	a5,a5,-820 # ffffdccc <metal_segment_heap_target_end+0x7fffa418>
204013f2:	ff040613          	addi	a2,s0,-16
204013f6:	97b2                	add	a5,a5,a2
204013f8:	4609                	li	a2,2
204013fa:	85be                	mv	a1,a5
204013fc:	fc842503          	lw	a0,-56(s0)
20401400:	315060ef          	jal	ra,20407f14 <metal_spi_transfer>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:766
			basic_delay(LONG_DELAY);
20401404:	4565                	li	a0,25
20401406:	b7aff0ef          	jal	ra,20400780 <basic_delay>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:768
			//metal_tty_putc_raw(rx_buf[1]);
			if (c%2==1 && r%2==1){	
2040140a:	fde44783          	lbu	a5,-34(s0)
2040140e:	8b85                	andi	a5,a5,1
20401410:	0ff7f793          	andi	a5,a5,255
20401414:	cfcd                	beqz	a5,204014ce <main+0x69c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:768 (discriminator 1)
20401416:	fdf44783          	lbu	a5,-33(s0)
2040141a:	8b85                	andi	a5,a5,1
2040141c:	0ff7f793          	andi	a5,a5,255
20401420:	c7dd                	beqz	a5,204014ce <main+0x69c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:769
				buffer1[buffer1_inx] = rx_buf[1];
20401422:	77f9                	lui	a5,0xffffe
20401424:	ff040713          	addi	a4,s0,-16
20401428:	97ba                	add	a5,a5,a4
2040142a:	cc57c783          	lbu	a5,-827(a5) # ffffdcc5 <metal_segment_heap_target_end+0x7fffa411>
2040142e:	853e                	mv	a0,a5
20401430:	623010ef          	jal	ra,20403252 <__floatunsisf>
20401434:	86aa                	mv	a3,a0
20401436:	77fd                	lui	a5,0xfffff
20401438:	ff040713          	addi	a4,s0,-16
2040143c:	973e                	add	a4,a4,a5
2040143e:	fe042783          	lw	a5,-32(s0)
20401442:	078a                	slli	a5,a5,0x2
20401444:	97ba                	add	a5,a5,a4
20401446:	f4d7a423          	sw	a3,-184(a5) # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:770
				if (buffer1[buffer1_inx] < 100.0)
2040144a:	77fd                	lui	a5,0xfffff
2040144c:	ff040713          	addi	a4,s0,-16
20401450:	973e                	add	a4,a4,a5
20401452:	fe042783          	lw	a5,-32(s0)
20401456:	078a                	slli	a5,a5,0x2
20401458:	97ba                	add	a5,a5,a4
2040145a:	f487a703          	lw	a4,-184(a5) # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
2040145e:	204457b7          	lui	a5,0x20445
20401462:	5347a583          	lw	a1,1332(a5) # 20445534 <OV2640_QVGA+0x25c>
20401466:	853a                	mv	a0,a4
20401468:	2f7010ef          	jal	ra,20402f5e <__lesf2>
2040146c:	87aa                	mv	a5,a0
2040146e:	0007de63          	bgez	a5,2040148a <main+0x658>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:772
				{
					buffer1[buffer1_inx] = 0.0;
20401472:	77fd                	lui	a5,0xfffff
20401474:	ff040713          	addi	a4,s0,-16
20401478:	973e                	add	a4,a4,a5
2040147a:	fe042783          	lw	a5,-32(s0)
2040147e:	078a                	slli	a5,a5,0x2
20401480:	97ba                	add	a5,a5,a4
20401482:	00000713          	li	a4,0
20401486:	f4e7a423          	sw	a4,-184(a5) # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:774
				}
				buffer1[buffer1_inx++] = buffer1[buffer1_inx]/256.0;
2040148a:	77fd                	lui	a5,0xfffff
2040148c:	ff040713          	addi	a4,s0,-16
20401490:	973e                	add	a4,a4,a5
20401492:	fe042783          	lw	a5,-32(s0)
20401496:	078a                	slli	a5,a5,0x2
20401498:	97ba                	add	a5,a5,a4
2040149a:	f487a703          	lw	a4,-184(a5) # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
2040149e:	fe042483          	lw	s1,-32(s0)
204014a2:	00148793          	addi	a5,s1,1
204014a6:	fef42023          	sw	a5,-32(s0)
204014aa:	204457b7          	lui	a5,0x20445
204014ae:	5387a583          	lw	a1,1336(a5) # 20445538 <OV2640_QVGA+0x260>
204014b2:	853a                	mv	a0,a4
204014b4:	7e8010ef          	jal	ra,20402c9c <__divsf3>
204014b8:	87aa                	mv	a5,a0
204014ba:	86be                	mv	a3,a5
204014bc:	77fd                	lui	a5,0xfffff
204014be:	ff040713          	addi	a4,s0,-16
204014c2:	973e                	add	a4,a4,a5
204014c4:	00249793          	slli	a5,s1,0x2
204014c8:	97ba                	add	a5,a5,a4
204014ca:	f4d7a423          	sw	a3,-184(a5) # ffffef48 <metal_segment_heap_target_end+0x7fffb694>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:777 (discriminator 2)
				
			}
			fifo_size--;
204014ce:	fe842783          	lw	a5,-24(s0)
204014d2:	17fd                	addi	a5,a5,-1
204014d4:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:763 (discriminator 2)
		for (uint8_t c = 0; c < 64; c++)
204014d8:	fde44783          	lbu	a5,-34(s0)
204014dc:	0785                	addi	a5,a5,1
204014de:	fcf40f23          	sb	a5,-34(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:763 (discriminator 1)
204014e2:	fde44703          	lbu	a4,-34(s0)
204014e6:	03f00793          	li	a5,63
204014ea:	eee7f5e3          	bgeu	a5,a4,204013d4 <main+0x5a2>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:761 (discriminator 2)
	for (uint8_t r = 0; r < 64; r++)
204014ee:	fdf44783          	lbu	a5,-33(s0)
204014f2:	0785                	addi	a5,a5,1
204014f4:	fcf40fa3          	sb	a5,-33(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:761 (discriminator 1)
204014f8:	fdf44703          	lbu	a4,-33(s0)
204014fc:	03f00793          	li	a5,63
20401500:	ece7f7e3          	bgeu	a5,a4,204013ce <main+0x59c>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:781
		}
	}

	if(fifo_size == (8 - SKIP_BYTES))
20401504:	fe842783          	lw	a5,-24(s0)
20401508:	e791                	bnez	a5,20401514 <main+0x6e2>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:783
	{
		printf("Transfer done!\n");
2040150a:	204457b7          	lui	a5,0x20445
2040150e:	50478513          	addi	a0,a5,1284 # 20445504 <OV2640_QVGA+0x22c>
20401512:	2e51                	jal	204018a6 <puts>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:788
	}
		// Test input
		// memcpy(buffer1, test, sizeof(test));

		print_twoD(&input, 0, 256.0);
20401514:	204457b7          	lui	a5,0x20445
20401518:	5387a703          	lw	a4,1336(a5) # 20445538 <OV2640_QVGA+0x260>
2040151c:	fb040793          	addi	a5,s0,-80
20401520:	863a                	mv	a2,a4
20401522:	4581                	li	a1,0
20401524:	853e                	mv	a0,a5
20401526:	cdbfe0ef          	jal	ra,20400200 <print_twoD>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:790

		input.channel = 1; /* Single channel input 32x32 matrix */
2040152a:	4785                	li	a5,1
2040152c:	faf42e23          	sw	a5,-68(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:791
		output.channel = w_0_weight_2d.channel; /* 6 input channels */
20401530:	4799                	li	a5,6
20401532:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:792
		conv2D(&input, &w_0_weight_2d, &output, &reLU, 2, 2, 2);
20401536:	f9840613          	addi	a2,s0,-104
2040153a:	fb040513          	addi	a0,s0,-80
2040153e:	4809                	li	a6,2
20401540:	4789                	li	a5,2
20401542:	4709                	li	a4,2
20401544:	204006b7          	lui	a3,0x20400
20401548:	42268693          	addi	a3,a3,1058 # 20400422 <reLU>
2040154c:	204095b7          	lui	a1,0x20409
20401550:	0a858593          	addi	a1,a1,168 # 204090a8 <w_0_weight_2d>
20401554:	f01fe0ef          	jal	ra,20400454 <conv2D>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:795
		// print_twoD(&output, 1);

		output2.channel = w_3_weight_2d.channel; /* 6 input channels are maped to 16 channels */
20401558:	47c1                	li	a5,16
2040155a:	f8f42623          	sw	a5,-116(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:796
		conv2D(&output, &w_3_weight_2d, &output2, &reLU, 2, 2, 2);
2040155e:	f8040613          	addi	a2,s0,-128
20401562:	f9840513          	addi	a0,s0,-104
20401566:	4809                	li	a6,2
20401568:	4789                	li	a5,2
2040156a:	4709                	li	a4,2
2040156c:	204006b7          	lui	a3,0x20400
20401570:	42268693          	addi	a3,a3,1058 # 20400422 <reLU>
20401574:	2040b5b7          	lui	a1,0x2040b
20401578:	68058593          	addi	a1,a1,1664 # 2040b680 <w_3_weight_2d>
2040157c:	ed9fe0ef          	jal	ra,20400454 <conv2D>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:799
		// print_twoD(&output2, 0);

		output3.channel = w_7_weight_2d.channel; /* Flat single channel output for fully connected layer */
20401580:	4785                	li	a5,1
20401582:	f6f42a23          	sw	a5,-140(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:800
		dot(&output2, &w_7_weight_2d, &output3, &reLU);
20401586:	f6840613          	addi	a2,s0,-152
2040158a:	f8040713          	addi	a4,s0,-128
2040158e:	204007b7          	lui	a5,0x20400
20401592:	42278693          	addi	a3,a5,1058 # 20400422 <reLU>
20401596:	2043a7b7          	lui	a5,0x2043a
2040159a:	67878593          	addi	a1,a5,1656 # 2043a678 <w_7_weight_2d>
2040159e:	853a                	mv	a0,a4
204015a0:	d3ffe0ef          	jal	ra,204002de <dot>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:803
		//print_twoD(&output3, 0);

		output4.channel = w_9_weight_2d.channel;
204015a4:	4785                	li	a5,1
204015a6:	f4f42e23          	sw	a5,-164(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:804
		dot(&output3, &w_9_weight_2d, &output4, &reLU);
204015aa:	f5040613          	addi	a2,s0,-176
204015ae:	f6840713          	addi	a4,s0,-152
204015b2:	204007b7          	lui	a5,0x20400
204015b6:	42278693          	addi	a3,a5,1058 # 20400422 <reLU>
204015ba:	204447b7          	lui	a5,0x20444
204015be:	56078593          	addi	a1,a5,1376 # 20444560 <w_9_weight_2d>
204015c2:	853a                	mv	a0,a4
204015c4:	d1bfe0ef          	jal	ra,204002de <dot>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:807
		//print_twoD(&output4, 0);

		output5.channel = w_11_weight_2d.channel;
204015c8:	4785                	li	a5,1
204015ca:	f4f42223          	sw	a5,-188(s0)
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:808
		dot(&output4, &w_11_weight_2d, &output5, NULL);
204015ce:	f3840793          	addi	a5,s0,-200
204015d2:	f5040713          	addi	a4,s0,-176
204015d6:	4681                	li	a3,0
204015d8:	863e                	mv	a2,a5
204015da:	204457b7          	lui	a5,0x20445
204015de:	2c078593          	addi	a1,a5,704 # 204452c0 <w_11_weight_2d>
204015e2:	853a                	mv	a0,a4
204015e4:	cfbfe0ef          	jal	ra,204002de <dot>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:810

		printf("CLASS SCORES: ");
204015e8:	204457b7          	lui	a5,0x20445
204015ec:	51478513          	addi	a0,a5,1300 # 20445514 <OV2640_QVGA+0x23c>
204015f0:	28cd                	jal	204016e2 <iprintf>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:811
		print_twoD(&output5, 0, 100.0);
204015f2:	204457b7          	lui	a5,0x20445
204015f6:	5347a703          	lw	a4,1332(a5) # 20445534 <OV2640_QVGA+0x25c>
204015fa:	f3840793          	addi	a5,s0,-200
204015fe:	863a                	mv	a2,a4
20401600:	4581                	li	a1,0
20401602:	853e                	mv	a0,a5
20401604:	bfdfe0ef          	jal	ra,20400200 <print_twoD>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:813
	
		printf("PREDICTION: %d\n", get_class(&output5));
20401608:	f3840793          	addi	a5,s0,-200
2040160c:	853e                	mv	a0,a5
2040160e:	900ff0ef          	jal	ra,2040070e <get_class>
20401612:	87aa                	mv	a5,a0
20401614:	85be                	mv	a1,a5
20401616:	204457b7          	lui	a5,0x20445
2040161a:	52478513          	addi	a0,a5,1316 # 20445524 <OV2640_QVGA+0x24c>
2040161e:	20d1                	jal	204016e2 <iprintf>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:712
	{
20401620:	b65d                	j	204011c6 <main+0x394>
/home/hunlu/workspace/freedom-e-sdk/software/neural/main.c:815 (discriminator 1)
	}
}
20401622:	853e                	mv	a0,a5
20401624:	6309                	lui	t1,0x2
20401626:	911a                	add	sp,sp,t1
20401628:	34c12083          	lw	ra,844(sp)
2040162c:	34812403          	lw	s0,840(sp)
20401630:	34412483          	lw	s1,836(sp)
20401634:	35010113          	addi	sp,sp,848
20401638:	8082                	ret

2040163a <memset>:
memset():
2040163a:	433d                	li	t1,15
2040163c:	872a                	mv	a4,a0
2040163e:	02c37363          	bgeu	t1,a2,20401664 <memset+0x2a>
20401642:	00f77793          	andi	a5,a4,15
20401646:	efbd                	bnez	a5,204016c4 <memset+0x8a>
20401648:	e5ad                	bnez	a1,204016b2 <memset+0x78>
2040164a:	ff067693          	andi	a3,a2,-16
2040164e:	8a3d                	andi	a2,a2,15
20401650:	96ba                	add	a3,a3,a4
20401652:	c30c                	sw	a1,0(a4)
20401654:	c34c                	sw	a1,4(a4)
20401656:	c70c                	sw	a1,8(a4)
20401658:	c74c                	sw	a1,12(a4)
2040165a:	0741                	addi	a4,a4,16
2040165c:	fed76be3          	bltu	a4,a3,20401652 <memset+0x18>
20401660:	e211                	bnez	a2,20401664 <memset+0x2a>
20401662:	8082                	ret
20401664:	40c306b3          	sub	a3,t1,a2
20401668:	068a                	slli	a3,a3,0x2
2040166a:	00000297          	auipc	t0,0x0
2040166e:	9696                	add	a3,a3,t0
20401670:	00a68067          	jr	10(a3)
20401674:	00b70723          	sb	a1,14(a4) # 100e <__heap_size+0x80e>
20401678:	00b706a3          	sb	a1,13(a4)
2040167c:	00b70623          	sb	a1,12(a4)
20401680:	00b705a3          	sb	a1,11(a4)
20401684:	00b70523          	sb	a1,10(a4)
20401688:	00b704a3          	sb	a1,9(a4)
2040168c:	00b70423          	sb	a1,8(a4)
20401690:	00b703a3          	sb	a1,7(a4)
20401694:	00b70323          	sb	a1,6(a4)
20401698:	00b702a3          	sb	a1,5(a4)
2040169c:	00b70223          	sb	a1,4(a4)
204016a0:	00b701a3          	sb	a1,3(a4)
204016a4:	00b70123          	sb	a1,2(a4)
204016a8:	00b700a3          	sb	a1,1(a4)
204016ac:	00b70023          	sb	a1,0(a4)
204016b0:	8082                	ret
204016b2:	0ff5f593          	andi	a1,a1,255
204016b6:	00859693          	slli	a3,a1,0x8
204016ba:	8dd5                	or	a1,a1,a3
204016bc:	01059693          	slli	a3,a1,0x10
204016c0:	8dd5                	or	a1,a1,a3
204016c2:	b761                	j	2040164a <memset+0x10>
204016c4:	00279693          	slli	a3,a5,0x2
204016c8:	00000297          	auipc	t0,0x0
204016cc:	9696                	add	a3,a3,t0
204016ce:	8286                	mv	t0,ra
204016d0:	fa8680e7          	jalr	-88(a3)
204016d4:	8096                	mv	ra,t0
204016d6:	17c1                	addi	a5,a5,-16
204016d8:	8f1d                	sub	a4,a4,a5
204016da:	963e                	add	a2,a2,a5
204016dc:	f8c374e3          	bgeu	t1,a2,20401664 <memset+0x2a>
204016e0:	b7a5                	j	20401648 <memset+0xe>

204016e2 <iprintf>:
printf():
204016e2:	7139                	addi	sp,sp,-64
204016e4:	da3e                	sw	a5,52(sp)
204016e6:	d22e                	sw	a1,36(sp)
204016e8:	d432                	sw	a2,40(sp)
204016ea:	d636                	sw	a3,44(sp)
204016ec:	d83a                	sw	a4,48(sp)
204016ee:	dc42                	sw	a6,56(sp)
204016f0:	de46                	sw	a7,60(sp)
204016f2:	81018793          	addi	a5,gp,-2032 # 800007d8 <_impure_ptr>
204016f6:	cc22                	sw	s0,24(sp)
204016f8:	4380                	lw	s0,0(a5)
204016fa:	ca26                	sw	s1,20(sp)
204016fc:	ce06                	sw	ra,28(sp)
204016fe:	84aa                	mv	s1,a0
20401700:	c409                	beqz	s0,2040170a <iprintf+0x28>
20401702:	4c1c                	lw	a5,24(s0)
20401704:	e399                	bnez	a5,2040170a <iprintf+0x28>
20401706:	8522                	mv	a0,s0
20401708:	2bf1                	jal	20401ce4 <__sinit>
2040170a:	440c                	lw	a1,8(s0)
2040170c:	1054                	addi	a3,sp,36
2040170e:	8626                	mv	a2,s1
20401710:	8522                	mv	a0,s0
20401712:	c636                	sw	a3,12(sp)
20401714:	229000ef          	jal	ra,2040213c <_vfiprintf_r>
20401718:	40f2                	lw	ra,28(sp)
2040171a:	4462                	lw	s0,24(sp)
2040171c:	44d2                	lw	s1,20(sp)
2040171e:	6121                	addi	sp,sp,64
20401720:	8082                	ret

20401722 <putchar>:
putchar():
20401722:	1101                	addi	sp,sp,-32
20401724:	81018793          	addi	a5,gp,-2032 # 800007d8 <_impure_ptr>
20401728:	cc22                	sw	s0,24(sp)
2040172a:	4380                	lw	s0,0(a5)
2040172c:	ce06                	sw	ra,28(sp)
2040172e:	85aa                	mv	a1,a0
20401730:	c419                	beqz	s0,2040173e <putchar+0x1c>
20401732:	4c1c                	lw	a5,24(s0)
20401734:	e789                	bnez	a5,2040173e <putchar+0x1c>
20401736:	c62a                	sw	a0,12(sp)
20401738:	8522                	mv	a0,s0
2040173a:	236d                	jal	20401ce4 <__sinit>
2040173c:	45b2                	lw	a1,12(sp)
2040173e:	4410                	lw	a2,8(s0)
20401740:	8522                	mv	a0,s0
20401742:	4462                	lw	s0,24(sp)
20401744:	40f2                	lw	ra,28(sp)
20401746:	6105                	addi	sp,sp,32
20401748:	a009                	j	2040174a <_putc_r>

2040174a <_putc_r>:
_putc_r():
2040174a:	1101                	addi	sp,sp,-32
2040174c:	cc22                	sw	s0,24(sp)
2040174e:	ce06                	sw	ra,28(sp)
20401750:	842a                	mv	s0,a0
20401752:	c901                	beqz	a0,20401762 <_putc_r+0x18>
20401754:	4d1c                	lw	a5,24(a0)
20401756:	e791                	bnez	a5,20401762 <_putc_r+0x18>
20401758:	c632                	sw	a2,12(sp)
2040175a:	c42e                	sw	a1,8(sp)
2040175c:	2361                	jal	20401ce4 <__sinit>
2040175e:	4632                	lw	a2,12(sp)
20401760:	45a2                	lw	a1,8(sp)
20401762:	00044797          	auipc	a5,0x44
20401766:	dfa78793          	addi	a5,a5,-518 # 2044555c <__sf_fake_stdin>
2040176a:	02f61563          	bne	a2,a5,20401794 <_putc_r+0x4a>
2040176e:	4050                	lw	a2,4(s0)
20401770:	461c                	lw	a5,8(a2)
20401772:	17fd                	addi	a5,a5,-1
20401774:	c61c                	sw	a5,8(a2)
20401776:	0207df63          	bgez	a5,204017b4 <_putc_r+0x6a>
2040177a:	4e18                	lw	a4,24(a2)
2040177c:	00e7c763          	blt	a5,a4,2040178a <_putc_r+0x40>
20401780:	0ff5f793          	andi	a5,a1,255
20401784:	4729                	li	a4,10
20401786:	02e79763          	bne	a5,a4,204017b4 <_putc_r+0x6a>
2040178a:	8522                	mv	a0,s0
2040178c:	4462                	lw	s0,24(sp)
2040178e:	40f2                	lw	ra,28(sp)
20401790:	6105                	addi	sp,sp,32
20401792:	aa39                	j	204018b0 <__swbuf_r>
20401794:	00044797          	auipc	a5,0x44
20401798:	de878793          	addi	a5,a5,-536 # 2044557c <__sf_fake_stdout>
2040179c:	00f61463          	bne	a2,a5,204017a4 <_putc_r+0x5a>
204017a0:	4410                	lw	a2,8(s0)
204017a2:	b7f9                	j	20401770 <_putc_r+0x26>
204017a4:	00044797          	auipc	a5,0x44
204017a8:	d9878793          	addi	a5,a5,-616 # 2044553c <__sf_fake_stderr>
204017ac:	fcf612e3          	bne	a2,a5,20401770 <_putc_r+0x26>
204017b0:	4450                	lw	a2,12(s0)
204017b2:	bf7d                	j	20401770 <_putc_r+0x26>
204017b4:	421c                	lw	a5,0(a2)
204017b6:	0ff5f513          	andi	a0,a1,255
204017ba:	00178713          	addi	a4,a5,1
204017be:	c218                	sw	a4,0(a2)
204017c0:	00b78023          	sb	a1,0(a5)
204017c4:	40f2                	lw	ra,28(sp)
204017c6:	4462                	lw	s0,24(sp)
204017c8:	6105                	addi	sp,sp,32
204017ca:	8082                	ret

204017cc <_puts_r>:
_puts_r():
204017cc:	1101                	addi	sp,sp,-32
204017ce:	ca26                	sw	s1,20(sp)
204017d0:	c84a                	sw	s2,16(sp)
204017d2:	ce06                	sw	ra,28(sp)
204017d4:	cc22                	sw	s0,24(sp)
204017d6:	c64e                	sw	s3,12(sp)
204017d8:	c452                	sw	s4,8(sp)
204017da:	84aa                	mv	s1,a0
204017dc:	892e                	mv	s2,a1
204017de:	c501                	beqz	a0,204017e6 <_puts_r+0x1a>
204017e0:	4d1c                	lw	a5,24(a0)
204017e2:	e391                	bnez	a5,204017e6 <_puts_r+0x1a>
204017e4:	2301                	jal	20401ce4 <__sinit>
204017e6:	4c9c                	lw	a5,24(s1)
204017e8:	4480                	lw	s0,8(s1)
204017ea:	e399                	bnez	a5,204017f0 <_puts_r+0x24>
204017ec:	8526                	mv	a0,s1
204017ee:	29dd                	jal	20401ce4 <__sinit>
204017f0:	00044797          	auipc	a5,0x44
204017f4:	d6c78793          	addi	a5,a5,-660 # 2044555c <__sf_fake_stdin>
204017f8:	02f41c63          	bne	s0,a5,20401830 <_puts_r+0x64>
204017fc:	40c0                	lw	s0,4(s1)
204017fe:	00c45783          	lhu	a5,12(s0)
20401802:	8ba1                	andi	a5,a5,8
20401804:	c7b1                	beqz	a5,20401850 <_puts_r+0x84>
20401806:	481c                	lw	a5,16(s0)
20401808:	c7a1                	beqz	a5,20401850 <_puts_r+0x84>
2040180a:	59fd                	li	s3,-1
2040180c:	4a29                	li	s4,10
2040180e:	441c                	lw	a5,8(s0)
20401810:	00094583          	lbu	a1,0(s2)
20401814:	17fd                	addi	a5,a5,-1
20401816:	e9b1                	bnez	a1,2040186a <_puts_r+0x9e>
20401818:	c41c                	sw	a5,8(s0)
2040181a:	0607de63          	bgez	a5,20401896 <_puts_r+0xca>
2040181e:	8622                	mv	a2,s0
20401820:	45a9                	li	a1,10
20401822:	8526                	mv	a0,s1
20401824:	2071                	jal	204018b0 <__swbuf_r>
20401826:	57fd                	li	a5,-1
20401828:	02f50863          	beq	a0,a5,20401858 <_puts_r+0x8c>
2040182c:	4529                	li	a0,10
2040182e:	a035                	j	2040185a <_puts_r+0x8e>
20401830:	00044797          	auipc	a5,0x44
20401834:	d4c78793          	addi	a5,a5,-692 # 2044557c <__sf_fake_stdout>
20401838:	00f41463          	bne	s0,a5,20401840 <_puts_r+0x74>
2040183c:	4480                	lw	s0,8(s1)
2040183e:	b7c1                	j	204017fe <_puts_r+0x32>
20401840:	00044797          	auipc	a5,0x44
20401844:	cfc78793          	addi	a5,a5,-772 # 2044553c <__sf_fake_stderr>
20401848:	faf41be3          	bne	s0,a5,204017fe <_puts_r+0x32>
2040184c:	44c0                	lw	s0,12(s1)
2040184e:	bf45                	j	204017fe <_puts_r+0x32>
20401850:	85a2                	mv	a1,s0
20401852:	8526                	mv	a0,s1
20401854:	2a31                	jal	20401970 <__swsetup_r>
20401856:	d955                	beqz	a0,2040180a <_puts_r+0x3e>
20401858:	557d                	li	a0,-1
2040185a:	40f2                	lw	ra,28(sp)
2040185c:	4462                	lw	s0,24(sp)
2040185e:	44d2                	lw	s1,20(sp)
20401860:	4942                	lw	s2,16(sp)
20401862:	49b2                	lw	s3,12(sp)
20401864:	4a22                	lw	s4,8(sp)
20401866:	6105                	addi	sp,sp,32
20401868:	8082                	ret
2040186a:	c41c                	sw	a5,8(s0)
2040186c:	0905                	addi	s2,s2,1
2040186e:	0007d763          	bgez	a5,2040187c <_puts_r+0xb0>
20401872:	4c18                	lw	a4,24(s0)
20401874:	00e7cb63          	blt	a5,a4,2040188a <_puts_r+0xbe>
20401878:	01458963          	beq	a1,s4,2040188a <_puts_r+0xbe>
2040187c:	401c                	lw	a5,0(s0)
2040187e:	00178713          	addi	a4,a5,1
20401882:	c018                	sw	a4,0(s0)
20401884:	00b78023          	sb	a1,0(a5)
20401888:	b759                	j	2040180e <_puts_r+0x42>
2040188a:	8622                	mv	a2,s0
2040188c:	8526                	mv	a0,s1
2040188e:	200d                	jal	204018b0 <__swbuf_r>
20401890:	f7351fe3          	bne	a0,s3,2040180e <_puts_r+0x42>
20401894:	b7d1                	j	20401858 <_puts_r+0x8c>
20401896:	401c                	lw	a5,0(s0)
20401898:	00178713          	addi	a4,a5,1
2040189c:	c018                	sw	a4,0(s0)
2040189e:	4729                	li	a4,10
204018a0:	00e78023          	sb	a4,0(a5)
204018a4:	b761                	j	2040182c <_puts_r+0x60>

204018a6 <puts>:
puts():
204018a6:	81018793          	addi	a5,gp,-2032 # 800007d8 <_impure_ptr>
204018aa:	85aa                	mv	a1,a0
204018ac:	4388                	lw	a0,0(a5)
204018ae:	bf39                	j	204017cc <_puts_r>

204018b0 <__swbuf_r>:
__swbuf_r():
204018b0:	1101                	addi	sp,sp,-32
204018b2:	cc22                	sw	s0,24(sp)
204018b4:	ca26                	sw	s1,20(sp)
204018b6:	c84a                	sw	s2,16(sp)
204018b8:	ce06                	sw	ra,28(sp)
204018ba:	c64e                	sw	s3,12(sp)
204018bc:	84aa                	mv	s1,a0
204018be:	892e                	mv	s2,a1
204018c0:	8432                	mv	s0,a2
204018c2:	c501                	beqz	a0,204018ca <__swbuf_r+0x1a>
204018c4:	4d1c                	lw	a5,24(a0)
204018c6:	e391                	bnez	a5,204018ca <__swbuf_r+0x1a>
204018c8:	2931                	jal	20401ce4 <__sinit>
204018ca:	00044797          	auipc	a5,0x44
204018ce:	c9278793          	addi	a5,a5,-878 # 2044555c <__sf_fake_stdin>
204018d2:	06f41963          	bne	s0,a5,20401944 <__swbuf_r+0x94>
204018d6:	40c0                	lw	s0,4(s1)
204018d8:	4c1c                	lw	a5,24(s0)
204018da:	c41c                	sw	a5,8(s0)
204018dc:	00c45783          	lhu	a5,12(s0)
204018e0:	8ba1                	andi	a5,a5,8
204018e2:	c3c9                	beqz	a5,20401964 <__swbuf_r+0xb4>
204018e4:	481c                	lw	a5,16(s0)
204018e6:	cfbd                	beqz	a5,20401964 <__swbuf_r+0xb4>
204018e8:	481c                	lw	a5,16(s0)
204018ea:	4008                	lw	a0,0(s0)
204018ec:	0ff97993          	andi	s3,s2,255
204018f0:	0ff97913          	andi	s2,s2,255
204018f4:	8d1d                	sub	a0,a0,a5
204018f6:	485c                	lw	a5,20(s0)
204018f8:	00f54663          	blt	a0,a5,20401904 <__swbuf_r+0x54>
204018fc:	85a2                	mv	a1,s0
204018fe:	8526                	mv	a0,s1
20401900:	24d9                	jal	20401bc6 <_fflush_r>
20401902:	e52d                	bnez	a0,2040196c <__swbuf_r+0xbc>
20401904:	441c                	lw	a5,8(s0)
20401906:	0505                	addi	a0,a0,1
20401908:	17fd                	addi	a5,a5,-1
2040190a:	c41c                	sw	a5,8(s0)
2040190c:	401c                	lw	a5,0(s0)
2040190e:	00178713          	addi	a4,a5,1
20401912:	c018                	sw	a4,0(s0)
20401914:	01378023          	sb	s3,0(a5)
20401918:	485c                	lw	a5,20(s0)
2040191a:	00a78963          	beq	a5,a0,2040192c <__swbuf_r+0x7c>
2040191e:	00c45783          	lhu	a5,12(s0)
20401922:	8b85                	andi	a5,a5,1
20401924:	cb81                	beqz	a5,20401934 <__swbuf_r+0x84>
20401926:	47a9                	li	a5,10
20401928:	00f91663          	bne	s2,a5,20401934 <__swbuf_r+0x84>
2040192c:	85a2                	mv	a1,s0
2040192e:	8526                	mv	a0,s1
20401930:	2c59                	jal	20401bc6 <_fflush_r>
20401932:	ed0d                	bnez	a0,2040196c <__swbuf_r+0xbc>
20401934:	40f2                	lw	ra,28(sp)
20401936:	4462                	lw	s0,24(sp)
20401938:	854a                	mv	a0,s2
2040193a:	44d2                	lw	s1,20(sp)
2040193c:	4942                	lw	s2,16(sp)
2040193e:	49b2                	lw	s3,12(sp)
20401940:	6105                	addi	sp,sp,32
20401942:	8082                	ret
20401944:	00044797          	auipc	a5,0x44
20401948:	c3878793          	addi	a5,a5,-968 # 2044557c <__sf_fake_stdout>
2040194c:	00f41463          	bne	s0,a5,20401954 <__swbuf_r+0xa4>
20401950:	4480                	lw	s0,8(s1)
20401952:	b759                	j	204018d8 <__swbuf_r+0x28>
20401954:	00044797          	auipc	a5,0x44
20401958:	be878793          	addi	a5,a5,-1048 # 2044553c <__sf_fake_stderr>
2040195c:	f6f41ee3          	bne	s0,a5,204018d8 <__swbuf_r+0x28>
20401960:	44c0                	lw	s0,12(s1)
20401962:	bf9d                	j	204018d8 <__swbuf_r+0x28>
20401964:	85a2                	mv	a1,s0
20401966:	8526                	mv	a0,s1
20401968:	2021                	jal	20401970 <__swsetup_r>
2040196a:	dd3d                	beqz	a0,204018e8 <__swbuf_r+0x38>
2040196c:	597d                	li	s2,-1
2040196e:	b7d9                	j	20401934 <__swbuf_r+0x84>

20401970 <__swsetup_r>:
__swsetup_r():
20401970:	1141                	addi	sp,sp,-16
20401972:	81018793          	addi	a5,gp,-2032 # 800007d8 <_impure_ptr>
20401976:	c226                	sw	s1,4(sp)
20401978:	4384                	lw	s1,0(a5)
2040197a:	c422                	sw	s0,8(sp)
2040197c:	c04a                	sw	s2,0(sp)
2040197e:	c606                	sw	ra,12(sp)
20401980:	892a                	mv	s2,a0
20401982:	842e                	mv	s0,a1
20401984:	c489                	beqz	s1,2040198e <__swsetup_r+0x1e>
20401986:	4c9c                	lw	a5,24(s1)
20401988:	e399                	bnez	a5,2040198e <__swsetup_r+0x1e>
2040198a:	8526                	mv	a0,s1
2040198c:	2ea1                	jal	20401ce4 <__sinit>
2040198e:	00044797          	auipc	a5,0x44
20401992:	bce78793          	addi	a5,a5,-1074 # 2044555c <__sf_fake_stdin>
20401996:	02f41c63          	bne	s0,a5,204019ce <__swsetup_r+0x5e>
2040199a:	40c0                	lw	s0,4(s1)
2040199c:	00c41703          	lh	a4,12(s0)
204019a0:	01071793          	slli	a5,a4,0x10
204019a4:	83c1                	srli	a5,a5,0x10
204019a6:	0087f693          	andi	a3,a5,8
204019aa:	eeb5                	bnez	a3,20401a26 <__swsetup_r+0xb6>
204019ac:	0107f693          	andi	a3,a5,16
204019b0:	ee9d                	bnez	a3,204019ee <__swsetup_r+0x7e>
204019b2:	47a5                	li	a5,9
204019b4:	00f92023          	sw	a5,0(s2)
204019b8:	04076713          	ori	a4,a4,64
204019bc:	00e41623          	sh	a4,12(s0)
204019c0:	557d                	li	a0,-1
204019c2:	40b2                	lw	ra,12(sp)
204019c4:	4422                	lw	s0,8(sp)
204019c6:	4492                	lw	s1,4(sp)
204019c8:	4902                	lw	s2,0(sp)
204019ca:	0141                	addi	sp,sp,16
204019cc:	8082                	ret
204019ce:	00044797          	auipc	a5,0x44
204019d2:	bae78793          	addi	a5,a5,-1106 # 2044557c <__sf_fake_stdout>
204019d6:	00f41463          	bne	s0,a5,204019de <__swsetup_r+0x6e>
204019da:	4480                	lw	s0,8(s1)
204019dc:	b7c1                	j	2040199c <__swsetup_r+0x2c>
204019de:	00044797          	auipc	a5,0x44
204019e2:	b5e78793          	addi	a5,a5,-1186 # 2044553c <__sf_fake_stderr>
204019e6:	faf41be3          	bne	s0,a5,2040199c <__swsetup_r+0x2c>
204019ea:	44c0                	lw	s0,12(s1)
204019ec:	bf45                	j	2040199c <__swsetup_r+0x2c>
204019ee:	8b91                	andi	a5,a5,4
204019f0:	c78d                	beqz	a5,20401a1a <__swsetup_r+0xaa>
204019f2:	584c                	lw	a1,52(s0)
204019f4:	c989                	beqz	a1,20401a06 <__swsetup_r+0x96>
204019f6:	04440793          	addi	a5,s0,68
204019fa:	00f58463          	beq	a1,a5,20401a02 <__swsetup_r+0x92>
204019fe:	854a                	mv	a0,s2
20401a00:	2399                	jal	20401f46 <_free_r>
20401a02:	02042a23          	sw	zero,52(s0)
20401a06:	00c45783          	lhu	a5,12(s0)
20401a0a:	00042223          	sw	zero,4(s0)
20401a0e:	fdb7f793          	andi	a5,a5,-37
20401a12:	00f41623          	sh	a5,12(s0)
20401a16:	481c                	lw	a5,16(s0)
20401a18:	c01c                	sw	a5,0(s0)
20401a1a:	00c45783          	lhu	a5,12(s0)
20401a1e:	0087e793          	ori	a5,a5,8
20401a22:	00f41623          	sh	a5,12(s0)
20401a26:	481c                	lw	a5,16(s0)
20401a28:	ef81                	bnez	a5,20401a40 <__swsetup_r+0xd0>
20401a2a:	00c45783          	lhu	a5,12(s0)
20401a2e:	20000713          	li	a4,512
20401a32:	2807f793          	andi	a5,a5,640
20401a36:	00e78563          	beq	a5,a4,20401a40 <__swsetup_r+0xd0>
20401a3a:	85a2                	mv	a1,s0
20401a3c:	854a                	mv	a0,s2
20401a3e:	21b5                	jal	20401eaa <__smakebuf_r>
20401a40:	00c45783          	lhu	a5,12(s0)
20401a44:	0017f713          	andi	a4,a5,1
20401a48:	c705                	beqz	a4,20401a70 <__swsetup_r+0x100>
20401a4a:	485c                	lw	a5,20(s0)
20401a4c:	00042423          	sw	zero,8(s0)
20401a50:	40f007b3          	neg	a5,a5
20401a54:	cc1c                	sw	a5,24(s0)
20401a56:	481c                	lw	a5,16(s0)
20401a58:	4501                	li	a0,0
20401a5a:	f7a5                	bnez	a5,204019c2 <__swsetup_r+0x52>
20401a5c:	00c41783          	lh	a5,12(s0)
20401a60:	0807f713          	andi	a4,a5,128
20401a64:	df39                	beqz	a4,204019c2 <__swsetup_r+0x52>
20401a66:	0407e793          	ori	a5,a5,64
20401a6a:	00f41623          	sh	a5,12(s0)
20401a6e:	bf89                	j	204019c0 <__swsetup_r+0x50>
20401a70:	8b89                	andi	a5,a5,2
20401a72:	4701                	li	a4,0
20401a74:	e391                	bnez	a5,20401a78 <__swsetup_r+0x108>
20401a76:	4858                	lw	a4,20(s0)
20401a78:	c418                	sw	a4,8(s0)
20401a7a:	bff1                	j	20401a56 <__swsetup_r+0xe6>

20401a7c <__sflush_r>:
__sflush_r():
20401a7c:	00c5d783          	lhu	a5,12(a1)
20401a80:	1101                	addi	sp,sp,-32
20401a82:	cc22                	sw	s0,24(sp)
20401a84:	ca26                	sw	s1,20(sp)
20401a86:	ce06                	sw	ra,28(sp)
20401a88:	c84a                	sw	s2,16(sp)
20401a8a:	c64e                	sw	s3,12(sp)
20401a8c:	0087f713          	andi	a4,a5,8
20401a90:	84aa                	mv	s1,a0
20401a92:	842e                	mv	s0,a1
20401a94:	e765                	bnez	a4,20401b7c <__sflush_r+0x100>
20401a96:	41d8                	lw	a4,4(a1)
20401a98:	00e04763          	bgtz	a4,20401aa6 <__sflush_r+0x2a>
20401a9c:	41b8                	lw	a4,64(a1)
20401a9e:	00e04463          	bgtz	a4,20401aa6 <__sflush_r+0x2a>
20401aa2:	4501                	li	a0,0
20401aa4:	a0c1                	j	20401b64 <__sflush_r+0xe8>
20401aa6:	5458                	lw	a4,44(s0)
20401aa8:	df6d                	beqz	a4,20401aa2 <__sflush_r+0x26>
20401aaa:	0004a903          	lw	s2,0(s1)
20401aae:	01379693          	slli	a3,a5,0x13
20401ab2:	0004a023          	sw	zero,0(s1)
20401ab6:	0606de63          	bgez	a3,20401b32 <__sflush_r+0xb6>
20401aba:	4868                	lw	a0,84(s0)
20401abc:	00c45783          	lhu	a5,12(s0)
20401ac0:	8b91                	andi	a5,a5,4
20401ac2:	c799                	beqz	a5,20401ad0 <__sflush_r+0x54>
20401ac4:	405c                	lw	a5,4(s0)
20401ac6:	8d1d                	sub	a0,a0,a5
20401ac8:	585c                	lw	a5,52(s0)
20401aca:	c399                	beqz	a5,20401ad0 <__sflush_r+0x54>
20401acc:	403c                	lw	a5,64(s0)
20401ace:	8d1d                	sub	a0,a0,a5
20401ad0:	545c                	lw	a5,44(s0)
20401ad2:	500c                	lw	a1,32(s0)
20401ad4:	862a                	mv	a2,a0
20401ad6:	4681                	li	a3,0
20401ad8:	8526                	mv	a0,s1
20401ada:	9782                	jalr	a5
20401adc:	57fd                	li	a5,-1
20401ade:	00c45703          	lhu	a4,12(s0)
20401ae2:	00f51d63          	bne	a0,a5,20401afc <__sflush_r+0x80>
20401ae6:	4094                	lw	a3,0(s1)
20401ae8:	47f5                	li	a5,29
20401aea:	08d7e463          	bltu	a5,a3,20401b72 <__sflush_r+0xf6>
20401aee:	204007b7          	lui	a5,0x20400
20401af2:	0785                	addi	a5,a5,1
20401af4:	00d7d7b3          	srl	a5,a5,a3
20401af8:	8b85                	andi	a5,a5,1
20401afa:	cfa5                	beqz	a5,20401b72 <__sflush_r+0xf6>
20401afc:	481c                	lw	a5,16(s0)
20401afe:	00042223          	sw	zero,4(s0)
20401b02:	c01c                	sw	a5,0(s0)
20401b04:	01371793          	slli	a5,a4,0x13
20401b08:	0007d863          	bgez	a5,20401b18 <__sflush_r+0x9c>
20401b0c:	57fd                	li	a5,-1
20401b0e:	00f51463          	bne	a0,a5,20401b16 <__sflush_r+0x9a>
20401b12:	409c                	lw	a5,0(s1)
20401b14:	e391                	bnez	a5,20401b18 <__sflush_r+0x9c>
20401b16:	c868                	sw	a0,84(s0)
20401b18:	584c                	lw	a1,52(s0)
20401b1a:	0124a023          	sw	s2,0(s1)
20401b1e:	d1d1                	beqz	a1,20401aa2 <__sflush_r+0x26>
20401b20:	04440793          	addi	a5,s0,68
20401b24:	00f58463          	beq	a1,a5,20401b2c <__sflush_r+0xb0>
20401b28:	8526                	mv	a0,s1
20401b2a:	2931                	jal	20401f46 <_free_r>
20401b2c:	02042a23          	sw	zero,52(s0)
20401b30:	bf8d                	j	20401aa2 <__sflush_r+0x26>
20401b32:	500c                	lw	a1,32(s0)
20401b34:	4685                	li	a3,1
20401b36:	4601                	li	a2,0
20401b38:	8526                	mv	a0,s1
20401b3a:	9702                	jalr	a4
20401b3c:	57fd                	li	a5,-1
20401b3e:	f6f51fe3          	bne	a0,a5,20401abc <__sflush_r+0x40>
20401b42:	409c                	lw	a5,0(s1)
20401b44:	dfa5                	beqz	a5,20401abc <__sflush_r+0x40>
20401b46:	4775                	li	a4,29
20401b48:	00e78563          	beq	a5,a4,20401b52 <__sflush_r+0xd6>
20401b4c:	4759                	li	a4,22
20401b4e:	00e79563          	bne	a5,a4,20401b58 <__sflush_r+0xdc>
20401b52:	0124a023          	sw	s2,0(s1)
20401b56:	b7b1                	j	20401aa2 <__sflush_r+0x26>
20401b58:	00c45783          	lhu	a5,12(s0)
20401b5c:	0407e793          	ori	a5,a5,64
20401b60:	00f41623          	sh	a5,12(s0)
20401b64:	40f2                	lw	ra,28(sp)
20401b66:	4462                	lw	s0,24(sp)
20401b68:	44d2                	lw	s1,20(sp)
20401b6a:	4942                	lw	s2,16(sp)
20401b6c:	49b2                	lw	s3,12(sp)
20401b6e:	6105                	addi	sp,sp,32
20401b70:	8082                	ret
20401b72:	04076713          	ori	a4,a4,64
20401b76:	00e41623          	sh	a4,12(s0)
20401b7a:	b7ed                	j	20401b64 <__sflush_r+0xe8>
20401b7c:	0105a983          	lw	s3,16(a1)
20401b80:	f20981e3          	beqz	s3,20401aa2 <__sflush_r+0x26>
20401b84:	0005a903          	lw	s2,0(a1)
20401b88:	8b8d                	andi	a5,a5,3
20401b8a:	0135a023          	sw	s3,0(a1)
20401b8e:	41390933          	sub	s2,s2,s3
20401b92:	4701                	li	a4,0
20401b94:	e391                	bnez	a5,20401b98 <__sflush_r+0x11c>
20401b96:	49d8                	lw	a4,20(a1)
20401b98:	c418                	sw	a4,8(s0)
20401b9a:	f12054e3          	blez	s2,20401aa2 <__sflush_r+0x26>
20401b9e:	541c                	lw	a5,40(s0)
20401ba0:	500c                	lw	a1,32(s0)
20401ba2:	86ca                	mv	a3,s2
20401ba4:	864e                	mv	a2,s3
20401ba6:	8526                	mv	a0,s1
20401ba8:	9782                	jalr	a5
20401baa:	00a04a63          	bgtz	a0,20401bbe <__sflush_r+0x142>
20401bae:	00c45783          	lhu	a5,12(s0)
20401bb2:	557d                	li	a0,-1
20401bb4:	0407e793          	ori	a5,a5,64
20401bb8:	00f41623          	sh	a5,12(s0)
20401bbc:	b765                	j	20401b64 <__sflush_r+0xe8>
20401bbe:	99aa                	add	s3,s3,a0
20401bc0:	40a90933          	sub	s2,s2,a0
20401bc4:	bfd9                	j	20401b9a <__sflush_r+0x11e>

20401bc6 <_fflush_r>:
_fflush_r():
20401bc6:	499c                	lw	a5,16(a1)
20401bc8:	cfb9                	beqz	a5,20401c26 <_fflush_r+0x60>
20401bca:	1101                	addi	sp,sp,-32
20401bcc:	cc22                	sw	s0,24(sp)
20401bce:	ce06                	sw	ra,28(sp)
20401bd0:	842a                	mv	s0,a0
20401bd2:	c511                	beqz	a0,20401bde <_fflush_r+0x18>
20401bd4:	4d1c                	lw	a5,24(a0)
20401bd6:	e781                	bnez	a5,20401bde <_fflush_r+0x18>
20401bd8:	c62e                	sw	a1,12(sp)
20401bda:	2229                	jal	20401ce4 <__sinit>
20401bdc:	45b2                	lw	a1,12(sp)
20401bde:	00044797          	auipc	a5,0x44
20401be2:	97e78793          	addi	a5,a5,-1666 # 2044555c <__sf_fake_stdin>
20401be6:	00f59b63          	bne	a1,a5,20401bfc <_fflush_r+0x36>
20401bea:	404c                	lw	a1,4(s0)
20401bec:	00c59783          	lh	a5,12(a1)
20401bf0:	c795                	beqz	a5,20401c1c <_fflush_r+0x56>
20401bf2:	8522                	mv	a0,s0
20401bf4:	4462                	lw	s0,24(sp)
20401bf6:	40f2                	lw	ra,28(sp)
20401bf8:	6105                	addi	sp,sp,32
20401bfa:	b549                	j	20401a7c <__sflush_r>
20401bfc:	00044797          	auipc	a5,0x44
20401c00:	98078793          	addi	a5,a5,-1664 # 2044557c <__sf_fake_stdout>
20401c04:	00f59463          	bne	a1,a5,20401c0c <_fflush_r+0x46>
20401c08:	440c                	lw	a1,8(s0)
20401c0a:	b7cd                	j	20401bec <_fflush_r+0x26>
20401c0c:	00044797          	auipc	a5,0x44
20401c10:	93078793          	addi	a5,a5,-1744 # 2044553c <__sf_fake_stderr>
20401c14:	fcf59ce3          	bne	a1,a5,20401bec <_fflush_r+0x26>
20401c18:	444c                	lw	a1,12(s0)
20401c1a:	bfc9                	j	20401bec <_fflush_r+0x26>
20401c1c:	40f2                	lw	ra,28(sp)
20401c1e:	4462                	lw	s0,24(sp)
20401c20:	4501                	li	a0,0
20401c22:	6105                	addi	sp,sp,32
20401c24:	8082                	ret
20401c26:	4501                	li	a0,0
20401c28:	8082                	ret

20401c2a <std>:
std():
20401c2a:	1141                	addi	sp,sp,-16
20401c2c:	c422                	sw	s0,8(sp)
20401c2e:	c606                	sw	ra,12(sp)
20401c30:	842a                	mv	s0,a0
20401c32:	00b51623          	sh	a1,12(a0)
20401c36:	00c51723          	sh	a2,14(a0)
20401c3a:	00052023          	sw	zero,0(a0)
20401c3e:	00052223          	sw	zero,4(a0)
20401c42:	00052423          	sw	zero,8(a0)
20401c46:	06052223          	sw	zero,100(a0)
20401c4a:	00052823          	sw	zero,16(a0)
20401c4e:	00052a23          	sw	zero,20(a0)
20401c52:	00052c23          	sw	zero,24(a0)
20401c56:	4621                	li	a2,8
20401c58:	4581                	li	a1,0
20401c5a:	05c50513          	addi	a0,a0,92
20401c5e:	9ddff0ef          	jal	ra,2040163a <memset>
20401c62:	00000797          	auipc	a5,0x0
20401c66:	79e78793          	addi	a5,a5,1950 # 20402400 <__sread>
20401c6a:	d05c                	sw	a5,36(s0)
20401c6c:	00000797          	auipc	a5,0x0
20401c70:	7c478793          	addi	a5,a5,1988 # 20402430 <__swrite>
20401c74:	d41c                	sw	a5,40(s0)
20401c76:	00001797          	auipc	a5,0x1
20401c7a:	80878793          	addi	a5,a5,-2040 # 2040247e <__sseek>
20401c7e:	d45c                	sw	a5,44(s0)
20401c80:	00001797          	auipc	a5,0x1
20401c84:	83478793          	addi	a5,a5,-1996 # 204024b4 <__sclose>
20401c88:	d000                	sw	s0,32(s0)
20401c8a:	d81c                	sw	a5,48(s0)
20401c8c:	40b2                	lw	ra,12(sp)
20401c8e:	4422                	lw	s0,8(sp)
20401c90:	0141                	addi	sp,sp,16
20401c92:	8082                	ret

20401c94 <_cleanup_r>:
_cleanup_r():
20401c94:	00000597          	auipc	a1,0x0
20401c98:	f3258593          	addi	a1,a1,-206 # 20401bc6 <_fflush_r>
20401c9c:	a2a9                	j	20401de6 <_fwalk_reent>

20401c9e <__sfmoreglue>:
__sfmoreglue():
20401c9e:	1141                	addi	sp,sp,-16
20401ca0:	c226                	sw	s1,4(sp)
20401ca2:	06800613          	li	a2,104
20401ca6:	fff58493          	addi	s1,a1,-1
20401caa:	02c484b3          	mul	s1,s1,a2
20401cae:	c04a                	sw	s2,0(sp)
20401cb0:	892e                	mv	s2,a1
20401cb2:	c422                	sw	s0,8(sp)
20401cb4:	c606                	sw	ra,12(sp)
20401cb6:	07448593          	addi	a1,s1,116
20401cba:	2e25                	jal	20401ff2 <_malloc_r>
20401cbc:	842a                	mv	s0,a0
20401cbe:	cd01                	beqz	a0,20401cd6 <__sfmoreglue+0x38>
20401cc0:	00052023          	sw	zero,0(a0)
20401cc4:	01252223          	sw	s2,4(a0)
20401cc8:	0531                	addi	a0,a0,12
20401cca:	c408                	sw	a0,8(s0)
20401ccc:	06848613          	addi	a2,s1,104
20401cd0:	4581                	li	a1,0
20401cd2:	969ff0ef          	jal	ra,2040163a <memset>
20401cd6:	8522                	mv	a0,s0
20401cd8:	40b2                	lw	ra,12(sp)
20401cda:	4422                	lw	s0,8(sp)
20401cdc:	4492                	lw	s1,4(sp)
20401cde:	4902                	lw	s2,0(sp)
20401ce0:	0141                	addi	sp,sp,16
20401ce2:	8082                	ret

20401ce4 <__sinit>:
__sinit():
20401ce4:	4d1c                	lw	a5,24(a0)
20401ce6:	e3ad                	bnez	a5,20401d48 <__sinit+0x64>
20401ce8:	1141                	addi	sp,sp,-16
20401cea:	c606                	sw	ra,12(sp)
20401cec:	c422                	sw	s0,8(sp)
20401cee:	00000797          	auipc	a5,0x0
20401cf2:	fa678793          	addi	a5,a5,-90 # 20401c94 <_cleanup_r>
20401cf6:	d51c                	sw	a5,40(a0)
20401cf8:	81418793          	addi	a5,gp,-2028 # 800007dc <_global_impure_ptr>
20401cfc:	439c                	lw	a5,0(a5)
20401cfe:	04052423          	sw	zero,72(a0)
20401d02:	04052623          	sw	zero,76(a0)
20401d06:	04052823          	sw	zero,80(a0)
20401d0a:	00f51463          	bne	a0,a5,20401d12 <__sinit+0x2e>
20401d0e:	4785                	li	a5,1
20401d10:	cd1c                	sw	a5,24(a0)
20401d12:	842a                	mv	s0,a0
20401d14:	281d                	jal	20401d4a <__sfp>
20401d16:	c048                	sw	a0,4(s0)
20401d18:	8522                	mv	a0,s0
20401d1a:	2805                	jal	20401d4a <__sfp>
20401d1c:	c408                	sw	a0,8(s0)
20401d1e:	8522                	mv	a0,s0
20401d20:	202d                	jal	20401d4a <__sfp>
20401d22:	c448                	sw	a0,12(s0)
20401d24:	4048                	lw	a0,4(s0)
20401d26:	4601                	li	a2,0
20401d28:	4591                	li	a1,4
20401d2a:	3701                	jal	20401c2a <std>
20401d2c:	4408                	lw	a0,8(s0)
20401d2e:	4605                	li	a2,1
20401d30:	45a5                	li	a1,9
20401d32:	3de5                	jal	20401c2a <std>
20401d34:	4448                	lw	a0,12(s0)
20401d36:	4609                	li	a2,2
20401d38:	45c9                	li	a1,18
20401d3a:	3dc5                	jal	20401c2a <std>
20401d3c:	4785                	li	a5,1
20401d3e:	cc1c                	sw	a5,24(s0)
20401d40:	40b2                	lw	ra,12(sp)
20401d42:	4422                	lw	s0,8(sp)
20401d44:	0141                	addi	sp,sp,16
20401d46:	8082                	ret
20401d48:	8082                	ret

20401d4a <__sfp>:
__sfp():
20401d4a:	1141                	addi	sp,sp,-16
20401d4c:	81418793          	addi	a5,gp,-2028 # 800007dc <_global_impure_ptr>
20401d50:	c226                	sw	s1,4(sp)
20401d52:	4384                	lw	s1,0(a5)
20401d54:	c04a                	sw	s2,0(sp)
20401d56:	c606                	sw	ra,12(sp)
20401d58:	4c9c                	lw	a5,24(s1)
20401d5a:	c422                	sw	s0,8(sp)
20401d5c:	892a                	mv	s2,a0
20401d5e:	e399                	bnez	a5,20401d64 <__sfp+0x1a>
20401d60:	8526                	mv	a0,s1
20401d62:	3749                	jal	20401ce4 <__sinit>
20401d64:	04848493          	addi	s1,s1,72
20401d68:	4480                	lw	s0,8(s1)
20401d6a:	40dc                	lw	a5,4(s1)
20401d6c:	17fd                	addi	a5,a5,-1
20401d6e:	0007d663          	bgez	a5,20401d7a <__sfp+0x30>
20401d72:	409c                	lw	a5,0(s1)
20401d74:	cfb9                	beqz	a5,20401dd2 <__sfp+0x88>
20401d76:	4084                	lw	s1,0(s1)
20401d78:	bfc5                	j	20401d68 <__sfp+0x1e>
20401d7a:	00c41703          	lh	a4,12(s0)
20401d7e:	e739                	bnez	a4,20401dcc <__sfp+0x82>
20401d80:	77c1                	lui	a5,0xffff0
20401d82:	0785                	addi	a5,a5,1
20401d84:	06042223          	sw	zero,100(s0)
20401d88:	00042023          	sw	zero,0(s0)
20401d8c:	00042223          	sw	zero,4(s0)
20401d90:	00042423          	sw	zero,8(s0)
20401d94:	c45c                	sw	a5,12(s0)
20401d96:	00042823          	sw	zero,16(s0)
20401d9a:	00042a23          	sw	zero,20(s0)
20401d9e:	00042c23          	sw	zero,24(s0)
20401da2:	4621                	li	a2,8
20401da4:	4581                	li	a1,0
20401da6:	05c40513          	addi	a0,s0,92
20401daa:	891ff0ef          	jal	ra,2040163a <memset>
20401dae:	02042a23          	sw	zero,52(s0)
20401db2:	02042c23          	sw	zero,56(s0)
20401db6:	04042423          	sw	zero,72(s0)
20401dba:	04042623          	sw	zero,76(s0)
20401dbe:	8522                	mv	a0,s0
20401dc0:	40b2                	lw	ra,12(sp)
20401dc2:	4422                	lw	s0,8(sp)
20401dc4:	4492                	lw	s1,4(sp)
20401dc6:	4902                	lw	s2,0(sp)
20401dc8:	0141                	addi	sp,sp,16
20401dca:	8082                	ret
20401dcc:	06840413          	addi	s0,s0,104
20401dd0:	bf71                	j	20401d6c <__sfp+0x22>
20401dd2:	4591                	li	a1,4
20401dd4:	854a                	mv	a0,s2
20401dd6:	35e1                	jal	20401c9e <__sfmoreglue>
20401dd8:	c088                	sw	a0,0(s1)
20401dda:	842a                	mv	s0,a0
20401ddc:	fd49                	bnez	a0,20401d76 <__sfp+0x2c>
20401dde:	47b1                	li	a5,12
20401de0:	00f92023          	sw	a5,0(s2)
20401de4:	bfe9                	j	20401dbe <__sfp+0x74>

20401de6 <_fwalk_reent>:
_fwalk_reent():
20401de6:	7179                	addi	sp,sp,-48
20401de8:	d422                	sw	s0,40(sp)
20401dea:	d04a                	sw	s2,32(sp)
20401dec:	cc52                	sw	s4,24(sp)
20401dee:	ca56                	sw	s5,20(sp)
20401df0:	c85a                	sw	s6,16(sp)
20401df2:	c65e                	sw	s7,12(sp)
20401df4:	d606                	sw	ra,44(sp)
20401df6:	d226                	sw	s1,36(sp)
20401df8:	ce4e                	sw	s3,28(sp)
20401dfa:	8a2a                	mv	s4,a0
20401dfc:	8aae                	mv	s5,a1
20401dfe:	04850413          	addi	s0,a0,72
20401e02:	4901                	li	s2,0
20401e04:	4b05                	li	s6,1
20401e06:	5bfd                	li	s7,-1
20401e08:	ec09                	bnez	s0,20401e22 <_fwalk_reent+0x3c>
20401e0a:	50b2                	lw	ra,44(sp)
20401e0c:	5422                	lw	s0,40(sp)
20401e0e:	854a                	mv	a0,s2
20401e10:	5492                	lw	s1,36(sp)
20401e12:	5902                	lw	s2,32(sp)
20401e14:	49f2                	lw	s3,28(sp)
20401e16:	4a62                	lw	s4,24(sp)
20401e18:	4ad2                	lw	s5,20(sp)
20401e1a:	4b42                	lw	s6,16(sp)
20401e1c:	4bb2                	lw	s7,12(sp)
20401e1e:	6145                	addi	sp,sp,48
20401e20:	8082                	ret
20401e22:	4404                	lw	s1,8(s0)
20401e24:	00442983          	lw	s3,4(s0)
20401e28:	19fd                	addi	s3,s3,-1
20401e2a:	0009d463          	bgez	s3,20401e32 <_fwalk_reent+0x4c>
20401e2e:	4000                	lw	s0,0(s0)
20401e30:	bfe1                	j	20401e08 <_fwalk_reent+0x22>
20401e32:	00c4d783          	lhu	a5,12(s1)
20401e36:	00fb7b63          	bgeu	s6,a5,20401e4c <_fwalk_reent+0x66>
20401e3a:	00e49783          	lh	a5,14(s1)
20401e3e:	01778763          	beq	a5,s7,20401e4c <_fwalk_reent+0x66>
20401e42:	85a6                	mv	a1,s1
20401e44:	8552                	mv	a0,s4
20401e46:	9a82                	jalr	s5
20401e48:	00a96933          	or	s2,s2,a0
20401e4c:	06848493          	addi	s1,s1,104
20401e50:	bfe1                	j	20401e28 <_fwalk_reent+0x42>

20401e52 <__swhatbuf_r>:
__swhatbuf_r():
20401e52:	7119                	addi	sp,sp,-128
20401e54:	daa6                	sw	s1,116(sp)
20401e56:	84ae                	mv	s1,a1
20401e58:	00e59583          	lh	a1,14(a1)
20401e5c:	dca2                	sw	s0,120(sp)
20401e5e:	de86                	sw	ra,124(sp)
20401e60:	8432                	mv	s0,a2
20401e62:	0005dc63          	bgez	a1,20401e7a <__swhatbuf_r+0x28>
20401e66:	00c4d783          	lhu	a5,12(s1)
20401e6a:	0006a023          	sw	zero,0(a3)
20401e6e:	0807f793          	andi	a5,a5,128
20401e72:	e39d                	bnez	a5,20401e98 <__swhatbuf_r+0x46>
20401e74:	40000793          	li	a5,1024
20401e78:	a015                	j	20401e9c <__swhatbuf_r+0x4a>
20401e7a:	0830                	addi	a2,sp,24
20401e7c:	c636                	sw	a3,12(sp)
20401e7e:	2d51                	jal	20402512 <_fstat_r>
20401e80:	46b2                	lw	a3,12(sp)
20401e82:	fe0542e3          	bltz	a0,20401e66 <__swhatbuf_r+0x14>
20401e86:	4772                	lw	a4,28(sp)
20401e88:	67bd                	lui	a5,0xf
20401e8a:	8ff9                	and	a5,a5,a4
20401e8c:	7779                	lui	a4,0xffffe
20401e8e:	97ba                	add	a5,a5,a4
20401e90:	0017b793          	seqz	a5,a5
20401e94:	c29c                	sw	a5,0(a3)
20401e96:	bff9                	j	20401e74 <__swhatbuf_r+0x22>
20401e98:	04000793          	li	a5,64
20401e9c:	c01c                	sw	a5,0(s0)
20401e9e:	50f6                	lw	ra,124(sp)
20401ea0:	5466                	lw	s0,120(sp)
20401ea2:	54d6                	lw	s1,116(sp)
20401ea4:	4501                	li	a0,0
20401ea6:	6109                	addi	sp,sp,128
20401ea8:	8082                	ret

20401eaa <__smakebuf_r>:
__smakebuf_r():
20401eaa:	00c5d783          	lhu	a5,12(a1)
20401eae:	1101                	addi	sp,sp,-32
20401eb0:	cc22                	sw	s0,24(sp)
20401eb2:	ce06                	sw	ra,28(sp)
20401eb4:	ca26                	sw	s1,20(sp)
20401eb6:	c84a                	sw	s2,16(sp)
20401eb8:	8b89                	andi	a5,a5,2
20401eba:	842e                	mv	s0,a1
20401ebc:	cf89                	beqz	a5,20401ed6 <__smakebuf_r+0x2c>
20401ebe:	04740793          	addi	a5,s0,71
20401ec2:	c01c                	sw	a5,0(s0)
20401ec4:	c81c                	sw	a5,16(s0)
20401ec6:	4785                	li	a5,1
20401ec8:	c85c                	sw	a5,20(s0)
20401eca:	40f2                	lw	ra,28(sp)
20401ecc:	4462                	lw	s0,24(sp)
20401ece:	44d2                	lw	s1,20(sp)
20401ed0:	4942                	lw	s2,16(sp)
20401ed2:	6105                	addi	sp,sp,32
20401ed4:	8082                	ret
20401ed6:	0074                	addi	a3,sp,12
20401ed8:	0030                	addi	a2,sp,8
20401eda:	84aa                	mv	s1,a0
20401edc:	3f9d                	jal	20401e52 <__swhatbuf_r>
20401ede:	45a2                	lw	a1,8(sp)
20401ee0:	892a                	mv	s2,a0
20401ee2:	8526                	mv	a0,s1
20401ee4:	2239                	jal	20401ff2 <_malloc_r>
20401ee6:	ed01                	bnez	a0,20401efe <__smakebuf_r+0x54>
20401ee8:	00c41783          	lh	a5,12(s0)
20401eec:	2007f713          	andi	a4,a5,512
20401ef0:	ff69                	bnez	a4,20401eca <__smakebuf_r+0x20>
20401ef2:	9bf1                	andi	a5,a5,-4
20401ef4:	0027e793          	ori	a5,a5,2
20401ef8:	00f41623          	sh	a5,12(s0)
20401efc:	b7c9                	j	20401ebe <__smakebuf_r+0x14>
20401efe:	00000797          	auipc	a5,0x0
20401f02:	d9678793          	addi	a5,a5,-618 # 20401c94 <_cleanup_r>
20401f06:	d49c                	sw	a5,40(s1)
20401f08:	00c45783          	lhu	a5,12(s0)
20401f0c:	c008                	sw	a0,0(s0)
20401f0e:	c808                	sw	a0,16(s0)
20401f10:	0807e793          	ori	a5,a5,128
20401f14:	00f41623          	sh	a5,12(s0)
20401f18:	47a2                	lw	a5,8(sp)
20401f1a:	c85c                	sw	a5,20(s0)
20401f1c:	47b2                	lw	a5,12(sp)
20401f1e:	cf89                	beqz	a5,20401f38 <__smakebuf_r+0x8e>
20401f20:	00e41583          	lh	a1,14(s0)
20401f24:	8526                	mv	a0,s1
20401f26:	2d21                	jal	2040253e <_isatty_r>
20401f28:	c901                	beqz	a0,20401f38 <__smakebuf_r+0x8e>
20401f2a:	00c45783          	lhu	a5,12(s0)
20401f2e:	9bf1                	andi	a5,a5,-4
20401f30:	0017e793          	ori	a5,a5,1
20401f34:	00f41623          	sh	a5,12(s0)
20401f38:	00c45783          	lhu	a5,12(s0)
20401f3c:	00f96933          	or	s2,s2,a5
20401f40:	01241623          	sh	s2,12(s0)
20401f44:	b759                	j	20401eca <__smakebuf_r+0x20>

20401f46 <_free_r>:
_free_r():
20401f46:	c5cd                	beqz	a1,20401ff0 <_free_r+0xaa>
20401f48:	ffc5a783          	lw	a5,-4(a1)
20401f4c:	1141                	addi	sp,sp,-16
20401f4e:	c422                	sw	s0,8(sp)
20401f50:	c606                	sw	ra,12(sp)
20401f52:	c226                	sw	s1,4(sp)
20401f54:	ffc58413          	addi	s0,a1,-4
20401f58:	0007d363          	bgez	a5,20401f5e <_free_r+0x18>
20401f5c:	943e                	add	s0,s0,a5
20401f5e:	84aa                	mv	s1,a0
20401f60:	2d81                	jal	204025b0 <__malloc_lock>
20401f62:	5fbff797          	auipc	a5,0x5fbff
20401f66:	8b678793          	addi	a5,a5,-1866 # 80000818 <metal_segment_data_target_end>
20401f6a:	439c                	lw	a5,0(a5)
20401f6c:	ef89                	bnez	a5,20401f86 <_free_r+0x40>
20401f6e:	00042223          	sw	zero,4(s0)
20401f72:	5fbff797          	auipc	a5,0x5fbff
20401f76:	8a87a323          	sw	s0,-1882(a5) # 80000818 <metal_segment_data_target_end>
20401f7a:	4422                	lw	s0,8(sp)
20401f7c:	40b2                	lw	ra,12(sp)
20401f7e:	8526                	mv	a0,s1
20401f80:	4492                	lw	s1,4(sp)
20401f82:	0141                	addi	sp,sp,16
20401f84:	a53d                	j	204025b2 <__malloc_unlock>
20401f86:	00f47e63          	bgeu	s0,a5,20401fa2 <_free_r+0x5c>
20401f8a:	4014                	lw	a3,0(s0)
20401f8c:	00d40733          	add	a4,s0,a3
20401f90:	00e79663          	bne	a5,a4,20401f9c <_free_r+0x56>
20401f94:	4398                	lw	a4,0(a5)
20401f96:	43dc                	lw	a5,4(a5)
20401f98:	9736                	add	a4,a4,a3
20401f9a:	c018                	sw	a4,0(s0)
20401f9c:	c05c                	sw	a5,4(s0)
20401f9e:	bfd1                	j	20401f72 <_free_r+0x2c>
20401fa0:	87ba                	mv	a5,a4
20401fa2:	43d8                	lw	a4,4(a5)
20401fa4:	c319                	beqz	a4,20401faa <_free_r+0x64>
20401fa6:	fee47de3          	bgeu	s0,a4,20401fa0 <_free_r+0x5a>
20401faa:	4394                	lw	a3,0(a5)
20401fac:	00d78633          	add	a2,a5,a3
20401fb0:	00861f63          	bne	a2,s0,20401fce <_free_r+0x88>
20401fb4:	4010                	lw	a2,0(s0)
20401fb6:	96b2                	add	a3,a3,a2
20401fb8:	c394                	sw	a3,0(a5)
20401fba:	00d78633          	add	a2,a5,a3
20401fbe:	fac71ee3          	bne	a4,a2,20401f7a <_free_r+0x34>
20401fc2:	4310                	lw	a2,0(a4)
20401fc4:	4358                	lw	a4,4(a4)
20401fc6:	96b2                	add	a3,a3,a2
20401fc8:	c394                	sw	a3,0(a5)
20401fca:	c3d8                	sw	a4,4(a5)
20401fcc:	b77d                	j	20401f7a <_free_r+0x34>
20401fce:	00c47563          	bgeu	s0,a2,20401fd8 <_free_r+0x92>
20401fd2:	47b1                	li	a5,12
20401fd4:	c09c                	sw	a5,0(s1)
20401fd6:	b755                	j	20401f7a <_free_r+0x34>
20401fd8:	4010                	lw	a2,0(s0)
20401fda:	00c406b3          	add	a3,s0,a2
20401fde:	00d71663          	bne	a4,a3,20401fea <_free_r+0xa4>
20401fe2:	4314                	lw	a3,0(a4)
20401fe4:	4358                	lw	a4,4(a4)
20401fe6:	96b2                	add	a3,a3,a2
20401fe8:	c014                	sw	a3,0(s0)
20401fea:	c058                	sw	a4,4(s0)
20401fec:	c3c0                	sw	s0,4(a5)
20401fee:	b771                	j	20401f7a <_free_r+0x34>
20401ff0:	8082                	ret

20401ff2 <_malloc_r>:
_malloc_r():
20401ff2:	1101                	addi	sp,sp,-32
20401ff4:	ca26                	sw	s1,20(sp)
20401ff6:	00358493          	addi	s1,a1,3
20401ffa:	98f1                	andi	s1,s1,-4
20401ffc:	ce06                	sw	ra,28(sp)
20401ffe:	cc22                	sw	s0,24(sp)
20402000:	c84a                	sw	s2,16(sp)
20402002:	c64e                	sw	s3,12(sp)
20402004:	04a1                	addi	s1,s1,8
20402006:	47b1                	li	a5,12
20402008:	04f4f763          	bgeu	s1,a5,20402056 <_malloc_r+0x64>
2040200c:	44b1                	li	s1,12
2040200e:	04b4e663          	bltu	s1,a1,2040205a <_malloc_r+0x68>
20402012:	892a                	mv	s2,a0
20402014:	2b71                	jal	204025b0 <__malloc_lock>
20402016:	5fbff797          	auipc	a5,0x5fbff
2040201a:	80278793          	addi	a5,a5,-2046 # 80000818 <metal_segment_data_target_end>
2040201e:	4398                	lw	a4,0(a5)
20402020:	843a                	mv	s0,a4
20402022:	e431                	bnez	s0,2040206e <_malloc_r+0x7c>
20402024:	5fbfe797          	auipc	a5,0x5fbfe
20402028:	7f878793          	addi	a5,a5,2040 # 8000081c <__malloc_sbrk_start>
2040202c:	439c                	lw	a5,0(a5)
2040202e:	eb81                	bnez	a5,2040203e <_malloc_r+0x4c>
20402030:	4581                	li	a1,0
20402032:	854a                	mv	a0,s2
20402034:	264d                	jal	204023d6 <_sbrk_r>
20402036:	5fbfe797          	auipc	a5,0x5fbfe
2040203a:	7ea7a323          	sw	a0,2022(a5) # 8000081c <__malloc_sbrk_start>
2040203e:	85a6                	mv	a1,s1
20402040:	854a                	mv	a0,s2
20402042:	2e51                	jal	204023d6 <_sbrk_r>
20402044:	59fd                	li	s3,-1
20402046:	07351963          	bne	a0,s3,204020b8 <_malloc_r+0xc6>
2040204a:	47b1                	li	a5,12
2040204c:	00f92023          	sw	a5,0(s2)
20402050:	854a                	mv	a0,s2
20402052:	2385                	jal	204025b2 <__malloc_unlock>
20402054:	a029                	j	2040205e <_malloc_r+0x6c>
20402056:	fa04dce3          	bgez	s1,2040200e <_malloc_r+0x1c>
2040205a:	47b1                	li	a5,12
2040205c:	c11c                	sw	a5,0(a0)
2040205e:	4501                	li	a0,0
20402060:	40f2                	lw	ra,28(sp)
20402062:	4462                	lw	s0,24(sp)
20402064:	44d2                	lw	s1,20(sp)
20402066:	4942                	lw	s2,16(sp)
20402068:	49b2                	lw	s3,12(sp)
2040206a:	6105                	addi	sp,sp,32
2040206c:	8082                	ret
2040206e:	401c                	lw	a5,0(s0)
20402070:	8f85                	sub	a5,a5,s1
20402072:	0407c063          	bltz	a5,204020b2 <_malloc_r+0xc0>
20402076:	46ad                	li	a3,11
20402078:	00f6f663          	bgeu	a3,a5,20402084 <_malloc_r+0x92>
2040207c:	c01c                	sw	a5,0(s0)
2040207e:	943e                	add	s0,s0,a5
20402080:	c004                	sw	s1,0(s0)
20402082:	a801                	j	20402092 <_malloc_r+0xa0>
20402084:	405c                	lw	a5,4(s0)
20402086:	02871463          	bne	a4,s0,204020ae <_malloc_r+0xbc>
2040208a:	5fbfe717          	auipc	a4,0x5fbfe
2040208e:	78f72723          	sw	a5,1934(a4) # 80000818 <metal_segment_data_target_end>
20402092:	854a                	mv	a0,s2
20402094:	2b39                	jal	204025b2 <__malloc_unlock>
20402096:	00b40513          	addi	a0,s0,11
2040209a:	00440793          	addi	a5,s0,4
2040209e:	9961                	andi	a0,a0,-8
204020a0:	40f50733          	sub	a4,a0,a5
204020a4:	df55                	beqz	a4,20402060 <_malloc_r+0x6e>
204020a6:	943a                	add	s0,s0,a4
204020a8:	8f89                	sub	a5,a5,a0
204020aa:	c01c                	sw	a5,0(s0)
204020ac:	bf55                	j	20402060 <_malloc_r+0x6e>
204020ae:	c35c                	sw	a5,4(a4)
204020b0:	b7cd                	j	20402092 <_malloc_r+0xa0>
204020b2:	8722                	mv	a4,s0
204020b4:	4040                	lw	s0,4(s0)
204020b6:	b7b5                	j	20402022 <_malloc_r+0x30>
204020b8:	00350413          	addi	s0,a0,3
204020bc:	9871                	andi	s0,s0,-4
204020be:	fc8501e3          	beq	a0,s0,20402080 <_malloc_r+0x8e>
204020c2:	40a405b3          	sub	a1,s0,a0
204020c6:	854a                	mv	a0,s2
204020c8:	2639                	jal	204023d6 <_sbrk_r>
204020ca:	fb351be3          	bne	a0,s3,20402080 <_malloc_r+0x8e>
204020ce:	bfb5                	j	2040204a <_malloc_r+0x58>

204020d0 <__sfputc_r>:
__sfputc_r():
204020d0:	461c                	lw	a5,8(a2)
204020d2:	17fd                	addi	a5,a5,-1
204020d4:	c61c                	sw	a5,8(a2)
204020d6:	0007da63          	bgez	a5,204020ea <__sfputc_r+0x1a>
204020da:	4e18                	lw	a4,24(a2)
204020dc:	00e7c563          	blt	a5,a4,204020e6 <__sfputc_r+0x16>
204020e0:	47a9                	li	a5,10
204020e2:	00f59463          	bne	a1,a5,204020ea <__sfputc_r+0x1a>
204020e6:	fcaff06f          	j	204018b0 <__swbuf_r>
204020ea:	421c                	lw	a5,0(a2)
204020ec:	852e                	mv	a0,a1
204020ee:	00178713          	addi	a4,a5,1
204020f2:	c218                	sw	a4,0(a2)
204020f4:	00b78023          	sb	a1,0(a5)
204020f8:	8082                	ret

204020fa <__sfputs_r>:
__sfputs_r():
204020fa:	1101                	addi	sp,sp,-32
204020fc:	cc22                	sw	s0,24(sp)
204020fe:	ca26                	sw	s1,20(sp)
20402100:	c84a                	sw	s2,16(sp)
20402102:	c64e                	sw	s3,12(sp)
20402104:	c452                	sw	s4,8(sp)
20402106:	ce06                	sw	ra,28(sp)
20402108:	892a                	mv	s2,a0
2040210a:	89ae                	mv	s3,a1
2040210c:	8432                	mv	s0,a2
2040210e:	00d604b3          	add	s1,a2,a3
20402112:	5a7d                	li	s4,-1
20402114:	00941463          	bne	s0,s1,2040211c <__sfputs_r+0x22>
20402118:	4501                	li	a0,0
2040211a:	a809                	j	2040212c <__sfputs_r+0x32>
2040211c:	00044583          	lbu	a1,0(s0)
20402120:	864e                	mv	a2,s3
20402122:	854a                	mv	a0,s2
20402124:	3775                	jal	204020d0 <__sfputc_r>
20402126:	0405                	addi	s0,s0,1
20402128:	ff4516e3          	bne	a0,s4,20402114 <__sfputs_r+0x1a>
2040212c:	40f2                	lw	ra,28(sp)
2040212e:	4462                	lw	s0,24(sp)
20402130:	44d2                	lw	s1,20(sp)
20402132:	4942                	lw	s2,16(sp)
20402134:	49b2                	lw	s3,12(sp)
20402136:	4a22                	lw	s4,8(sp)
20402138:	6105                	addi	sp,sp,32
2040213a:	8082                	ret

2040213c <_vfiprintf_r>:
_vfiprintf_r():
2040213c:	7135                	addi	sp,sp,-160
2040213e:	cd22                	sw	s0,152(sp)
20402140:	cb26                	sw	s1,148(sp)
20402142:	c94a                	sw	s2,144(sp)
20402144:	c74e                	sw	s3,140(sp)
20402146:	cf06                	sw	ra,156(sp)
20402148:	c552                	sw	s4,136(sp)
2040214a:	c356                	sw	s5,132(sp)
2040214c:	c15a                	sw	s6,128(sp)
2040214e:	dede                	sw	s7,124(sp)
20402150:	dce2                	sw	s8,120(sp)
20402152:	dae6                	sw	s9,116(sp)
20402154:	89aa                	mv	s3,a0
20402156:	84ae                	mv	s1,a1
20402158:	8932                	mv	s2,a2
2040215a:	8436                	mv	s0,a3
2040215c:	c509                	beqz	a0,20402166 <_vfiprintf_r+0x2a>
2040215e:	4d1c                	lw	a5,24(a0)
20402160:	e399                	bnez	a5,20402166 <_vfiprintf_r+0x2a>
20402162:	b83ff0ef          	jal	ra,20401ce4 <__sinit>
20402166:	00043797          	auipc	a5,0x43
2040216a:	3f678793          	addi	a5,a5,1014 # 2044555c <__sf_fake_stdin>
2040216e:	0cf49b63          	bne	s1,a5,20402244 <_vfiprintf_r+0x108>
20402172:	0049a483          	lw	s1,4(s3)
20402176:	00c4d783          	lhu	a5,12(s1)
2040217a:	8ba1                	andi	a5,a5,8
2040217c:	c7f5                	beqz	a5,20402268 <_vfiprintf_r+0x12c>
2040217e:	489c                	lw	a5,16(s1)
20402180:	c7e5                	beqz	a5,20402268 <_vfiprintf_r+0x12c>
20402182:	02000793          	li	a5,32
20402186:	02f104a3          	sb	a5,41(sp)
2040218a:	03000793          	li	a5,48
2040218e:	d202                	sw	zero,36(sp)
20402190:	02f10523          	sb	a5,42(sp)
20402194:	c622                	sw	s0,12(sp)
20402196:	02500b93          	li	s7,37
2040219a:	00043a97          	auipc	s5,0x43
2040219e:	402a8a93          	addi	s5,s5,1026 # 2044559c <__sf_fake_stdout+0x20>
204021a2:	4c05                	li	s8,1
204021a4:	4b29                	li	s6,10
204021a6:	844a                	mv	s0,s2
204021a8:	00044783          	lbu	a5,0(s0)
204021ac:	c399                	beqz	a5,204021b2 <_vfiprintf_r+0x76>
204021ae:	0f779063          	bne	a5,s7,2040228e <_vfiprintf_r+0x152>
204021b2:	41240cb3          	sub	s9,s0,s2
204021b6:	000c8d63          	beqz	s9,204021d0 <_vfiprintf_r+0x94>
204021ba:	86e6                	mv	a3,s9
204021bc:	864a                	mv	a2,s2
204021be:	85a6                	mv	a1,s1
204021c0:	854e                	mv	a0,s3
204021c2:	3f25                	jal	204020fa <__sfputs_r>
204021c4:	57fd                	li	a5,-1
204021c6:	1ef50663          	beq	a0,a5,204023b2 <_vfiprintf_r+0x276>
204021ca:	5692                	lw	a3,36(sp)
204021cc:	96e6                	add	a3,a3,s9
204021ce:	d236                	sw	a3,36(sp)
204021d0:	00044783          	lbu	a5,0(s0)
204021d4:	1c078f63          	beqz	a5,204023b2 <_vfiprintf_r+0x276>
204021d8:	57fd                	li	a5,-1
204021da:	00140913          	addi	s2,s0,1
204021de:	c802                	sw	zero,16(sp)
204021e0:	ce02                	sw	zero,28(sp)
204021e2:	ca3e                	sw	a5,20(sp)
204021e4:	cc02                	sw	zero,24(sp)
204021e6:	040109a3          	sb	zero,83(sp)
204021ea:	d482                	sw	zero,104(sp)
204021ec:	00094583          	lbu	a1,0(s2)
204021f0:	4615                	li	a2,5
204021f2:	8556                	mv	a0,s5
204021f4:	264d                	jal	20402596 <memchr>
204021f6:	00190413          	addi	s0,s2,1
204021fa:	47c2                	lw	a5,16(sp)
204021fc:	e959                	bnez	a0,20402292 <_vfiprintf_r+0x156>
204021fe:	0107f713          	andi	a4,a5,16
20402202:	c709                	beqz	a4,2040220c <_vfiprintf_r+0xd0>
20402204:	02000713          	li	a4,32
20402208:	04e109a3          	sb	a4,83(sp)
2040220c:	0087f713          	andi	a4,a5,8
20402210:	c709                	beqz	a4,2040221a <_vfiprintf_r+0xde>
20402212:	02b00713          	li	a4,43
20402216:	04e109a3          	sb	a4,83(sp)
2040221a:	00094683          	lbu	a3,0(s2)
2040221e:	02a00713          	li	a4,42
20402222:	08e68063          	beq	a3,a4,204022a2 <_vfiprintf_r+0x166>
20402226:	47f2                	lw	a5,28(sp)
20402228:	844a                	mv	s0,s2
2040222a:	4681                	li	a3,0
2040222c:	4625                	li	a2,9
2040222e:	00044703          	lbu	a4,0(s0)
20402232:	00140593          	addi	a1,s0,1
20402236:	fd070713          	addi	a4,a4,-48
2040223a:	0ae67963          	bgeu	a2,a4,204022ec <_vfiprintf_r+0x1b0>
2040223e:	cab5                	beqz	a3,204022b2 <_vfiprintf_r+0x176>
20402240:	ce3e                	sw	a5,28(sp)
20402242:	a885                	j	204022b2 <_vfiprintf_r+0x176>
20402244:	00043797          	auipc	a5,0x43
20402248:	33878793          	addi	a5,a5,824 # 2044557c <__sf_fake_stdout>
2040224c:	00f49563          	bne	s1,a5,20402256 <_vfiprintf_r+0x11a>
20402250:	0089a483          	lw	s1,8(s3)
20402254:	b70d                	j	20402176 <_vfiprintf_r+0x3a>
20402256:	00043797          	auipc	a5,0x43
2040225a:	2e678793          	addi	a5,a5,742 # 2044553c <__sf_fake_stderr>
2040225e:	f0f49ce3          	bne	s1,a5,20402176 <_vfiprintf_r+0x3a>
20402262:	00c9a483          	lw	s1,12(s3)
20402266:	bf01                	j	20402176 <_vfiprintf_r+0x3a>
20402268:	85a6                	mv	a1,s1
2040226a:	854e                	mv	a0,s3
2040226c:	f04ff0ef          	jal	ra,20401970 <__swsetup_r>
20402270:	d909                	beqz	a0,20402182 <_vfiprintf_r+0x46>
20402272:	557d                	li	a0,-1
20402274:	40fa                	lw	ra,156(sp)
20402276:	446a                	lw	s0,152(sp)
20402278:	44da                	lw	s1,148(sp)
2040227a:	494a                	lw	s2,144(sp)
2040227c:	49ba                	lw	s3,140(sp)
2040227e:	4a2a                	lw	s4,136(sp)
20402280:	4a9a                	lw	s5,132(sp)
20402282:	4b0a                	lw	s6,128(sp)
20402284:	5bf6                	lw	s7,124(sp)
20402286:	5c66                	lw	s8,120(sp)
20402288:	5cd6                	lw	s9,116(sp)
2040228a:	610d                	addi	sp,sp,160
2040228c:	8082                	ret
2040228e:	0405                	addi	s0,s0,1
20402290:	bf21                	j	204021a8 <_vfiprintf_r+0x6c>
20402292:	41550533          	sub	a0,a0,s5
20402296:	00ac1533          	sll	a0,s8,a0
2040229a:	8fc9                	or	a5,a5,a0
2040229c:	c83e                	sw	a5,16(sp)
2040229e:	8922                	mv	s2,s0
204022a0:	b7b1                	j	204021ec <_vfiprintf_r+0xb0>
204022a2:	4732                	lw	a4,12(sp)
204022a4:	00470693          	addi	a3,a4,4
204022a8:	4318                	lw	a4,0(a4)
204022aa:	c636                	sw	a3,12(sp)
204022ac:	02074963          	bltz	a4,204022de <_vfiprintf_r+0x1a2>
204022b0:	ce3a                	sw	a4,28(sp)
204022b2:	00044703          	lbu	a4,0(s0)
204022b6:	02e00793          	li	a5,46
204022ba:	04f71f63          	bne	a4,a5,20402318 <_vfiprintf_r+0x1dc>
204022be:	00144703          	lbu	a4,1(s0)
204022c2:	02a00793          	li	a5,42
204022c6:	02f71b63          	bne	a4,a5,204022fc <_vfiprintf_r+0x1c0>
204022ca:	47b2                	lw	a5,12(sp)
204022cc:	0409                	addi	s0,s0,2
204022ce:	00478713          	addi	a4,a5,4
204022d2:	439c                	lw	a5,0(a5)
204022d4:	c63a                	sw	a4,12(sp)
204022d6:	0207c163          	bltz	a5,204022f8 <_vfiprintf_r+0x1bc>
204022da:	ca3e                	sw	a5,20(sp)
204022dc:	a835                	j	20402318 <_vfiprintf_r+0x1dc>
204022de:	40e00733          	neg	a4,a4
204022e2:	0027e793          	ori	a5,a5,2
204022e6:	ce3a                	sw	a4,28(sp)
204022e8:	c83e                	sw	a5,16(sp)
204022ea:	b7e1                	j	204022b2 <_vfiprintf_r+0x176>
204022ec:	036787b3          	mul	a5,a5,s6
204022f0:	4685                	li	a3,1
204022f2:	842e                	mv	s0,a1
204022f4:	97ba                	add	a5,a5,a4
204022f6:	bf25                	j	2040222e <_vfiprintf_r+0xf2>
204022f8:	57fd                	li	a5,-1
204022fa:	b7c5                	j	204022da <_vfiprintf_r+0x19e>
204022fc:	0405                	addi	s0,s0,1
204022fe:	ca02                	sw	zero,20(sp)
20402300:	4681                	li	a3,0
20402302:	4781                	li	a5,0
20402304:	4625                	li	a2,9
20402306:	00044703          	lbu	a4,0(s0)
2040230a:	00140593          	addi	a1,s0,1
2040230e:	fd070713          	addi	a4,a4,-48
20402312:	06e67663          	bgeu	a2,a4,2040237e <_vfiprintf_r+0x242>
20402316:	f2f1                	bnez	a3,204022da <_vfiprintf_r+0x19e>
20402318:	00044583          	lbu	a1,0(s0)
2040231c:	460d                	li	a2,3
2040231e:	00043517          	auipc	a0,0x43
20402322:	28650513          	addi	a0,a0,646 # 204455a4 <__sf_fake_stdout+0x28>
20402326:	2c85                	jal	20402596 <memchr>
20402328:	cd11                	beqz	a0,20402344 <_vfiprintf_r+0x208>
2040232a:	00043797          	auipc	a5,0x43
2040232e:	27a78793          	addi	a5,a5,634 # 204455a4 <__sf_fake_stdout+0x28>
20402332:	8d1d                	sub	a0,a0,a5
20402334:	04000793          	li	a5,64
20402338:	00a797b3          	sll	a5,a5,a0
2040233c:	4542                	lw	a0,16(sp)
2040233e:	0405                	addi	s0,s0,1
20402340:	8d5d                	or	a0,a0,a5
20402342:	c82a                	sw	a0,16(sp)
20402344:	00044583          	lbu	a1,0(s0)
20402348:	4619                	li	a2,6
2040234a:	00043517          	auipc	a0,0x43
2040234e:	25e50513          	addi	a0,a0,606 # 204455a8 <__sf_fake_stdout+0x2c>
20402352:	00140913          	addi	s2,s0,1
20402356:	02b10423          	sb	a1,40(sp)
2040235a:	2c35                	jal	20402596 <memchr>
2040235c:	c13d                	beqz	a0,204023c2 <_vfiprintf_r+0x286>
2040235e:	dfbfe797          	auipc	a5,0xdfbfe
20402362:	ca278793          	addi	a5,a5,-862 # 0 <__metal_boot_hart>
20402366:	e795                	bnez	a5,20402392 <_vfiprintf_r+0x256>
20402368:	4742                	lw	a4,16(sp)
2040236a:	47b2                	lw	a5,12(sp)
2040236c:	10077713          	andi	a4,a4,256
20402370:	cf09                	beqz	a4,2040238a <_vfiprintf_r+0x24e>
20402372:	0791                	addi	a5,a5,4
20402374:	c63e                	sw	a5,12(sp)
20402376:	5792                	lw	a5,36(sp)
20402378:	97d2                	add	a5,a5,s4
2040237a:	d23e                	sw	a5,36(sp)
2040237c:	b52d                	j	204021a6 <_vfiprintf_r+0x6a>
2040237e:	036787b3          	mul	a5,a5,s6
20402382:	4685                	li	a3,1
20402384:	842e                	mv	s0,a1
20402386:	97ba                	add	a5,a5,a4
20402388:	bfbd                	j	20402306 <_vfiprintf_r+0x1ca>
2040238a:	079d                	addi	a5,a5,7
2040238c:	9be1                	andi	a5,a5,-8
2040238e:	07a1                	addi	a5,a5,8
20402390:	b7d5                	j	20402374 <_vfiprintf_r+0x238>
20402392:	0078                	addi	a4,sp,12
20402394:	00000697          	auipc	a3,0x0
20402398:	d6668693          	addi	a3,a3,-666 # 204020fa <__sfputs_r>
2040239c:	8626                	mv	a2,s1
2040239e:	080c                	addi	a1,sp,16
204023a0:	854e                	mv	a0,s3
204023a2:	00000097          	auipc	ra,0x0
204023a6:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
204023aa:	57fd                	li	a5,-1
204023ac:	8a2a                	mv	s4,a0
204023ae:	fcf514e3          	bne	a0,a5,20402376 <_vfiprintf_r+0x23a>
204023b2:	00c4d783          	lhu	a5,12(s1)
204023b6:	0407f793          	andi	a5,a5,64
204023ba:	ea079ce3          	bnez	a5,20402272 <_vfiprintf_r+0x136>
204023be:	5512                	lw	a0,36(sp)
204023c0:	bd55                	j	20402274 <_vfiprintf_r+0x138>
204023c2:	0078                	addi	a4,sp,12
204023c4:	00000697          	auipc	a3,0x0
204023c8:	d3668693          	addi	a3,a3,-714 # 204020fa <__sfputs_r>
204023cc:	8626                	mv	a2,s1
204023ce:	080c                	addi	a1,sp,16
204023d0:	854e                	mv	a0,s3
204023d2:	24fd                	jal	204026c0 <_printf_i>
204023d4:	bfd9                	j	204023aa <_vfiprintf_r+0x26e>

204023d6 <_sbrk_r>:
_sbrk_r():
204023d6:	1141                	addi	sp,sp,-16
204023d8:	c422                	sw	s0,8(sp)
204023da:	842a                	mv	s0,a0
204023dc:	852e                	mv	a0,a1
204023de:	8e01a423          	sw	zero,-1816(gp) # 800008b0 <errno>
204023e2:	c606                	sw	ra,12(sp)
204023e4:	012060ef          	jal	ra,204083f6 <_sbrk>
204023e8:	57fd                	li	a5,-1
204023ea:	00f51763          	bne	a0,a5,204023f8 <_sbrk_r+0x22>
204023ee:	8e818793          	addi	a5,gp,-1816 # 800008b0 <errno>
204023f2:	439c                	lw	a5,0(a5)
204023f4:	c391                	beqz	a5,204023f8 <_sbrk_r+0x22>
204023f6:	c01c                	sw	a5,0(s0)
204023f8:	40b2                	lw	ra,12(sp)
204023fa:	4422                	lw	s0,8(sp)
204023fc:	0141                	addi	sp,sp,16
204023fe:	8082                	ret

20402400 <__sread>:
__sread():
20402400:	1141                	addi	sp,sp,-16
20402402:	c422                	sw	s0,8(sp)
20402404:	842e                	mv	s0,a1
20402406:	00e59583          	lh	a1,14(a1)
2040240a:	c606                	sw	ra,12(sp)
2040240c:	2b99                	jal	20402962 <_read_r>
2040240e:	00054963          	bltz	a0,20402420 <__sread+0x20>
20402412:	487c                	lw	a5,84(s0)
20402414:	97aa                	add	a5,a5,a0
20402416:	c87c                	sw	a5,84(s0)
20402418:	40b2                	lw	ra,12(sp)
2040241a:	4422                	lw	s0,8(sp)
2040241c:	0141                	addi	sp,sp,16
2040241e:	8082                	ret
20402420:	00c45783          	lhu	a5,12(s0)
20402424:	777d                	lui	a4,0xfffff
20402426:	177d                	addi	a4,a4,-1
20402428:	8ff9                	and	a5,a5,a4
2040242a:	00f41623          	sh	a5,12(s0)
2040242e:	b7ed                	j	20402418 <__sread+0x18>

20402430 <__swrite>:
__swrite():
20402430:	00c5d783          	lhu	a5,12(a1)
20402434:	1101                	addi	sp,sp,-32
20402436:	cc22                	sw	s0,24(sp)
20402438:	ca26                	sw	s1,20(sp)
2040243a:	c84a                	sw	s2,16(sp)
2040243c:	c64e                	sw	s3,12(sp)
2040243e:	ce06                	sw	ra,28(sp)
20402440:	1007f793          	andi	a5,a5,256
20402444:	84aa                	mv	s1,a0
20402446:	842e                	mv	s0,a1
20402448:	8932                	mv	s2,a2
2040244a:	89b6                	mv	s3,a3
2040244c:	c791                	beqz	a5,20402458 <__swrite+0x28>
2040244e:	00e59583          	lh	a1,14(a1)
20402452:	4689                	li	a3,2
20402454:	4601                	li	a2,0
20402456:	2a09                	jal	20402568 <_lseek_r>
20402458:	00c45783          	lhu	a5,12(s0)
2040245c:	777d                	lui	a4,0xfffff
2040245e:	177d                	addi	a4,a4,-1
20402460:	8ff9                	and	a5,a5,a4
20402462:	00f41623          	sh	a5,12(s0)
20402466:	00e41583          	lh	a1,14(s0)
2040246a:	4462                	lw	s0,24(sp)
2040246c:	40f2                	lw	ra,28(sp)
2040246e:	86ce                	mv	a3,s3
20402470:	864a                	mv	a2,s2
20402472:	49b2                	lw	s3,12(sp)
20402474:	4942                	lw	s2,16(sp)
20402476:	8526                	mv	a0,s1
20402478:	44d2                	lw	s1,20(sp)
2040247a:	6105                	addi	sp,sp,32
2040247c:	a83d                	j	204024ba <_write_r>

2040247e <__sseek>:
__sseek():
2040247e:	1141                	addi	sp,sp,-16
20402480:	c422                	sw	s0,8(sp)
20402482:	842e                	mv	s0,a1
20402484:	00e59583          	lh	a1,14(a1)
20402488:	c606                	sw	ra,12(sp)
2040248a:	28f9                	jal	20402568 <_lseek_r>
2040248c:	57fd                	li	a5,-1
2040248e:	00c45703          	lhu	a4,12(s0)
20402492:	00f51b63          	bne	a0,a5,204024a8 <__sseek+0x2a>
20402496:	77fd                	lui	a5,0xfffff
20402498:	17fd                	addi	a5,a5,-1
2040249a:	8ff9                	and	a5,a5,a4
2040249c:	00f41623          	sh	a5,12(s0)
204024a0:	40b2                	lw	ra,12(sp)
204024a2:	4422                	lw	s0,8(sp)
204024a4:	0141                	addi	sp,sp,16
204024a6:	8082                	ret
204024a8:	6785                	lui	a5,0x1
204024aa:	8fd9                	or	a5,a5,a4
204024ac:	00f41623          	sh	a5,12(s0)
204024b0:	c868                	sw	a0,84(s0)
204024b2:	b7fd                	j	204024a0 <__sseek+0x22>

204024b4 <__sclose>:
__sclose():
204024b4:	00e59583          	lh	a1,14(a1)
204024b8:	a805                	j	204024e8 <_close_r>

204024ba <_write_r>:
_write_r():
204024ba:	1141                	addi	sp,sp,-16
204024bc:	c422                	sw	s0,8(sp)
204024be:	842a                	mv	s0,a0
204024c0:	852e                	mv	a0,a1
204024c2:	85b2                	mv	a1,a2
204024c4:	8636                	mv	a2,a3
204024c6:	8e01a423          	sw	zero,-1816(gp) # 800008b0 <errno>
204024ca:	c606                	sw	ra,12(sp)
204024cc:	795050ef          	jal	ra,20408460 <_write>
204024d0:	57fd                	li	a5,-1
204024d2:	00f51763          	bne	a0,a5,204024e0 <_write_r+0x26>
204024d6:	8e818793          	addi	a5,gp,-1816 # 800008b0 <errno>
204024da:	439c                	lw	a5,0(a5)
204024dc:	c391                	beqz	a5,204024e0 <_write_r+0x26>
204024de:	c01c                	sw	a5,0(s0)
204024e0:	40b2                	lw	ra,12(sp)
204024e2:	4422                	lw	s0,8(sp)
204024e4:	0141                	addi	sp,sp,16
204024e6:	8082                	ret

204024e8 <_close_r>:
_close_r():
204024e8:	1141                	addi	sp,sp,-16
204024ea:	c422                	sw	s0,8(sp)
204024ec:	842a                	mv	s0,a0
204024ee:	852e                	mv	a0,a1
204024f0:	8e01a423          	sw	zero,-1816(gp) # 800008b0 <errno>
204024f4:	c606                	sw	ra,12(sp)
204024f6:	645050ef          	jal	ra,2040833a <_close>
204024fa:	57fd                	li	a5,-1
204024fc:	00f51763          	bne	a0,a5,2040250a <_close_r+0x22>
20402500:	8e818793          	addi	a5,gp,-1816 # 800008b0 <errno>
20402504:	439c                	lw	a5,0(a5)
20402506:	c391                	beqz	a5,2040250a <_close_r+0x22>
20402508:	c01c                	sw	a5,0(s0)
2040250a:	40b2                	lw	ra,12(sp)
2040250c:	4422                	lw	s0,8(sp)
2040250e:	0141                	addi	sp,sp,16
20402510:	8082                	ret

20402512 <_fstat_r>:
_fstat_r():
20402512:	1141                	addi	sp,sp,-16
20402514:	c422                	sw	s0,8(sp)
20402516:	842a                	mv	s0,a0
20402518:	852e                	mv	a0,a1
2040251a:	85b2                	mv	a1,a2
2040251c:	8e01a423          	sw	zero,-1816(gp) # 800008b0 <errno>
20402520:	c606                	sw	ra,12(sp)
20402522:	63b050ef          	jal	ra,2040835c <_fstat>
20402526:	57fd                	li	a5,-1
20402528:	00f51763          	bne	a0,a5,20402536 <_fstat_r+0x24>
2040252c:	8e818793          	addi	a5,gp,-1816 # 800008b0 <errno>
20402530:	439c                	lw	a5,0(a5)
20402532:	c391                	beqz	a5,20402536 <_fstat_r+0x24>
20402534:	c01c                	sw	a5,0(s0)
20402536:	40b2                	lw	ra,12(sp)
20402538:	4422                	lw	s0,8(sp)
2040253a:	0141                	addi	sp,sp,16
2040253c:	8082                	ret

2040253e <_isatty_r>:
_isatty_r():
2040253e:	1141                	addi	sp,sp,-16
20402540:	c422                	sw	s0,8(sp)
20402542:	842a                	mv	s0,a0
20402544:	852e                	mv	a0,a1
20402546:	8e01a423          	sw	zero,-1816(gp) # 800008b0 <errno>
2040254a:	c606                	sw	ra,12(sp)
2040254c:	637050ef          	jal	ra,20408382 <_isatty>
20402550:	57fd                	li	a5,-1
20402552:	00f51763          	bne	a0,a5,20402560 <_isatty_r+0x22>
20402556:	8e818793          	addi	a5,gp,-1816 # 800008b0 <errno>
2040255a:	439c                	lw	a5,0(a5)
2040255c:	c391                	beqz	a5,20402560 <_isatty_r+0x22>
2040255e:	c01c                	sw	a5,0(s0)
20402560:	40b2                	lw	ra,12(sp)
20402562:	4422                	lw	s0,8(sp)
20402564:	0141                	addi	sp,sp,16
20402566:	8082                	ret

20402568 <_lseek_r>:
_lseek_r():
20402568:	1141                	addi	sp,sp,-16
2040256a:	c422                	sw	s0,8(sp)
2040256c:	842a                	mv	s0,a0
2040256e:	852e                	mv	a0,a1
20402570:	85b2                	mv	a1,a2
20402572:	8636                	mv	a2,a3
20402574:	8e01a423          	sw	zero,-1816(gp) # 800008b0 <errno>
20402578:	c606                	sw	ra,12(sp)
2040257a:	629050ef          	jal	ra,204083a2 <_lseek>
2040257e:	57fd                	li	a5,-1
20402580:	00f51763          	bne	a0,a5,2040258e <_lseek_r+0x26>
20402584:	8e818793          	addi	a5,gp,-1816 # 800008b0 <errno>
20402588:	439c                	lw	a5,0(a5)
2040258a:	c391                	beqz	a5,2040258e <_lseek_r+0x26>
2040258c:	c01c                	sw	a5,0(s0)
2040258e:	40b2                	lw	ra,12(sp)
20402590:	4422                	lw	s0,8(sp)
20402592:	0141                	addi	sp,sp,16
20402594:	8082                	ret

20402596 <memchr>:
memchr():
20402596:	0ff5f593          	andi	a1,a1,255
2040259a:	962a                	add	a2,a2,a0
2040259c:	00c51463          	bne	a0,a2,204025a4 <memchr+0xe>
204025a0:	4501                	li	a0,0
204025a2:	8082                	ret
204025a4:	00054783          	lbu	a5,0(a0)
204025a8:	feb78de3          	beq	a5,a1,204025a2 <memchr+0xc>
204025ac:	0505                	addi	a0,a0,1
204025ae:	b7fd                	j	2040259c <memchr+0x6>

204025b0 <__malloc_lock>:
__malloc_lock():
204025b0:	8082                	ret

204025b2 <__malloc_unlock>:
__malloc_unlock():
204025b2:	8082                	ret

204025b4 <_printf_common>:
_printf_common():
204025b4:	7179                	addi	sp,sp,-48
204025b6:	ca56                	sw	s5,20(sp)
204025b8:	499c                	lw	a5,16(a1)
204025ba:	8aba                	mv	s5,a4
204025bc:	4598                	lw	a4,8(a1)
204025be:	d422                	sw	s0,40(sp)
204025c0:	d226                	sw	s1,36(sp)
204025c2:	ce4e                	sw	s3,28(sp)
204025c4:	cc52                	sw	s4,24(sp)
204025c6:	d606                	sw	ra,44(sp)
204025c8:	d04a                	sw	s2,32(sp)
204025ca:	c85a                	sw	s6,16(sp)
204025cc:	c65e                	sw	s7,12(sp)
204025ce:	89aa                	mv	s3,a0
204025d0:	842e                	mv	s0,a1
204025d2:	84b2                	mv	s1,a2
204025d4:	8a36                	mv	s4,a3
204025d6:	00e7d363          	bge	a5,a4,204025dc <_printf_common+0x28>
204025da:	87ba                	mv	a5,a4
204025dc:	c09c                	sw	a5,0(s1)
204025de:	04344703          	lbu	a4,67(s0)
204025e2:	c319                	beqz	a4,204025e8 <_printf_common+0x34>
204025e4:	0785                	addi	a5,a5,1
204025e6:	c09c                	sw	a5,0(s1)
204025e8:	401c                	lw	a5,0(s0)
204025ea:	0207f793          	andi	a5,a5,32
204025ee:	c781                	beqz	a5,204025f6 <_printf_common+0x42>
204025f0:	409c                	lw	a5,0(s1)
204025f2:	0789                	addi	a5,a5,2
204025f4:	c09c                	sw	a5,0(s1)
204025f6:	00042903          	lw	s2,0(s0)
204025fa:	00697913          	andi	s2,s2,6
204025fe:	00091a63          	bnez	s2,20402612 <_printf_common+0x5e>
20402602:	01940b13          	addi	s6,s0,25
20402606:	5bfd                	li	s7,-1
20402608:	445c                	lw	a5,12(s0)
2040260a:	4098                	lw	a4,0(s1)
2040260c:	8f99                	sub	a5,a5,a4
2040260e:	04f94c63          	blt	s2,a5,20402666 <_printf_common+0xb2>
20402612:	401c                	lw	a5,0(s0)
20402614:	04344683          	lbu	a3,67(s0)
20402618:	0207f793          	andi	a5,a5,32
2040261c:	00d036b3          	snez	a3,a3
20402620:	eba5                	bnez	a5,20402690 <_printf_common+0xdc>
20402622:	04340613          	addi	a2,s0,67
20402626:	85d2                	mv	a1,s4
20402628:	854e                	mv	a0,s3
2040262a:	9a82                	jalr	s5
2040262c:	57fd                	li	a5,-1
2040262e:	04f50363          	beq	a0,a5,20402674 <_printf_common+0xc0>
20402632:	401c                	lw	a5,0(s0)
20402634:	4611                	li	a2,4
20402636:	4098                	lw	a4,0(s1)
20402638:	8b99                	andi	a5,a5,6
2040263a:	4454                	lw	a3,12(s0)
2040263c:	4481                	li	s1,0
2040263e:	00c79763          	bne	a5,a2,2040264c <_printf_common+0x98>
20402642:	40e684b3          	sub	s1,a3,a4
20402646:	0004d363          	bgez	s1,2040264c <_printf_common+0x98>
2040264a:	4481                	li	s1,0
2040264c:	441c                	lw	a5,8(s0)
2040264e:	4818                	lw	a4,16(s0)
20402650:	00f75463          	bge	a4,a5,20402658 <_printf_common+0xa4>
20402654:	8f99                	sub	a5,a5,a4
20402656:	94be                	add	s1,s1,a5
20402658:	4901                	li	s2,0
2040265a:	0469                	addi	s0,s0,26
2040265c:	5b7d                	li	s6,-1
2040265e:	05249863          	bne	s1,s2,204026ae <_printf_common+0xfa>
20402662:	4501                	li	a0,0
20402664:	a809                	j	20402676 <_printf_common+0xc2>
20402666:	4685                	li	a3,1
20402668:	865a                	mv	a2,s6
2040266a:	85d2                	mv	a1,s4
2040266c:	854e                	mv	a0,s3
2040266e:	9a82                	jalr	s5
20402670:	01751e63          	bne	a0,s7,2040268c <_printf_common+0xd8>
20402674:	557d                	li	a0,-1
20402676:	50b2                	lw	ra,44(sp)
20402678:	5422                	lw	s0,40(sp)
2040267a:	5492                	lw	s1,36(sp)
2040267c:	5902                	lw	s2,32(sp)
2040267e:	49f2                	lw	s3,28(sp)
20402680:	4a62                	lw	s4,24(sp)
20402682:	4ad2                	lw	s5,20(sp)
20402684:	4b42                	lw	s6,16(sp)
20402686:	4bb2                	lw	s7,12(sp)
20402688:	6145                	addi	sp,sp,48
2040268a:	8082                	ret
2040268c:	0905                	addi	s2,s2,1
2040268e:	bfad                	j	20402608 <_printf_common+0x54>
20402690:	00d40733          	add	a4,s0,a3
20402694:	03000613          	li	a2,48
20402698:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffb78f>
2040269c:	04544703          	lbu	a4,69(s0)
204026a0:	00168793          	addi	a5,a3,1
204026a4:	97a2                	add	a5,a5,s0
204026a6:	0689                	addi	a3,a3,2
204026a8:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
204026ac:	bf9d                	j	20402622 <_printf_common+0x6e>
204026ae:	4685                	li	a3,1
204026b0:	8622                	mv	a2,s0
204026b2:	85d2                	mv	a1,s4
204026b4:	854e                	mv	a0,s3
204026b6:	9a82                	jalr	s5
204026b8:	fb650ee3          	beq	a0,s6,20402674 <_printf_common+0xc0>
204026bc:	0905                	addi	s2,s2,1
204026be:	b745                	j	2040265e <_printf_common+0xaa>

204026c0 <_printf_i>:
_printf_i():
204026c0:	7179                	addi	sp,sp,-48
204026c2:	d422                	sw	s0,40(sp)
204026c4:	d226                	sw	s1,36(sp)
204026c6:	d04a                	sw	s2,32(sp)
204026c8:	ce4e                	sw	s3,28(sp)
204026ca:	d606                	sw	ra,44(sp)
204026cc:	cc52                	sw	s4,24(sp)
204026ce:	ca56                	sw	s5,20(sp)
204026d0:	c85a                	sw	s6,16(sp)
204026d2:	89b6                	mv	s3,a3
204026d4:	0185c683          	lbu	a3,24(a1)
204026d8:	06e00793          	li	a5,110
204026dc:	8932                	mv	s2,a2
204026de:	84aa                	mv	s1,a0
204026e0:	842e                	mv	s0,a1
204026e2:	04358613          	addi	a2,a1,67
204026e6:	1ef68063          	beq	a3,a5,204028c6 <_printf_i+0x206>
204026ea:	06d7e263          	bltu	a5,a3,2040274e <_printf_i+0x8e>
204026ee:	06300793          	li	a5,99
204026f2:	0af68263          	beq	a3,a5,20402796 <_printf_i+0xd6>
204026f6:	00d7ed63          	bltu	a5,a3,20402710 <_printf_i+0x50>
204026fa:	1e068a63          	beqz	a3,204028ee <_printf_i+0x22e>
204026fe:	05800793          	li	a5,88
20402702:	16f68663          	beq	a3,a5,2040286e <_printf_i+0x1ae>
20402706:	04240a93          	addi	s5,s0,66
2040270a:	04d40123          	sb	a3,66(s0)
2040270e:	a869                	j	204027a8 <_printf_i+0xe8>
20402710:	06400793          	li	a5,100
20402714:	00f68663          	beq	a3,a5,20402720 <_printf_i+0x60>
20402718:	06900793          	li	a5,105
2040271c:	fef695e3          	bne	a3,a5,20402706 <_printf_i+0x46>
20402720:	401c                	lw	a5,0(s0)
20402722:	4308                	lw	a0,0(a4)
20402724:	0807f693          	andi	a3,a5,128
20402728:	00450593          	addi	a1,a0,4
2040272c:	c2c1                	beqz	a3,204027ac <_printf_i+0xec>
2040272e:	411c                	lw	a5,0(a0)
20402730:	c30c                	sw	a1,0(a4)
20402732:	0007d863          	bgez	a5,20402742 <_printf_i+0x82>
20402736:	02d00713          	li	a4,45
2040273a:	40f007b3          	neg	a5,a5
2040273e:	04e401a3          	sb	a4,67(s0)
20402742:	00043697          	auipc	a3,0x43
20402746:	e6e68693          	addi	a3,a3,-402 # 204455b0 <__sf_fake_stdout+0x34>
2040274a:	4729                	li	a4,10
2040274c:	a065                	j	204027f4 <_printf_i+0x134>
2040274e:	07300793          	li	a5,115
20402752:	1af68263          	beq	a3,a5,204028f6 <_printf_i+0x236>
20402756:	00d7ef63          	bltu	a5,a3,20402774 <_printf_i+0xb4>
2040275a:	06f00793          	li	a5,111
2040275e:	04f68f63          	beq	a3,a5,204027bc <_printf_i+0xfc>
20402762:	07000793          	li	a5,112
20402766:	faf690e3          	bne	a3,a5,20402706 <_printf_i+0x46>
2040276a:	419c                	lw	a5,0(a1)
2040276c:	0207e793          	ori	a5,a5,32
20402770:	c19c                	sw	a5,0(a1)
20402772:	a809                	j	20402784 <_printf_i+0xc4>
20402774:	07500793          	li	a5,117
20402778:	04f68263          	beq	a3,a5,204027bc <_printf_i+0xfc>
2040277c:	07800793          	li	a5,120
20402780:	f8f693e3          	bne	a3,a5,20402706 <_printf_i+0x46>
20402784:	07800793          	li	a5,120
20402788:	04f402a3          	sb	a5,69(s0)
2040278c:	00043697          	auipc	a3,0x43
20402790:	e3868693          	addi	a3,a3,-456 # 204455c4 <__sf_fake_stdout+0x48>
20402794:	a0dd                	j	2040287a <_printf_i+0x1ba>
20402796:	431c                	lw	a5,0(a4)
20402798:	04258a93          	addi	s5,a1,66
2040279c:	00478693          	addi	a3,a5,4
204027a0:	439c                	lw	a5,0(a5)
204027a2:	c314                	sw	a3,0(a4)
204027a4:	04f58123          	sb	a5,66(a1)
204027a8:	4785                	li	a5,1
204027aa:	a2ad                	j	20402914 <_printf_i+0x254>
204027ac:	0407f693          	andi	a3,a5,64
204027b0:	411c                	lw	a5,0(a0)
204027b2:	c30c                	sw	a1,0(a4)
204027b4:	debd                	beqz	a3,20402732 <_printf_i+0x72>
204027b6:	07c2                	slli	a5,a5,0x10
204027b8:	87c1                	srai	a5,a5,0x10
204027ba:	bfa5                	j	20402732 <_printf_i+0x72>
204027bc:	400c                	lw	a1,0(s0)
204027be:	431c                	lw	a5,0(a4)
204027c0:	0805f813          	andi	a6,a1,128
204027c4:	00478513          	addi	a0,a5,4
204027c8:	00080563          	beqz	a6,204027d2 <_printf_i+0x112>
204027cc:	c308                	sw	a0,0(a4)
204027ce:	439c                	lw	a5,0(a5)
204027d0:	a039                	j	204027de <_printf_i+0x11e>
204027d2:	0405f593          	andi	a1,a1,64
204027d6:	c308                	sw	a0,0(a4)
204027d8:	d9fd                	beqz	a1,204027ce <_printf_i+0x10e>
204027da:	0007d783          	lhu	a5,0(a5)
204027de:	06f00713          	li	a4,111
204027e2:	0ce68a63          	beq	a3,a4,204028b6 <_printf_i+0x1f6>
204027e6:	00043697          	auipc	a3,0x43
204027ea:	dca68693          	addi	a3,a3,-566 # 204455b0 <__sf_fake_stdout+0x34>
204027ee:	4729                	li	a4,10
204027f0:	040401a3          	sb	zero,67(s0)
204027f4:	404c                	lw	a1,4(s0)
204027f6:	c40c                	sw	a1,8(s0)
204027f8:	0005c563          	bltz	a1,20402802 <_printf_i+0x142>
204027fc:	4008                	lw	a0,0(s0)
204027fe:	996d                	andi	a0,a0,-5
20402800:	c008                	sw	a0,0(s0)
20402802:	e399                	bnez	a5,20402808 <_printf_i+0x148>
20402804:	8ab2                	mv	s5,a2
20402806:	cd91                	beqz	a1,20402822 <_printf_i+0x162>
20402808:	8ab2                	mv	s5,a2
2040280a:	02e7f5b3          	remu	a1,a5,a4
2040280e:	1afd                	addi	s5,s5,-1
20402810:	95b6                	add	a1,a1,a3
20402812:	0005c583          	lbu	a1,0(a1)
20402816:	00ba8023          	sb	a1,0(s5)
2040281a:	02e7d5b3          	divu	a1,a5,a4
2040281e:	0ae7f263          	bgeu	a5,a4,204028c2 <_printf_i+0x202>
20402822:	47a1                	li	a5,8
20402824:	00f71e63          	bne	a4,a5,20402840 <_printf_i+0x180>
20402828:	401c                	lw	a5,0(s0)
2040282a:	8b85                	andi	a5,a5,1
2040282c:	cb91                	beqz	a5,20402840 <_printf_i+0x180>
2040282e:	4058                	lw	a4,4(s0)
20402830:	481c                	lw	a5,16(s0)
20402832:	00e7c763          	blt	a5,a4,20402840 <_printf_i+0x180>
20402836:	03000793          	li	a5,48
2040283a:	fefa8fa3          	sb	a5,-1(s5)
2040283e:	1afd                	addi	s5,s5,-1
20402840:	41560633          	sub	a2,a2,s5
20402844:	c810                	sw	a2,16(s0)
20402846:	874e                	mv	a4,s3
20402848:	86ca                	mv	a3,s2
2040284a:	0070                	addi	a2,sp,12
2040284c:	85a2                	mv	a1,s0
2040284e:	8526                	mv	a0,s1
20402850:	3395                	jal	204025b4 <_printf_common>
20402852:	5a7d                	li	s4,-1
20402854:	0d451463          	bne	a0,s4,2040291c <_printf_i+0x25c>
20402858:	557d                	li	a0,-1
2040285a:	50b2                	lw	ra,44(sp)
2040285c:	5422                	lw	s0,40(sp)
2040285e:	5492                	lw	s1,36(sp)
20402860:	5902                	lw	s2,32(sp)
20402862:	49f2                	lw	s3,28(sp)
20402864:	4a62                	lw	s4,24(sp)
20402866:	4ad2                	lw	s5,20(sp)
20402868:	4b42                	lw	s6,16(sp)
2040286a:	6145                	addi	sp,sp,48
2040286c:	8082                	ret
2040286e:	04d582a3          	sb	a3,69(a1)
20402872:	00043697          	auipc	a3,0x43
20402876:	d3e68693          	addi	a3,a3,-706 # 204455b0 <__sf_fake_stdout+0x34>
2040287a:	400c                	lw	a1,0(s0)
2040287c:	4308                	lw	a0,0(a4)
2040287e:	0805f813          	andi	a6,a1,128
20402882:	411c                	lw	a5,0(a0)
20402884:	0511                	addi	a0,a0,4
20402886:	02080063          	beqz	a6,204028a6 <_printf_i+0x1e6>
2040288a:	c308                	sw	a0,0(a4)
2040288c:	0015f713          	andi	a4,a1,1
20402890:	c701                	beqz	a4,20402898 <_printf_i+0x1d8>
20402892:	0205e593          	ori	a1,a1,32
20402896:	c00c                	sw	a1,0(s0)
20402898:	4741                	li	a4,16
2040289a:	fbb9                	bnez	a5,204027f0 <_printf_i+0x130>
2040289c:	400c                	lw	a1,0(s0)
2040289e:	fdf5f593          	andi	a1,a1,-33
204028a2:	c00c                	sw	a1,0(s0)
204028a4:	b7b1                	j	204027f0 <_printf_i+0x130>
204028a6:	0405f813          	andi	a6,a1,64
204028aa:	c308                	sw	a0,0(a4)
204028ac:	fe0800e3          	beqz	a6,2040288c <_printf_i+0x1cc>
204028b0:	07c2                	slli	a5,a5,0x10
204028b2:	83c1                	srli	a5,a5,0x10
204028b4:	bfe1                	j	2040288c <_printf_i+0x1cc>
204028b6:	00043697          	auipc	a3,0x43
204028ba:	cfa68693          	addi	a3,a3,-774 # 204455b0 <__sf_fake_stdout+0x34>
204028be:	4721                	li	a4,8
204028c0:	bf05                	j	204027f0 <_printf_i+0x130>
204028c2:	87ae                	mv	a5,a1
204028c4:	b799                	j	2040280a <_printf_i+0x14a>
204028c6:	4194                	lw	a3,0(a1)
204028c8:	431c                	lw	a5,0(a4)
204028ca:	49cc                	lw	a1,20(a1)
204028cc:	0806f813          	andi	a6,a3,128
204028d0:	00478513          	addi	a0,a5,4
204028d4:	00080663          	beqz	a6,204028e0 <_printf_i+0x220>
204028d8:	c308                	sw	a0,0(a4)
204028da:	439c                	lw	a5,0(a5)
204028dc:	c38c                	sw	a1,0(a5)
204028de:	a801                	j	204028ee <_printf_i+0x22e>
204028e0:	c308                	sw	a0,0(a4)
204028e2:	0406f693          	andi	a3,a3,64
204028e6:	439c                	lw	a5,0(a5)
204028e8:	daf5                	beqz	a3,204028dc <_printf_i+0x21c>
204028ea:	00b79023          	sh	a1,0(a5)
204028ee:	00042823          	sw	zero,16(s0)
204028f2:	8ab2                	mv	s5,a2
204028f4:	bf89                	j	20402846 <_printf_i+0x186>
204028f6:	431c                	lw	a5,0(a4)
204028f8:	41d0                	lw	a2,4(a1)
204028fa:	4581                	li	a1,0
204028fc:	00478693          	addi	a3,a5,4
20402900:	c314                	sw	a3,0(a4)
20402902:	0007aa83          	lw	s5,0(a5)
20402906:	8556                	mv	a0,s5
20402908:	3179                	jal	20402596 <memchr>
2040290a:	c501                	beqz	a0,20402912 <_printf_i+0x252>
2040290c:	41550533          	sub	a0,a0,s5
20402910:	c048                	sw	a0,4(s0)
20402912:	405c                	lw	a5,4(s0)
20402914:	c81c                	sw	a5,16(s0)
20402916:	040401a3          	sb	zero,67(s0)
2040291a:	b735                	j	20402846 <_printf_i+0x186>
2040291c:	4814                	lw	a3,16(s0)
2040291e:	8656                	mv	a2,s5
20402920:	85ca                	mv	a1,s2
20402922:	8526                	mv	a0,s1
20402924:	9982                	jalr	s3
20402926:	f34509e3          	beq	a0,s4,20402858 <_printf_i+0x198>
2040292a:	401c                	lw	a5,0(s0)
2040292c:	8b89                	andi	a5,a5,2
2040292e:	e78d                	bnez	a5,20402958 <_printf_i+0x298>
20402930:	47b2                	lw	a5,12(sp)
20402932:	4448                	lw	a0,12(s0)
20402934:	f2f553e3          	bge	a0,a5,2040285a <_printf_i+0x19a>
20402938:	853e                	mv	a0,a5
2040293a:	b705                	j	2040285a <_printf_i+0x19a>
2040293c:	4685                	li	a3,1
2040293e:	8656                	mv	a2,s5
20402940:	85ca                	mv	a1,s2
20402942:	8526                	mv	a0,s1
20402944:	9982                	jalr	s3
20402946:	f16509e3          	beq	a0,s6,20402858 <_printf_i+0x198>
2040294a:	0a05                	addi	s4,s4,1
2040294c:	445c                	lw	a5,12(s0)
2040294e:	4732                	lw	a4,12(sp)
20402950:	8f99                	sub	a5,a5,a4
20402952:	fefa45e3          	blt	s4,a5,2040293c <_printf_i+0x27c>
20402956:	bfe9                	j	20402930 <_printf_i+0x270>
20402958:	4a01                	li	s4,0
2040295a:	01940a93          	addi	s5,s0,25
2040295e:	5b7d                	li	s6,-1
20402960:	b7f5                	j	2040294c <_printf_i+0x28c>

20402962 <_read_r>:
_read_r():
20402962:	1141                	addi	sp,sp,-16
20402964:	c422                	sw	s0,8(sp)
20402966:	842a                	mv	s0,a0
20402968:	852e                	mv	a0,a1
2040296a:	85b2                	mv	a1,a2
2040296c:	8636                	mv	a2,a3
2040296e:	8e01a423          	sw	zero,-1816(gp) # 800008b0 <errno>
20402972:	c606                	sw	ra,12(sp)
20402974:	259050ef          	jal	ra,204083cc <_read>
20402978:	57fd                	li	a5,-1
2040297a:	00f51763          	bne	a0,a5,20402988 <_read_r+0x26>
2040297e:	8e818793          	addi	a5,gp,-1816 # 800008b0 <errno>
20402982:	439c                	lw	a5,0(a5)
20402984:	c391                	beqz	a5,20402988 <_read_r+0x26>
20402986:	c01c                	sw	a5,0(s0)
20402988:	40b2                	lw	ra,12(sp)
2040298a:	4422                	lw	s0,8(sp)
2040298c:	0141                	addi	sp,sp,16
2040298e:	8082                	ret

20402990 <__addsf3>:
__addsf3():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
20402990:	00800737          	lui	a4,0x800
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
20402994:	1141                	addi	sp,sp,-16
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
20402996:	177d                	addi	a4,a4,-1
20402998:	00a777b3          	and	a5,a4,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
2040299c:	c226                	sw	s1,4(sp)
2040299e:	c04a                	sw	s2,0(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
204029a0:	01f55493          	srli	s1,a0,0x1f
204029a4:	01755913          	srli	s2,a0,0x17
204029a8:	0175d513          	srli	a0,a1,0x17
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
204029ac:	8f6d                	and	a4,a4,a1
204029ae:	0ff97913          	andi	s2,s2,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
204029b2:	0ff57513          	andi	a0,a0,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
204029b6:	c606                	sw	ra,12(sp)
204029b8:	c422                	sw	s0,8(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
204029ba:	81fd                	srli	a1,a1,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
204029bc:	078e                	slli	a5,a5,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
204029be:	070e                	slli	a4,a4,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
204029c0:	40a906b3          	sub	a3,s2,a0
204029c4:	12b49263          	bne	s1,a1,20402ae8 <__addsf3+0x158>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 7)
204029c8:	06d05a63          	blez	a3,20402a3c <__addsf3+0xac>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 9)
204029cc:	e121                	bnez	a0,20402a0c <__addsf3+0x7c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 11)
204029ce:	26070863          	beqz	a4,20402c3e <__addsf3+0x2ae>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 14)
204029d2:	16fd                	addi	a3,a3,-1
204029d4:	e68d                	bnez	a3,204029fe <__addsf3+0x6e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 59)
204029d6:	97ba                	add	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 59)
204029d8:	854a                	mv	a0,s2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 112)
204029da:	00579713          	slli	a4,a5,0x5
204029de:	0c075963          	bgez	a4,20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 171)
204029e2:	0505                	addi	a0,a0,1
204029e4:	0ff00713          	li	a4,255
204029e8:	26e50163          	beq	a0,a4,20402c4a <__addsf3+0x2ba>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
204029ec:	7e000737          	lui	a4,0x7e000
204029f0:	0017f693          	andi	a3,a5,1
204029f4:	177d                	addi	a4,a4,-1
204029f6:	8385                	srli	a5,a5,0x1
204029f8:	8ff9                	and	a5,a5,a4
204029fa:	8fd5                	or	a5,a5,a3
204029fc:	a855                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 24)
204029fe:	0ff00613          	li	a2,255
20402a02:	00c91c63          	bne	s2,a2,20402a1a <__addsf3+0x8a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402a06:	0ff00513          	li	a0,255
20402a0a:	a05d                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 12)
20402a0c:	0ff00613          	li	a2,255
20402a10:	fec90be3          	beq	s2,a2,20402a06 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 38)
20402a14:	04000637          	lui	a2,0x4000
20402a18:	8f51                	or	a4,a4,a2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402a1a:	466d                	li	a2,27
20402a1c:	00d65463          	bge	a2,a3,20402a24 <__addsf3+0x94>
20402a20:	4705                	li	a4,1
20402a22:	bf55                	j	204029d6 <__addsf3+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 48)
20402a24:	02000613          	li	a2,32
20402a28:	00d755b3          	srl	a1,a4,a3
20402a2c:	40d606b3          	sub	a3,a2,a3
20402a30:	00d71733          	sll	a4,a4,a3
20402a34:	00e03733          	snez	a4,a4
20402a38:	8f4d                	or	a4,a4,a1
20402a3a:	bf71                	j	204029d6 <__addsf3+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 10)
20402a3c:	c6b9                	beqz	a3,20402a8a <__addsf3+0xfa>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 61)
20402a3e:	41250633          	sub	a2,a0,s2
20402a42:	00091d63          	bnez	s2,20402a5c <__addsf3+0xcc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 63)
20402a46:	cb89                	beqz	a5,20402a58 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 66)
20402a48:	167d                	addi	a2,a2,-1
20402a4a:	e219                	bnez	a2,20402a50 <__addsf3+0xc0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 111)
20402a4c:	97ba                	add	a5,a5,a4
20402a4e:	b771                	j	204029da <__addsf3+0x4a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 76)
20402a50:	0ff00693          	li	a3,255
20402a54:	00d51b63          	bne	a0,a3,20402a6a <__addsf3+0xda>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
20402a58:	87ba                	mv	a5,a4
20402a5a:	a899                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 64)
20402a5c:	0ff00693          	li	a3,255
20402a60:	fed50ce3          	beq	a0,a3,20402a58 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 90)
20402a64:	040006b7          	lui	a3,0x4000
20402a68:	8fd5                	or	a5,a5,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402a6a:	46ed                	li	a3,27
20402a6c:	00c6d463          	bge	a3,a2,20402a74 <__addsf3+0xe4>
20402a70:	4785                	li	a5,1
20402a72:	bfe9                	j	20402a4c <__addsf3+0xbc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 100)
20402a74:	02000693          	li	a3,32
20402a78:	8e91                	sub	a3,a3,a2
20402a7a:	00c7d5b3          	srl	a1,a5,a2
20402a7e:	00d797b3          	sll	a5,a5,a3
20402a82:	00f037b3          	snez	a5,a5
20402a86:	8fcd                	or	a5,a5,a1
20402a88:	b7d1                	j	20402a4c <__addsf3+0xbc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 62)
20402a8a:	00190693          	addi	a3,s2,1
20402a8e:	0fe6f513          	andi	a0,a3,254
20402a92:	e139                	bnez	a0,20402ad8 <__addsf3+0x148>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 113)
20402a94:	02091963          	bnez	s2,20402ac6 <__addsf3+0x136>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 115)
20402a98:	d3e1                	beqz	a5,20402a58 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 118)
20402a9a:	cb19                	beqz	a4,20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 124)
20402a9c:	97ba                	add	a5,a5,a4
20402a9e:	00579713          	slli	a4,a5,0x5
20402aa2:	00075763          	bgez	a4,20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 126)
20402aa6:	fc000737          	lui	a4,0xfc000
20402aaa:	177d                	addi	a4,a4,-1
20402aac:	8ff9                	and	a5,a5,a4
20402aae:	4505                	li	a0,1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 376)
20402ab0:	0077f713          	andi	a4,a5,7
20402ab4:	18070c63          	beqz	a4,20402c4c <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 37)
20402ab8:	00f7f713          	andi	a4,a5,15
20402abc:	4691                	li	a3,4
20402abe:	18d70763          	beq	a4,a3,20402c4c <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 44)
20402ac2:	0791                	addi	a5,a5,4
20402ac4:	a261                	j	20402c4c <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 143)
20402ac6:	16078e63          	beqz	a5,20402c42 <__addsf3+0x2b2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 329)
20402aca:	df15                	beqz	a4,20402a06 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402acc:	4481                	li	s1,0
20402ace:	020007b7          	lui	a5,0x2000
20402ad2:	0ff00513          	li	a0,255
20402ad6:	aa9d                	j	20402c4c <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 114)
20402ad8:	0ff00613          	li	a2,255
20402adc:	16c68563          	beq	a3,a2,20402c46 <__addsf3+0x2b6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402ae0:	97ba                	add	a5,a5,a4
20402ae2:	8385                	srli	a5,a5,0x1
20402ae4:	8536                	mv	a0,a3
20402ae6:	b7e9                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 8)
20402ae8:	06d05563          	blez	a3,20402b52 <__addsf3+0x1c2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 189)
20402aec:	e91d                	bnez	a0,20402b22 <__addsf3+0x192>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 191)
20402aee:	854a                	mv	a0,s2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 191)
20402af0:	d361                	beqz	a4,20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 194)
20402af2:	16fd                	addi	a3,a3,-1
20402af4:	ee81                	bnez	a3,20402b0c <__addsf3+0x17c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 203)
20402af6:	8f99                	sub	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 292)
20402af8:	00579713          	slli	a4,a5,0x5
20402afc:	fa075ae3          	bgez	a4,20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 351)
20402b00:	04000437          	lui	s0,0x4000
20402b04:	147d                	addi	s0,s0,-1
20402b06:	8c7d                	and	s0,s0,a5
20402b08:	892a                	mv	s2,a0
20402b0a:	a8c5                	j	20402bfa <__addsf3+0x26a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 204)
20402b0c:	0ff00613          	li	a2,255
20402b10:	0ff00513          	li	a0,255
20402b14:	f8c90ee3          	beq	s2,a2,20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402b18:	466d                	li	a2,27
20402b1a:	00d65e63          	bge	a2,a3,20402b36 <__addsf3+0x1a6>
20402b1e:	4705                	li	a4,1
20402b20:	a035                	j	20402b4c <__addsf3+0x1bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 192)
20402b22:	0ff00613          	li	a2,255
20402b26:	0ff00513          	li	a0,255
20402b2a:	f8c903e3          	beq	s2,a2,20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 218)
20402b2e:	04000637          	lui	a2,0x4000
20402b32:	8f51                	or	a4,a4,a2
20402b34:	b7d5                	j	20402b18 <__addsf3+0x188>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 228)
20402b36:	02000613          	li	a2,32
20402b3a:	00d755b3          	srl	a1,a4,a3
20402b3e:	40d606b3          	sub	a3,a2,a3
20402b42:	00d71733          	sll	a4,a4,a3
20402b46:	00e03733          	snez	a4,a4
20402b4a:	8f4d                	or	a4,a4,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 239)
20402b4c:	8f99                	sub	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 239)
20402b4e:	854a                	mv	a0,s2
20402b50:	b765                	j	20402af8 <__addsf3+0x168>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 190)
20402b52:	cab9                	beqz	a3,20402ba8 <__addsf3+0x218>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 241)
20402b54:	41250633          	sub	a2,a0,s2
20402b58:	02091063          	bnez	s2,20402b78 <__addsf3+0x1e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 243)
20402b5c:	cb99                	beqz	a5,20402b72 <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 246)
20402b5e:	167d                	addi	a2,a2,-1
20402b60:	e609                	bnez	a2,20402b6a <__addsf3+0x1da>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 291)
20402b62:	40f707b3          	sub	a5,a4,a5
20402b66:	84ae                	mv	s1,a1
20402b68:	bf41                	j	20402af8 <__addsf3+0x168>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 256)
20402b6a:	0ff00693          	li	a3,255
20402b6e:	00d51c63          	bne	a0,a3,20402b86 <__addsf3+0x1f6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
20402b72:	87ba                	mv	a5,a4
20402b74:	84ae                	mv	s1,a1
20402b76:	bf2d                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 244)
20402b78:	0ff00693          	li	a3,255
20402b7c:	fed50be3          	beq	a0,a3,20402b72 <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 270)
20402b80:	040006b7          	lui	a3,0x4000
20402b84:	8fd5                	or	a5,a5,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402b86:	46ed                	li	a3,27
20402b88:	00c6d463          	bge	a3,a2,20402b90 <__addsf3+0x200>
20402b8c:	4785                	li	a5,1
20402b8e:	bfd1                	j	20402b62 <__addsf3+0x1d2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 280)
20402b90:	02000693          	li	a3,32
20402b94:	8e91                	sub	a3,a3,a2
20402b96:	00c7d833          	srl	a6,a5,a2
20402b9a:	00d797b3          	sll	a5,a5,a3
20402b9e:	00f037b3          	snez	a5,a5
20402ba2:	00f867b3          	or	a5,a6,a5
20402ba6:	bf75                	j	20402b62 <__addsf3+0x1d2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 242)
20402ba8:	00190513          	addi	a0,s2,1
20402bac:	0fe57513          	andi	a0,a0,254
20402bb0:	ed05                	bnez	a0,20402be8 <__addsf3+0x258>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 293)
20402bb2:	02091463          	bnez	s2,20402bda <__addsf3+0x24a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 295)
20402bb6:	e789                	bnez	a5,20402bc0 <__addsf3+0x230>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 297)
20402bb8:	ff4d                	bnez	a4,20402b72 <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402bba:	4781                	li	a5,0
20402bbc:	4481                	li	s1,0
20402bbe:	a079                	j	20402c4c <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 298)
20402bc0:	ee0708e3          	beqz	a4,20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 305)
20402bc4:	40e786b3          	sub	a3,a5,a4
20402bc8:	00569613          	slli	a2,a3,0x5
20402bcc:	40f707b3          	sub	a5,a4,a5
20402bd0:	fa0642e3          	bltz	a2,20402b74 <__addsf3+0x1e4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 308)
20402bd4:	d2fd                	beqz	a3,20402bba <__addsf3+0x22a>
20402bd6:	87b6                	mv	a5,a3
20402bd8:	bde1                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 327)
20402bda:	ee0798e3          	bnez	a5,20402aca <__addsf3+0x13a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 328)
20402bde:	ee0707e3          	beqz	a4,20402acc <__addsf3+0x13c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402be2:	87ba                	mv	a5,a4
20402be4:	84ae                	mv	s1,a1
20402be6:	b505                	j	20402a06 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 294)
20402be8:	40e78433          	sub	s0,a5,a4
20402bec:	00541693          	slli	a3,s0,0x5
20402bf0:	0206dc63          	bgez	a3,20402c28 <__addsf3+0x298>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 344)
20402bf4:	40f70433          	sub	s0,a4,a5
20402bf8:	84ae                	mv	s1,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 354)
20402bfa:	8522                	mv	a0,s0
20402bfc:	2dcd                	jal	204032ee <__clzsi2>
20402bfe:	156d                	addi	a0,a0,-5
20402c00:	00a41433          	sll	s0,s0,a0
20402c04:	03254663          	blt	a0,s2,20402c30 <__addsf3+0x2a0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 367)
20402c08:	41250533          	sub	a0,a0,s2
20402c0c:	0505                	addi	a0,a0,1
20402c0e:	02000713          	li	a4,32
20402c12:	00a457b3          	srl	a5,s0,a0
20402c16:	40a70533          	sub	a0,a4,a0
20402c1a:	00a41433          	sll	s0,s0,a0
20402c1e:	00803433          	snez	s0,s0
20402c22:	8fc1                	or	a5,a5,s0
20402c24:	4501                	li	a0,0
20402c26:	b569                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 345)
20402c28:	f869                	bnez	s0,20402bfa <__addsf3+0x26a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20402c2a:	4781                	li	a5,0
20402c2c:	4501                	li	a0,0
20402c2e:	b779                	j	20402bbc <__addsf3+0x22c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 368)
20402c30:	fc0007b7          	lui	a5,0xfc000
20402c34:	17fd                	addi	a5,a5,-1
20402c36:	40a90533          	sub	a0,s2,a0
20402c3a:	8fe1                	and	a5,a5,s0
20402c3c:	bd95                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
20402c3e:	854a                	mv	a0,s2
20402c40:	bd85                	j	20402ab0 <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
20402c42:	87ba                	mv	a5,a4
20402c44:	b3c9                	j	20402a06 <__addsf3+0x76>
20402c46:	0ff00513          	li	a0,255
20402c4a:	4781                	li	a5,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 47)
20402c4c:	00579713          	slli	a4,a5,0x5
20402c50:	00075b63          	bgez	a4,20402c66 <__addsf3+0x2d6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 63)
20402c54:	0505                	addi	a0,a0,1
20402c56:	0ff00713          	li	a4,255
20402c5a:	02e50f63          	beq	a0,a4,20402c98 <__addsf3+0x308>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47
20402c5e:	fc000737          	lui	a4,0xfc000
20402c62:	177d                	addi	a4,a4,-1
20402c64:	8ff9                	and	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 79)
20402c66:	0ff00713          	li	a4,255
20402c6a:	838d                	srli	a5,a5,0x3
20402c6c:	00e51663          	bne	a0,a4,20402c78 <__addsf3+0x2e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 80)
20402c70:	c781                	beqz	a5,20402c78 <__addsf3+0x2e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47
20402c72:	004007b7          	lui	a5,0x400
20402c76:	4481                	li	s1,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 90)
20402c78:	0ff57513          	andi	a0,a0,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:51 (discriminator 90)
20402c7c:	40b2                	lw	ra,12(sp)
20402c7e:	4422                	lw	s0,8(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 90)
20402c80:	07a6                	slli	a5,a5,0x9
20402c82:	01751713          	slli	a4,a0,0x17
20402c86:	0097d513          	srli	a0,a5,0x9
20402c8a:	04fe                	slli	s1,s1,0x1f
20402c8c:	8d59                	or	a0,a0,a4
20402c8e:	8d45                	or	a0,a0,s1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:51 (discriminator 90)
20402c90:	4902                	lw	s2,0(sp)
20402c92:	4492                	lw	s1,4(sp)
20402c94:	0141                	addi	sp,sp,16
20402c96:	8082                	ret
20402c98:	4781                	li	a5,0
20402c9a:	b7f1                	j	20402c66 <__addsf3+0x2d6>

20402c9c <__divsf3>:
__divsf3():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:36
20402c9c:	1101                	addi	sp,sp,-32
20402c9e:	ca26                	sw	s1,20(sp)
20402ca0:	01755493          	srli	s1,a0,0x17
20402ca4:	c84a                	sw	s2,16(sp)
20402ca6:	c64e                	sw	s3,12(sp)
20402ca8:	c452                	sw	s4,8(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44
20402caa:	00951993          	slli	s3,a0,0x9
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:36
20402cae:	ce06                	sw	ra,28(sp)
20402cb0:	cc22                	sw	s0,24(sp)
20402cb2:	c256                	sw	s5,4(sp)
20402cb4:	0ff4f493          	andi	s1,s1,255
20402cb8:	8a2e                	mv	s4,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44
20402cba:	0099d993          	srli	s3,s3,0x9
20402cbe:	01f55913          	srli	s2,a0,0x1f
20402cc2:	c4b5                	beqz	s1,20402d2e <__divsf3+0x92>
20402cc4:	0ff00793          	li	a5,255
20402cc8:	06f48f63          	beq	s1,a5,20402d46 <__divsf3+0xaa>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44 (discriminator 1)
20402ccc:	098e                	slli	s3,s3,0x3
20402cce:	040007b7          	lui	a5,0x4000
20402cd2:	00f9e9b3          	or	s3,s3,a5
20402cd6:	f8148493          	addi	s1,s1,-127
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44 (discriminator 14)
20402cda:	4a81                	li	s5,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:45
20402cdc:	017a5513          	srli	a0,s4,0x17
20402ce0:	009a1413          	slli	s0,s4,0x9
20402ce4:	0ff57513          	andi	a0,a0,255
20402ce8:	8025                	srli	s0,s0,0x9
20402cea:	01fa5a13          	srli	s4,s4,0x1f
20402cee:	c535                	beqz	a0,20402d5a <__divsf3+0xbe>
20402cf0:	0ff00793          	li	a5,255
20402cf4:	06f50f63          	beq	a0,a5,20402d72 <__divsf3+0xd6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:45 (discriminator 1)
20402cf8:	040e                	slli	s0,s0,0x3
20402cfa:	040007b7          	lui	a5,0x4000
20402cfe:	8c5d                	or	s0,s0,a5
20402d00:	f8150513          	addi	a0,a0,-127
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:45 (discriminator 14)
20402d04:	4781                	li	a5,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46
20402d06:	002a9693          	slli	a3,s5,0x2
20402d0a:	8edd                	or	a3,a3,a5
20402d0c:	16fd                	addi	a3,a3,-1
20402d0e:	4739                	li	a4,14
20402d10:	01494633          	xor	a2,s2,s4
20402d14:	40a48533          	sub	a0,s1,a0
20402d18:	06d76663          	bltu	a4,a3,20402d84 <__divsf3+0xe8>
20402d1c:	00043597          	auipc	a1,0x43
20402d20:	8bc58593          	addi	a1,a1,-1860 # 204455d8 <__sf_fake_stdout+0x5c>
20402d24:	068a                	slli	a3,a3,0x2
20402d26:	96ae                	add	a3,a3,a1
20402d28:	4298                	lw	a4,0(a3)
20402d2a:	972e                	add	a4,a4,a1
20402d2c:	8702                	jr	a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44 (discriminator 2)
20402d2e:	02098363          	beqz	s3,20402d54 <__divsf3+0xb8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44 (discriminator 14)
20402d32:	854e                	mv	a0,s3
20402d34:	2b6d                	jal	204032ee <__clzsi2>
20402d36:	ffb50793          	addi	a5,a0,-5
20402d3a:	f8a00493          	li	s1,-118
20402d3e:	00f999b3          	sll	s3,s3,a5
20402d42:	8c89                	sub	s1,s1,a0
20402d44:	bf59                	j	20402cda <__divsf3+0x3e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44 (discriminator 3)
20402d46:	0ff00493          	li	s1,255
20402d4a:	4a89                	li	s5,2
20402d4c:	f80988e3          	beqz	s3,20402cdc <__divsf3+0x40>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44
20402d50:	4a8d                	li	s5,3
20402d52:	b769                	j	20402cdc <__divsf3+0x40>
20402d54:	4481                	li	s1,0
20402d56:	4a85                	li	s5,1
20402d58:	b751                	j	20402cdc <__divsf3+0x40>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:45 (discriminator 2)
20402d5a:	c015                	beqz	s0,20402d7e <__divsf3+0xe2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:45 (discriminator 14)
20402d5c:	8522                	mv	a0,s0
20402d5e:	2b41                	jal	204032ee <__clzsi2>
20402d60:	ffb50793          	addi	a5,a0,-5
20402d64:	00f41433          	sll	s0,s0,a5
20402d68:	f8a00793          	li	a5,-118
20402d6c:	40a78533          	sub	a0,a5,a0
20402d70:	bf51                	j	20402d04 <__divsf3+0x68>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:45 (discriminator 3)
20402d72:	0ff00513          	li	a0,255
20402d76:	4789                	li	a5,2
20402d78:	d459                	beqz	s0,20402d06 <__divsf3+0x6a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:45
20402d7a:	478d                	li	a5,3
20402d7c:	b769                	j	20402d06 <__divsf3+0x6a>
20402d7e:	4501                	li	a0,0
20402d80:	4785                	li	a5,1
20402d82:	b751                	j	20402d06 <__divsf3+0x6a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 2)
20402d84:	00541813          	slli	a6,s0,0x5
20402d88:	0a89fe63          	bgeu	s3,s0,20402e44 <__divsf3+0x1a8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 10)
20402d8c:	157d                	addi	a0,a0,-1
20402d8e:	4681                	li	a3,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 13)
20402d90:	01085413          	srli	s0,a6,0x10
20402d94:	0289d333          	divu	t1,s3,s0
20402d98:	67c1                	lui	a5,0x10
20402d9a:	17fd                	addi	a5,a5,-1
20402d9c:	00f877b3          	and	a5,a6,a5
20402da0:	82c1                	srli	a3,a3,0x10
20402da2:	0289f733          	remu	a4,s3,s0
20402da6:	859a                	mv	a1,t1
20402da8:	026788b3          	mul	a7,a5,t1
20402dac:	0742                	slli	a4,a4,0x10
20402dae:	8f55                	or	a4,a4,a3
20402db0:	01177c63          	bgeu	a4,a7,20402dc8 <__divsf3+0x12c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 14)
20402db4:	9742                	add	a4,a4,a6
20402db6:	fff30593          	addi	a1,t1,-1 # 1fff <__heap_size+0x17ff>
20402dba:	01076763          	bltu	a4,a6,20402dc8 <__divsf3+0x12c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 16)
20402dbe:	01177563          	bgeu	a4,a7,20402dc8 <__divsf3+0x12c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 18)
20402dc2:	ffe30593          	addi	a1,t1,-2
20402dc6:	9742                	add	a4,a4,a6
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 20)
20402dc8:	41170733          	sub	a4,a4,a7
20402dcc:	028758b3          	divu	a7,a4,s0
20402dd0:	02877733          	remu	a4,a4,s0
20402dd4:	031786b3          	mul	a3,a5,a7
20402dd8:	01071793          	slli	a5,a4,0x10
20402ddc:	8746                	mv	a4,a7
20402dde:	00d7fc63          	bgeu	a5,a3,20402df6 <__divsf3+0x15a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 21)
20402de2:	97c2                	add	a5,a5,a6
20402de4:	fff88713          	addi	a4,a7,-1
20402de8:	0107e763          	bltu	a5,a6,20402df6 <__divsf3+0x15a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 23)
20402dec:	00d7f563          	bgeu	a5,a3,20402df6 <__divsf3+0x15a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 25)
20402df0:	ffe88713          	addi	a4,a7,-2
20402df4:	97c2                	add	a5,a5,a6
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 27)
20402df6:	01059413          	slli	s0,a1,0x10
20402dfa:	8f95                	sub	a5,a5,a3
20402dfc:	8c59                	or	s0,s0,a4
20402dfe:	00f037b3          	snez	a5,a5
20402e02:	8c5d                	or	s0,s0,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 2)
20402e04:	07f50713          	addi	a4,a0,127
20402e08:	08e05a63          	blez	a4,20402e9c <__divsf3+0x200>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 6)
20402e0c:	00747793          	andi	a5,s0,7
20402e10:	c799                	beqz	a5,20402e1e <__divsf3+0x182>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 8)
20402e12:	00f47793          	andi	a5,s0,15
20402e16:	4691                	li	a3,4
20402e18:	00d78363          	beq	a5,a3,20402e1e <__divsf3+0x182>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 10)
20402e1c:	0411                	addi	s0,s0,4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 9)
20402e1e:	00441793          	slli	a5,s0,0x4
20402e22:	0007d863          	bgez	a5,20402e32 <__divsf3+0x196>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 24)
20402e26:	f80007b7          	lui	a5,0xf8000
20402e2a:	17fd                	addi	a5,a5,-1
20402e2c:	8c7d                	and	s0,s0,a5
20402e2e:	08050713          	addi	a4,a0,128
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 26)
20402e32:	0fe00793          	li	a5,254
20402e36:	800d                	srli	s0,s0,0x3
20402e38:	02e7d963          	bge	a5,a4,20402e6a <__divsf3+0x1ce>
20402e3c:	4401                	li	s0,0
20402e3e:	0ff00713          	li	a4,255
20402e42:	a025                	j	20402e6a <__divsf3+0x1ce>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 11)
20402e44:	01f99693          	slli	a3,s3,0x1f
20402e48:	0019d993          	srli	s3,s3,0x1
20402e4c:	b791                	j	20402d90 <__divsf3+0xf4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:44 (discriminator 8)
20402e4e:	864a                	mv	a2,s2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 8)
20402e50:	844e                	mv	s0,s3
20402e52:	87d6                	mv	a5,s5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47
20402e54:	4709                	li	a4,2
20402e56:	fee783e3          	beq	a5,a4,20402e3c <__divsf3+0x1a0>
20402e5a:	470d                	li	a4,3
20402e5c:	06e78f63          	beq	a5,a4,20402eda <__divsf3+0x23e>
20402e60:	4705                	li	a4,1
20402e62:	fae791e3          	bne	a5,a4,20402e04 <__divsf3+0x168>
20402e66:	4401                	li	s0,0
20402e68:	4701                	li	a4,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 112)
20402e6a:	0426                	slli	s0,s0,0x9
20402e6c:	0ff77713          	andi	a4,a4,255
20402e70:	075e                	slli	a4,a4,0x17
20402e72:	8025                	srli	s0,s0,0x9
20402e74:	8c59                	or	s0,s0,a4
20402e76:	01f61513          	slli	a0,a2,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:51 (discriminator 112)
20402e7a:	8d41                	or	a0,a0,s0
20402e7c:	40f2                	lw	ra,28(sp)
20402e7e:	4462                	lw	s0,24(sp)
20402e80:	44d2                	lw	s1,20(sp)
20402e82:	4942                	lw	s2,16(sp)
20402e84:	49b2                	lw	s3,12(sp)
20402e86:	4a22                	lw	s4,8(sp)
20402e88:	4a92                	lw	s5,4(sp)
20402e8a:	6105                	addi	sp,sp,32
20402e8c:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:45 (discriminator 5)
20402e8e:	8652                	mv	a2,s4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46 (discriminator 5)
20402e90:	b7d1                	j	20402e54 <__divsf3+0x1b8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:46
20402e92:	00400437          	lui	s0,0x400
20402e96:	4601                	li	a2,0
20402e98:	478d                	li	a5,3
20402e9a:	bf6d                	j	20402e54 <__divsf3+0x1b8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 59)
20402e9c:	4785                	li	a5,1
20402e9e:	8f99                	sub	a5,a5,a4
20402ea0:	476d                	li	a4,27
20402ea2:	fcf742e3          	blt	a4,a5,20402e66 <__divsf3+0x1ca>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 60)
20402ea6:	09e50513          	addi	a0,a0,158
20402eaa:	00f457b3          	srl	a5,s0,a5
20402eae:	00a41433          	sll	s0,s0,a0
20402eb2:	00803433          	snez	s0,s0
20402eb6:	8c5d                	or	s0,s0,a5
20402eb8:	00747793          	andi	a5,s0,7
20402ebc:	c799                	beqz	a5,20402eca <__divsf3+0x22e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 68)
20402ebe:	00f47793          	andi	a5,s0,15
20402ec2:	4711                	li	a4,4
20402ec4:	00e78363          	beq	a5,a4,20402eca <__divsf3+0x22e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 70)
20402ec8:	0411                	addi	s0,s0,4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47 (discriminator 69)
20402eca:	00541793          	slli	a5,s0,0x5
20402ece:	800d                	srli	s0,s0,0x3
20402ed0:	f807dce3          	bgez	a5,20402e68 <__divsf3+0x1cc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divsf3.c:47
20402ed4:	4401                	li	s0,0
20402ed6:	4705                	li	a4,1
20402ed8:	bf49                	j	20402e6a <__divsf3+0x1ce>
20402eda:	00400437          	lui	s0,0x400
20402ede:	0ff00713          	li	a4,255
20402ee2:	4601                	li	a2,0
20402ee4:	b759                	j	20402e6a <__divsf3+0x1ce>

20402ee6 <__gesf2>:
__gesf2():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:43
20402ee6:	01755693          	srli	a3,a0,0x17
20402eea:	008007b7          	lui	a5,0x800
20402eee:	17fd                	addi	a5,a5,-1
20402ef0:	0175d713          	srli	a4,a1,0x17
20402ef4:	0ff6f693          	andi	a3,a3,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45
20402ef8:	0ff00813          	li	a6,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:43
20402efc:	00a7f633          	and	a2,a5,a0
20402f00:	0ff77713          	andi	a4,a4,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:44
20402f04:	8fed                	and	a5,a5,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:43
20402f06:	817d                	srli	a0,a0,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:44
20402f08:	81fd                	srli	a1,a1,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45
20402f0a:	01069563          	bne	a3,a6,20402f14 <__gesf2+0x2e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 18)
20402f0e:	c239                	beqz	a2,20402f54 <__gesf2+0x6e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45
20402f10:	5579                	li	a0,-2
20402f12:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 21)
20402f14:	01071363          	bne	a4,a6,20402f1a <__gesf2+0x34>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 22)
20402f18:	ffe5                	bnez	a5,20402f10 <__gesf2+0x2a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 57)
20402f1a:	ee9d                	bnez	a3,20402f58 <__gesf2+0x72>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 58)
20402f1c:	e311                	bnez	a4,20402f20 <__gesf2+0x3a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 64)
20402f1e:	cb8d                	beqz	a5,20402f50 <__gesf2+0x6a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45
20402f20:	ca01                	beqz	a2,20402f30 <__gesf2+0x4a>
20402f22:	00b51463          	bne	a0,a1,20402f2a <__gesf2+0x44>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 87)
20402f26:	00d75963          	bge	a4,a3,20402f38 <__gesf2+0x52>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 104)
20402f2a:	c10d                	beqz	a0,20402f4c <__gesf2+0x66>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45
20402f2c:	557d                	li	a0,-1
20402f2e:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 74)
20402f30:	557d                	li	a0,-1
20402f32:	c591                	beqz	a1,20402f3e <__gesf2+0x58>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45
20402f34:	852e                	mv	a0,a1
20402f36:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 93)
20402f38:	00e6d463          	bge	a3,a4,20402f40 <__gesf2+0x5a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 110)
20402f3c:	d965                	beqz	a0,20402f2c <__gesf2+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:49
20402f3e:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 99)
20402f40:	fec7e5e3          	bltu	a5,a2,20402f2a <__gesf2+0x44>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45 (discriminator 105)
20402f44:	fef66ce3          	bltu	a2,a5,20402f3c <__gesf2+0x56>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45
20402f48:	4501                	li	a0,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:48
20402f4a:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/gesf2.c:45
20402f4c:	4505                	li	a0,1
20402f4e:	8082                	ret
20402f50:	de65                	beqz	a2,20402f48 <__gesf2+0x62>
20402f52:	bfe1                	j	20402f2a <__gesf2+0x44>
20402f54:	fcd702e3          	beq	a4,a3,20402f18 <__gesf2+0x32>
20402f58:	f769                	bnez	a4,20402f22 <__gesf2+0x3c>
20402f5a:	dbe1                	beqz	a5,20402f2a <__gesf2+0x44>
20402f5c:	b7d9                	j	20402f22 <__gesf2+0x3c>

20402f5e <__lesf2>:
__lesf2():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:43
20402f5e:	01755693          	srli	a3,a0,0x17
20402f62:	008007b7          	lui	a5,0x800
20402f66:	17fd                	addi	a5,a5,-1
20402f68:	0175d713          	srli	a4,a1,0x17
20402f6c:	0ff6f693          	andi	a3,a3,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45
20402f70:	0ff00813          	li	a6,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:43
20402f74:	00a7f633          	and	a2,a5,a0
20402f78:	0ff77713          	andi	a4,a4,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:44
20402f7c:	8fed                	and	a5,a5,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:43
20402f7e:	817d                	srli	a0,a0,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:44
20402f80:	81fd                	srli	a1,a1,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45
20402f82:	01069563          	bne	a3,a6,20402f8c <__lesf2+0x2e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 18)
20402f86:	c239                	beqz	a2,20402fcc <__lesf2+0x6e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45
20402f88:	4509                	li	a0,2
20402f8a:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 21)
20402f8c:	01071363          	bne	a4,a6,20402f92 <__lesf2+0x34>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 22)
20402f90:	ffe5                	bnez	a5,20402f88 <__lesf2+0x2a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 57)
20402f92:	ee9d                	bnez	a3,20402fd0 <__lesf2+0x72>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 58)
20402f94:	e311                	bnez	a4,20402f98 <__lesf2+0x3a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 64)
20402f96:	cb8d                	beqz	a5,20402fc8 <__lesf2+0x6a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45
20402f98:	ca01                	beqz	a2,20402fa8 <__lesf2+0x4a>
20402f9a:	00b51463          	bne	a0,a1,20402fa2 <__lesf2+0x44>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 87)
20402f9e:	00d75963          	bge	a4,a3,20402fb0 <__lesf2+0x52>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 104)
20402fa2:	c10d                	beqz	a0,20402fc4 <__lesf2+0x66>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45
20402fa4:	557d                	li	a0,-1
20402fa6:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 74)
20402fa8:	557d                	li	a0,-1
20402faa:	c591                	beqz	a1,20402fb6 <__lesf2+0x58>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45
20402fac:	852e                	mv	a0,a1
20402fae:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 93)
20402fb0:	00e6d463          	bge	a3,a4,20402fb8 <__lesf2+0x5a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 110)
20402fb4:	d965                	beqz	a0,20402fa4 <__lesf2+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:49
20402fb6:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 99)
20402fb8:	fec7e5e3          	bltu	a5,a2,20402fa2 <__lesf2+0x44>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45 (discriminator 105)
20402fbc:	fef66ce3          	bltu	a2,a5,20402fb4 <__lesf2+0x56>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45
20402fc0:	4501                	li	a0,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:48
20402fc2:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/lesf2.c:45
20402fc4:	4505                	li	a0,1
20402fc6:	8082                	ret
20402fc8:	de65                	beqz	a2,20402fc0 <__lesf2+0x62>
20402fca:	bfe1                	j	20402fa2 <__lesf2+0x44>
20402fcc:	fcd702e3          	beq	a4,a3,20402f90 <__lesf2+0x32>
20402fd0:	f769                	bnez	a4,20402f9a <__lesf2+0x3c>
20402fd2:	dbe1                	beqz	a5,20402fa2 <__lesf2+0x44>
20402fd4:	b7d9                	j	20402f9a <__lesf2+0x3c>

20402fd6 <__mulsf3>:
__mulsf3():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:36
20402fd6:	1101                	addi	sp,sp,-32
20402fd8:	c84a                	sw	s2,16(sp)
20402fda:	01755913          	srli	s2,a0,0x17
20402fde:	ca26                	sw	s1,20(sp)
20402fe0:	c64e                	sw	s3,12(sp)
20402fe2:	c256                	sw	s5,4(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44
20402fe4:	00951493          	slli	s1,a0,0x9
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:36
20402fe8:	ce06                	sw	ra,28(sp)
20402fea:	cc22                	sw	s0,24(sp)
20402fec:	c452                	sw	s4,8(sp)
20402fee:	0ff97913          	andi	s2,s2,255
20402ff2:	8aae                	mv	s5,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44
20402ff4:	80a5                	srli	s1,s1,0x9
20402ff6:	01f55993          	srli	s3,a0,0x1f
20402ffa:	06090763          	beqz	s2,20403068 <__mulsf3+0x92>
20402ffe:	0ff00793          	li	a5,255
20403002:	06f90f63          	beq	s2,a5,20403080 <__mulsf3+0xaa>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44 (discriminator 1)
20403006:	048e                	slli	s1,s1,0x3
20403008:	040007b7          	lui	a5,0x4000
2040300c:	8cdd                	or	s1,s1,a5
2040300e:	f8190913          	addi	s2,s2,-127
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44 (discriminator 14)
20403012:	4a01                	li	s4,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:45
20403014:	017ad513          	srli	a0,s5,0x17
20403018:	009a9413          	slli	s0,s5,0x9
2040301c:	0ff57513          	andi	a0,a0,255
20403020:	8025                	srli	s0,s0,0x9
20403022:	01fada93          	srli	s5,s5,0x1f
20403026:	c535                	beqz	a0,20403092 <__mulsf3+0xbc>
20403028:	0ff00793          	li	a5,255
2040302c:	06f50f63          	beq	a0,a5,204030aa <__mulsf3+0xd4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:45 (discriminator 1)
20403030:	040e                	slli	s0,s0,0x3
20403032:	040007b7          	lui	a5,0x4000
20403036:	8c5d                	or	s0,s0,a5
20403038:	f8150513          	addi	a0,a0,-127
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:45 (discriminator 14)
2040303c:	4781                	li	a5,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:46
2040303e:	002a1713          	slli	a4,s4,0x2
20403042:	8f5d                	or	a4,a4,a5
20403044:	954a                	add	a0,a0,s2
20403046:	177d                	addi	a4,a4,-1
20403048:	45b9                	li	a1,14
2040304a:	0159c6b3          	xor	a3,s3,s5
2040304e:	00150613          	addi	a2,a0,1
20403052:	06e5e563          	bltu	a1,a4,204030bc <__mulsf3+0xe6>
20403056:	00042597          	auipc	a1,0x42
2040305a:	5be58593          	addi	a1,a1,1470 # 20445614 <__sf_fake_stdout+0x98>
2040305e:	070a                	slli	a4,a4,0x2
20403060:	972e                	add	a4,a4,a1
20403062:	4318                	lw	a4,0(a4)
20403064:	972e                	add	a4,a4,a1
20403066:	8702                	jr	a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44 (discriminator 2)
20403068:	c095                	beqz	s1,2040308c <__mulsf3+0xb6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44 (discriminator 14)
2040306a:	8526                	mv	a0,s1
2040306c:	2449                	jal	204032ee <__clzsi2>
2040306e:	ffb50793          	addi	a5,a0,-5
20403072:	f8a00913          	li	s2,-118
20403076:	00f494b3          	sll	s1,s1,a5
2040307a:	40a90933          	sub	s2,s2,a0
2040307e:	bf51                	j	20403012 <__mulsf3+0x3c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44 (discriminator 3)
20403080:	0ff00913          	li	s2,255
20403084:	4a09                	li	s4,2
20403086:	d4d9                	beqz	s1,20403014 <__mulsf3+0x3e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44
20403088:	4a0d                	li	s4,3
2040308a:	b769                	j	20403014 <__mulsf3+0x3e>
2040308c:	4901                	li	s2,0
2040308e:	4a05                	li	s4,1
20403090:	b751                	j	20403014 <__mulsf3+0x3e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:45 (discriminator 2)
20403092:	c015                	beqz	s0,204030b6 <__mulsf3+0xe0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:45 (discriminator 14)
20403094:	8522                	mv	a0,s0
20403096:	2ca1                	jal	204032ee <__clzsi2>
20403098:	ffb50793          	addi	a5,a0,-5
2040309c:	00f41433          	sll	s0,s0,a5
204030a0:	f8a00793          	li	a5,-118
204030a4:	40a78533          	sub	a0,a5,a0
204030a8:	bf51                	j	2040303c <__mulsf3+0x66>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:45 (discriminator 3)
204030aa:	0ff00513          	li	a0,255
204030ae:	4789                	li	a5,2
204030b0:	d459                	beqz	s0,2040303e <__mulsf3+0x68>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:45
204030b2:	478d                	li	a5,3
204030b4:	b769                	j	2040303e <__mulsf3+0x68>
204030b6:	4501                	li	a0,0
204030b8:	4785                	li	a5,1
204030ba:	b751                	j	2040303e <__mulsf3+0x68>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:46 (discriminator 2)
204030bc:	67c1                	lui	a5,0x10
204030be:	fff78313          	addi	t1,a5,-1 # ffff <__stack_size+0xd7ff>
204030c2:	0104d713          	srli	a4,s1,0x10
204030c6:	01045593          	srli	a1,s0,0x10
204030ca:	0064f4b3          	and	s1,s1,t1
204030ce:	00647433          	and	s0,s0,t1
204030d2:	028488b3          	mul	a7,s1,s0
204030d6:	02870833          	mul	a6,a4,s0
204030da:	02b70433          	mul	s0,a4,a1
204030de:	029585b3          	mul	a1,a1,s1
204030e2:	0108d493          	srli	s1,a7,0x10
204030e6:	95c2                	add	a1,a1,a6
204030e8:	94ae                	add	s1,s1,a1
204030ea:	0104f363          	bgeu	s1,a6,204030f0 <__mulsf3+0x11a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:46 (discriminator 9)
204030ee:	943e                	add	s0,s0,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:46 (discriminator 11)
204030f0:	0064f7b3          	and	a5,s1,t1
204030f4:	07c2                	slli	a5,a5,0x10
204030f6:	0068f8b3          	and	a7,a7,t1
204030fa:	97c6                	add	a5,a5,a7
204030fc:	00679713          	slli	a4,a5,0x6
20403100:	80c1                	srli	s1,s1,0x10
20403102:	00e03733          	snez	a4,a4
20403106:	83e9                	srli	a5,a5,0x1a
20403108:	9426                	add	s0,s0,s1
2040310a:	8fd9                	or	a5,a5,a4
2040310c:	041a                	slli	s0,s0,0x6
2040310e:	8c5d                	or	s0,s0,a5
20403110:	00441793          	slli	a5,s0,0x4
20403114:	0607d763          	bgez	a5,20403182 <__mulsf3+0x1ac>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:46 (discriminator 12)
20403118:	00145793          	srli	a5,s0,0x1
2040311c:	8805                	andi	s0,s0,1
2040311e:	8c5d                	or	s0,s0,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 2)
20403120:	07f60713          	addi	a4,a2,127 # 400007f <__stack_size+0x3ffd87f>
20403124:	06e05163          	blez	a4,20403186 <__mulsf3+0x1b0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 6)
20403128:	00747793          	andi	a5,s0,7
2040312c:	c799                	beqz	a5,2040313a <__mulsf3+0x164>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 8)
2040312e:	00f47793          	andi	a5,s0,15
20403132:	4591                	li	a1,4
20403134:	00b78363          	beq	a5,a1,2040313a <__mulsf3+0x164>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 10)
20403138:	0411                	addi	s0,s0,4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 9)
2040313a:	00441793          	slli	a5,s0,0x4
2040313e:	0007d863          	bgez	a5,2040314e <__mulsf3+0x178>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 24)
20403142:	f80007b7          	lui	a5,0xf8000
20403146:	17fd                	addi	a5,a5,-1
20403148:	8c7d                	and	s0,s0,a5
2040314a:	08060713          	addi	a4,a2,128
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 26)
2040314e:	0fe00793          	li	a5,254
20403152:	800d                	srli	s0,s0,0x3
20403154:	06e7dd63          	bge	a5,a4,204031ce <__mulsf3+0x1f8>
20403158:	4401                	li	s0,0
2040315a:	0ff00713          	li	a4,255
2040315e:	a885                	j	204031ce <__mulsf3+0x1f8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:44 (discriminator 7)
20403160:	86ce                	mv	a3,s3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:46 (discriminator 7)
20403162:	8426                	mv	s0,s1
20403164:	87d2                	mv	a5,s4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47
20403166:	4709                	li	a4,2
20403168:	fee788e3          	beq	a5,a4,20403158 <__mulsf3+0x182>
2040316c:	470d                	li	a4,3
2040316e:	04e78b63          	beq	a5,a4,204031c4 <__mulsf3+0x1ee>
20403172:	4705                	li	a4,1
20403174:	fae796e3          	bne	a5,a4,20403120 <__mulsf3+0x14a>
20403178:	4401                	li	s0,0
2040317a:	4701                	li	a4,0
2040317c:	a889                	j	204031ce <__mulsf3+0x1f8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:45 (discriminator 4)
2040317e:	86d6                	mv	a3,s5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:46 (discriminator 4)
20403180:	b7dd                	j	20403166 <__mulsf3+0x190>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:46
20403182:	862a                	mv	a2,a0
20403184:	bf71                	j	20403120 <__mulsf3+0x14a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 59)
20403186:	4785                	li	a5,1
20403188:	8f99                	sub	a5,a5,a4
2040318a:	476d                	li	a4,27
2040318c:	fef746e3          	blt	a4,a5,20403178 <__mulsf3+0x1a2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 60)
20403190:	09e60613          	addi	a2,a2,158
20403194:	00f457b3          	srl	a5,s0,a5
20403198:	00c41433          	sll	s0,s0,a2
2040319c:	00803433          	snez	s0,s0
204031a0:	8c5d                	or	s0,s0,a5
204031a2:	00747793          	andi	a5,s0,7
204031a6:	c799                	beqz	a5,204031b4 <__mulsf3+0x1de>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 68)
204031a8:	00f47793          	andi	a5,s0,15
204031ac:	4711                	li	a4,4
204031ae:	00e78363          	beq	a5,a4,204031b4 <__mulsf3+0x1de>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 70)
204031b2:	0411                	addi	s0,s0,4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 69)
204031b4:	00541793          	slli	a5,s0,0x5
204031b8:	800d                	srli	s0,s0,0x3
204031ba:	fc07d0e3          	bgez	a5,2040317a <__mulsf3+0x1a4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47
204031be:	4401                	li	s0,0
204031c0:	4705                	li	a4,1
204031c2:	a031                	j	204031ce <__mulsf3+0x1f8>
204031c4:	00400437          	lui	s0,0x400
204031c8:	0ff00713          	li	a4,255
204031cc:	4681                	li	a3,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:47 (discriminator 112)
204031ce:	0426                	slli	s0,s0,0x9
204031d0:	0ff77713          	andi	a4,a4,255
204031d4:	075e                	slli	a4,a4,0x17
204031d6:	8025                	srli	s0,s0,0x9
204031d8:	8c59                	or	s0,s0,a4
204031da:	01f69513          	slli	a0,a3,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/mulsf3.c:51 (discriminator 112)
204031de:	8d41                	or	a0,a0,s0
204031e0:	40f2                	lw	ra,28(sp)
204031e2:	4462                	lw	s0,24(sp)
204031e4:	44d2                	lw	s1,20(sp)
204031e6:	4942                	lw	s2,16(sp)
204031e8:	49b2                	lw	s3,12(sp)
204031ea:	4a22                	lw	s4,8(sp)
204031ec:	4a92                	lw	s5,4(sp)
204031ee:	6105                	addi	sp,sp,32
204031f0:	8082                	ret

204031f2 <__fixsfsi>:
__fixsfsi():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:42
204031f2:	00800637          	lui	a2,0x800
204031f6:	01755713          	srli	a4,a0,0x17
204031fa:	fff60793          	addi	a5,a2,-1 # 7fffff <__stack_size+0x7fd7ff>
204031fe:	0ff77713          	andi	a4,a4,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43
20403202:	07e00593          	li	a1,126
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:42
20403206:	8fe9                	and	a5,a5,a0
20403208:	01f55693          	srli	a3,a0,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43
2040320c:	04e5f163          	bgeu	a1,a4,2040324e <__fixsfsi+0x5c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43 (discriminator 10)
20403210:	09d00593          	li	a1,157
20403214:	00e5f863          	bgeu	a1,a4,20403224 <__fixsfsi+0x32>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43 (discriminator 13)
20403218:	80000537          	lui	a0,0x80000
2040321c:	fff54513          	not	a0,a0
20403220:	9536                	add	a0,a0,a3
20403222:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43 (discriminator 12)
20403224:	00c7e533          	or	a0,a5,a2
20403228:	09500793          	li	a5,149
2040322c:	00e7da63          	bge	a5,a4,20403240 <__fixsfsi+0x4e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43 (discriminator 26)
20403230:	f6a70713          	addi	a4,a4,-150 # fbffff6a <metal_segment_heap_target_end+0x7bffc6b6>
20403234:	00e51533          	sll	a0,a0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43 (discriminator 35)
20403238:	ce81                	beqz	a3,20403250 <__fixsfsi+0x5e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43 (discriminator 36)
2040323a:	40a00533          	neg	a0,a0
2040323e:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43 (discriminator 27)
20403240:	09600793          	li	a5,150
20403244:	40e78733          	sub	a4,a5,a4
20403248:	00e55533          	srl	a0,a0,a4
2040324c:	b7f5                	j	20403238 <__fixsfsi+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:43
2040324e:	4501                	li	a0,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixsfsi.c:47
20403250:	8082                	ret

20403252 <__floatunsisf>:
__floatunsisf():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:36
20403252:	1141                	addi	sp,sp,-16
20403254:	c422                	sw	s0,8(sp)
20403256:	c606                	sw	ra,12(sp)
20403258:	842a                	mv	s0,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42
2040325a:	4781                	li	a5,0
2040325c:	cd19                	beqz	a0,2040327a <__floatunsisf+0x28>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 6)
2040325e:	2841                	jal	204032ee <__clzsi2>
20403260:	09e00793          	li	a5,158
20403264:	8f89                	sub	a5,a5,a0
20403266:	09600713          	li	a4,150
2040326a:	02f74263          	blt	a4,a5,2040328e <__floatunsisf+0x3c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 28)
2040326e:	4721                	li	a4,8
20403270:	00a75563          	bge	a4,a0,2040327a <__floatunsisf+0x28>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 30)
20403274:	1561                	addi	a0,a0,-8
20403276:	00a41433          	sll	s0,s0,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:43
2040327a:	0426                	slli	s0,s0,0x9
2040327c:	0ff7f513          	andi	a0,a5,255
20403280:	8025                	srli	s0,s0,0x9
20403282:	055e                	slli	a0,a0,0x17
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:47
20403284:	8d41                	or	a0,a0,s0
20403286:	40b2                	lw	ra,12(sp)
20403288:	4422                	lw	s0,8(sp)
2040328a:	0141                	addi	sp,sp,16
2040328c:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 29)
2040328e:	09900713          	li	a4,153
20403292:	00f75d63          	bge	a4,a5,204032ac <__floatunsisf+0x5a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 35)
20403296:	01b50713          	addi	a4,a0,27 # 8000001b <metal_segment_heap_target_end+0xffffc767>
2040329a:	4695                	li	a3,5
2040329c:	00e41733          	sll	a4,s0,a4
204032a0:	8e89                	sub	a3,a3,a0
204032a2:	00e03733          	snez	a4,a4
204032a6:	00d45433          	srl	s0,s0,a3
204032aa:	8c59                	or	s0,s0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 37)
204032ac:	4715                	li	a4,5
204032ae:	00a75663          	bge	a4,a0,204032ba <__floatunsisf+0x68>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 38)
204032b2:	ffb50713          	addi	a4,a0,-5
204032b6:	00e41433          	sll	s0,s0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 45)
204032ba:	fc000737          	lui	a4,0xfc000
204032be:	177d                	addi	a4,a4,-1
204032c0:	00747693          	andi	a3,s0,7
204032c4:	8f61                	and	a4,a4,s0
204032c6:	c691                	beqz	a3,204032d2 <__floatunsisf+0x80>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 86)
204032c8:	883d                	andi	s0,s0,15
204032ca:	4691                	li	a3,4
204032cc:	00d40363          	beq	s0,a3,204032d2 <__floatunsisf+0x80>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 90)
204032d0:	0711                	addi	a4,a4,4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 93)
204032d2:	00571693          	slli	a3,a4,0x5
204032d6:	0006d963          	bgez	a3,204032e8 <__floatunsisf+0x96>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 109)
204032da:	fc0007b7          	lui	a5,0xfc000
204032de:	17fd                	addi	a5,a5,-1
204032e0:	8f7d                	and	a4,a4,a5
204032e2:	09f00793          	li	a5,159
204032e6:	8f89                	sub	a5,a5,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 125)
204032e8:	00375413          	srli	s0,a4,0x3
204032ec:	b779                	j	2040327a <__floatunsisf+0x28>

204032ee <__clzsi2>:
__clzsi2():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710
204032ee:	67c1                	lui	a5,0x10
204032f0:	02f57663          	bgeu	a0,a5,2040331c <__clzsi2+0x2e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 3)
204032f4:	0ff00793          	li	a5,255
204032f8:	00a7b7b3          	sltu	a5,a5,a0
204032fc:	078e                	slli	a5,a5,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 14)
204032fe:	02000713          	li	a4,32
20403302:	8f1d                	sub	a4,a4,a5
20403304:	00f557b3          	srl	a5,a0,a5
20403308:	00042517          	auipc	a0,0x42
2040330c:	34850513          	addi	a0,a0,840 # 20445650 <__clz_tab>
20403310:	97aa                	add	a5,a5,a0
20403312:	0007c503          	lbu	a0,0(a5) # 10000 <__stack_size+0xd800>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:713 (discriminator 14)
20403316:	40a70533          	sub	a0,a4,a0
2040331a:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 4)
2040331c:	01000737          	lui	a4,0x1000
20403320:	47c1                	li	a5,16
20403322:	fce56ee3          	bltu	a0,a4,204032fe <__clzsi2+0x10>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710
20403326:	47e1                	li	a5,24
20403328:	bfd9                	j	204032fe <__clzsi2+0x10>

2040332a <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:187
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
2040332a:	1101                	addi	sp,sp,-32
2040332c:	ce22                	sw	s0,28(sp)
2040332e:	1000                	addi	s0,sp,32
20403330:	fea42623          	sw	a0,-20(s0) # 3fffec <__stack_size+0x3fd7ec>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:188
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20403334:	fec42703          	lw	a4,-20(s0)
20403338:	81818793          	addi	a5,gp,-2024 # 800007e0 <__metal_dt_clint_2000000>
2040333c:	00f71563          	bne	a4,a5,20403346 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:189
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20403340:	020007b7          	lui	a5,0x2000
20403344:	a011                	j	20403348 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:192
	}
	else {
		return 0;
20403346:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:194
	}
}
20403348:	853e                	mv	a0,a5
2040334a:	4472                	lw	s0,28(sp)
2040334c:	6105                	addi	sp,sp,32
2040334e:	8082                	ret

20403350 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:207
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20403350:	1101                	addi	sp,sp,-32
20403352:	ce22                	sw	s0,28(sp)
20403354:	1000                	addi	s0,sp,32
20403356:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:208
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
2040335a:	fec42703          	lw	a4,-20(s0)
2040335e:	81818793          	addi	a5,gp,-2024 # 800007e0 <__metal_dt_clint_2000000>
20403362:	00f71463          	bne	a4,a5,2040336a <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:209
		return METAL_MAX_CLINT_INTERRUPTS;
20403366:	4789                	li	a5,2
20403368:	a011                	j	2040336c <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:212
	}
	else {
		return 0;
2040336a:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:214
	}
}
2040336c:	853e                	mv	a0,a5
2040336e:	4472                	lw	s0,28(sp)
20403370:	6105                	addi	sp,sp,32
20403372:	8082                	ret

20403374 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:217

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403374:	1101                	addi	sp,sp,-32
20403376:	ce22                	sw	s0,28(sp)
20403378:	1000                	addi	s0,sp,32
2040337a:	fea42623          	sw	a0,-20(s0)
2040337e:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:218
	if (idx == 0) {
20403382:	fe842783          	lw	a5,-24(s0)
20403386:	e791                	bnez	a5,20403392 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:219
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403388:	800007b7          	lui	a5,0x80000
2040338c:	08878793          	addi	a5,a5,136 # 80000088 <metal_segment_heap_target_end+0xffffc7d4>
20403390:	a821                	j	204033a8 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:221
	}
	else if (idx == 1) {
20403392:	fe842703          	lw	a4,-24(s0)
20403396:	4785                	li	a5,1
20403398:	00f71763          	bne	a4,a5,204033a6 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:222
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040339c:	800007b7          	lui	a5,0x80000
204033a0:	08878793          	addi	a5,a5,136 # 80000088 <metal_segment_heap_target_end+0xffffc7d4>
204033a4:	a011                	j	204033a8 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:225
	}
	else {
		return NULL;
204033a6:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:227
	}
}
204033a8:	853e                	mv	a0,a5
204033aa:	4472                	lw	s0,28(sp)
204033ac:	6105                	addi	sp,sp,32
204033ae:	8082                	ret

204033b0 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:230

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204033b0:	1101                	addi	sp,sp,-32
204033b2:	ce22                	sw	s0,28(sp)
204033b4:	1000                	addi	s0,sp,32
204033b6:	fea42623          	sw	a0,-20(s0)
204033ba:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:231
	if (idx == 0) {
204033be:	fe842783          	lw	a5,-24(s0)
204033c2:	e399                	bnez	a5,204033c8 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:232
		return 3;
204033c4:	478d                	li	a5,3
204033c6:	a809                	j	204033d8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:234
	}
	else if (idx == 1) {
204033c8:	fe842703          	lw	a4,-24(s0)
204033cc:	4785                	li	a5,1
204033ce:	00f71463          	bne	a4,a5,204033d6 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:235
		return 7;
204033d2:	479d                	li	a5,7
204033d4:	a011                	j	204033d8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:238
	}
	else {
		return 0;
204033d6:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:240
	}
}
204033d8:	853e                	mv	a0,a5
204033da:	4472                	lw	s0,28(sp)
204033dc:	6105                	addi	sp,sp,32
204033de:	8082                	ret

204033e0 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
204033e0:	715d                	addi	sp,sp,-80
204033e2:	c686                	sw	ra,76(sp)
204033e4:	c4a2                	sw	s0,72(sp)
204033e6:	c2ca                	sw	s2,68(sp)
204033e8:	c0ce                	sw	s3,64(sp)
204033ea:	de52                	sw	s4,60(sp)
204033ec:	dc56                	sw	s5,56(sp)
204033ee:	da5a                	sw	s6,52(sp)
204033f0:	d85e                	sw	s7,48(sp)
204033f2:	d662                	sw	s8,44(sp)
204033f4:	d466                	sw	s9,40(sp)
204033f6:	0880                	addi	s0,sp,80
204033f8:	faa42e23          	sw	a0,-68(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
204033fc:	fbc42783          	lw	a5,-68(s0)
20403400:	853e                	mv	a0,a5
20403402:	3725                	jal	2040332a <__metal_driver_sifive_clint0_control_base>
20403404:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20403408:	fcc42703          	lw	a4,-52(s0)
2040340c:	67b1                	lui	a5,0xc
2040340e:	17f1                	addi	a5,a5,-4
20403410:	97ba                	add	a5,a5,a4
20403412:	439c                	lw	a5,0(a5)
20403414:	fcf42423          	sw	a5,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20403418:	fcc42703          	lw	a4,-52(s0)
2040341c:	67b1                	lui	a5,0xc
2040341e:	17e1                	addi	a5,a5,-8
20403420:	97ba                	add	a5,a5,a4
20403422:	439c                	lw	a5,0(a5)
20403424:	fcf42223          	sw	a5,-60(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20403428:	fcc42703          	lw	a4,-52(s0)
2040342c:	67b1                	lui	a5,0xc
2040342e:	17f1                	addi	a5,a5,-4
20403430:	97ba                	add	a5,a5,a4
20403432:	439c                	lw	a5,0(a5)
20403434:	fc842703          	lw	a4,-56(s0)
20403438:	fcf718e3          	bne	a4,a5,20403408 <__metal_clint0_mtime_get+0x28>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
2040343c:	fc842783          	lw	a5,-56(s0)
20403440:	8c3e                	mv	s8,a5
20403442:	4c81                	li	s9,0
20403444:	000c1993          	slli	s3,s8,0x0
20403448:	4901                	li	s2,0
2040344a:	fc442783          	lw	a5,-60(s0)
2040344e:	8a3e                	mv	s4,a5
20403450:	4a81                	li	s5,0
20403452:	01496b33          	or	s6,s2,s4
20403456:	0159ebb3          	or	s7,s3,s5
2040345a:	87da                	mv	a5,s6
2040345c:	885e                	mv	a6,s7
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
2040345e:	853e                	mv	a0,a5
20403460:	85c2                	mv	a1,a6
20403462:	40b6                	lw	ra,76(sp)
20403464:	4426                	lw	s0,72(sp)
20403466:	4916                	lw	s2,68(sp)
20403468:	4986                	lw	s3,64(sp)
2040346a:	5a72                	lw	s4,60(sp)
2040346c:	5ae2                	lw	s5,56(sp)
2040346e:	5b52                	lw	s6,52(sp)
20403470:	5bc2                	lw	s7,48(sp)
20403472:	5c32                	lw	s8,44(sp)
20403474:	5ca2                	lw	s9,40(sp)
20403476:	6161                	addi	sp,sp,80
20403478:	8082                	ret

2040347a <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
2040347a:	7179                	addi	sp,sp,-48
2040347c:	d606                	sw	ra,44(sp)
2040347e:	d422                	sw	s0,40(sp)
20403480:	d24a                	sw	s2,36(sp)
20403482:	d04e                	sw	s3,32(sp)
20403484:	1800                	addi	s0,sp,48
20403486:	fca42e23          	sw	a0,-36(s0)
2040348a:	fcb42c23          	sw	a1,-40(s0)
2040348e:	fcc42823          	sw	a2,-48(s0)
20403492:	fcd42a23          	sw	a3,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20403496:	fdc42783          	lw	a5,-36(s0)
2040349a:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
2040349e:	fec42783          	lw	a5,-20(s0)
204034a2:	853e                	mv	a0,a5
204034a4:	3559                	jal	2040332a <__metal_driver_sifive_clint0_control_base>
204034a6:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
204034aa:	fd842783          	lw	a5,-40(s0)
204034ae:	078e                	slli	a5,a5,0x3
204034b0:	873e                	mv	a4,a5
204034b2:	fe842783          	lw	a5,-24(s0)
204034b6:	973e                	add	a4,a4,a5
204034b8:	6791                	lui	a5,0x4
204034ba:	0791                	addi	a5,a5,4
204034bc:	97ba                	add	a5,a5,a4
204034be:	873e                	mv	a4,a5
204034c0:	57fd                	li	a5,-1
204034c2:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
204034c4:	fd842783          	lw	a5,-40(s0)
204034c8:	078e                	slli	a5,a5,0x3
204034ca:	873e                	mv	a4,a5
204034cc:	fe842783          	lw	a5,-24(s0)
204034d0:	973e                	add	a4,a4,a5
204034d2:	6791                	lui	a5,0x4
204034d4:	97ba                	add	a5,a5,a4
204034d6:	873e                	mv	a4,a5
204034d8:	fd042783          	lw	a5,-48(s0)
204034dc:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
204034de:	fd442783          	lw	a5,-44(s0)
204034e2:	0007d913          	srli	s2,a5,0x0
204034e6:	4981                	li	s3,0
204034e8:	fd842783          	lw	a5,-40(s0)
204034ec:	078e                	slli	a5,a5,0x3
204034ee:	873e                	mv	a4,a5
204034f0:	fe842783          	lw	a5,-24(s0)
204034f4:	973e                	add	a4,a4,a5
204034f6:	6791                	lui	a5,0x4
204034f8:	0791                	addi	a5,a5,4
204034fa:	97ba                	add	a5,a5,a4
204034fc:	874a                	mv	a4,s2
204034fe:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20403500:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20403502:	853e                	mv	a0,a5
20403504:	50b2                	lw	ra,44(sp)
20403506:	5422                	lw	s0,40(sp)
20403508:	5912                	lw	s2,36(sp)
2040350a:	5982                	lw	s3,32(sp)
2040350c:	6145                	addi	sp,sp,48
2040350e:	8082                	ret

20403510 <_get_cpu_intc>:
_get_cpu_intc():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20403510:	1101                	addi	sp,sp,-32
20403512:	ce06                	sw	ra,28(sp)
20403514:	cc22                	sw	s0,24(sp)
20403516:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20403518:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
2040351c:	f14027f3          	csrr	a5,mhartid
20403520:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20403524:	fec42783          	lw	a5,-20(s0)
20403528:	853e                	mv	a0,a5
2040352a:	780040ef          	jal	ra,20407caa <metal_cpu_get>
2040352e:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20403532:	fe842503          	lw	a0,-24(s0)
20403536:	74e040ef          	jal	ra,20407c84 <metal_cpu_interrupt_controller>
2040353a:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
2040353c:	853e                	mv	a0,a5
2040353e:	40f2                	lw	ra,28(sp)
20403540:	4462                	lw	s0,24(sp)
20403542:	6105                	addi	sp,sp,32
20403544:	8082                	ret

20403546 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20403546:	7139                	addi	sp,sp,-64
20403548:	de06                	sw	ra,60(sp)
2040354a:	dc22                	sw	s0,56(sp)
2040354c:	0080                	addi	s0,sp,64
2040354e:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403552:	fcc42503          	lw	a0,-52(s0)
20403556:	3bed                	jal	20403350 <__metal_driver_sifive_clint0_num_interrupts>
20403558:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
2040355c:	fcc42783          	lw	a5,-52(s0)
20403560:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20403564:	fe442783          	lw	a5,-28(s0)
20403568:	43dc                	lw	a5,4(a5)
2040356a:	efa9                	bnez	a5,204035c4 <__metal_driver_riscv_clint0_init+0x7e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
2040356c:	fe042623          	sw	zero,-20(s0)
20403570:	a081                	j	204035b0 <__metal_driver_riscv_clint0_init+0x6a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403572:	fec42583          	lw	a1,-20(s0)
20403576:	fcc42503          	lw	a0,-52(s0)
2040357a:	3bed                	jal	20403374 <__metal_driver_sifive_clint0_interrupt_parents>
2040357c:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403580:	fec42583          	lw	a1,-20(s0)
20403584:	fcc42503          	lw	a0,-52(s0)
20403588:	3525                	jal	204033b0 <__metal_driver_sifive_clint0_interrupt_lines>
2040358a:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
2040358e:	fe042783          	lw	a5,-32(s0)
20403592:	439c                	lw	a5,0(a5)
20403594:	4fdc                	lw	a5,28(a5)
20403596:	fcc42683          	lw	a3,-52(s0)
2040359a:	4601                	li	a2,0
2040359c:	fdc42583          	lw	a1,-36(s0)
204035a0:	fe042503          	lw	a0,-32(s0)
204035a4:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
204035a6:	fec42783          	lw	a5,-20(s0)
204035aa:	0785                	addi	a5,a5,1
204035ac:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
204035b0:	fec42703          	lw	a4,-20(s0)
204035b4:	fe842783          	lw	a5,-24(s0)
204035b8:	faf74de3          	blt	a4,a5,20403572 <__metal_driver_riscv_clint0_init+0x2c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
204035bc:	fe442783          	lw	a5,-28(s0)
204035c0:	4705                	li	a4,1
204035c2:	c3d8                	sw	a4,4(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
204035c4:	0001                	nop
204035c6:	50f2                	lw	ra,60(sp)
204035c8:	5462                	lw	s0,56(sp)
204035ca:	6121                	addi	sp,sp,64
204035cc:	8082                	ret

204035ce <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
204035ce:	7139                	addi	sp,sp,-64
204035d0:	de06                	sw	ra,60(sp)
204035d2:	dc22                	sw	s0,56(sp)
204035d4:	0080                	addi	s0,sp,64
204035d6:	fca42623          	sw	a0,-52(s0)
204035da:	fcb42423          	sw	a1,-56(s0)
204035de:	fcc42223          	sw	a2,-60(s0)
204035e2:	fcd42023          	sw	a3,-64(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
204035e6:	57fd                	li	a5,-1
204035e8:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
204035ec:	3ee010ef          	jal	ra,204049da <__metal_controller_interrupt_vector_mode>
204035f0:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
204035f4:	fe042423          	sw	zero,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
204035f8:	3f21                	jal	20403510 <_get_cpu_intc>
204035fa:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204035fe:	fcc42503          	lw	a0,-52(s0)
20403602:	33b9                	jal	20403350 <__metal_driver_sifive_clint0_num_interrupts>
20403604:	fca42c23          	sw	a0,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20403608:	fe042703          	lw	a4,-32(s0)
2040360c:	4785                	li	a5,1
2040360e:	00f70863          	beq	a4,a5,2040361e <__metal_driver_riscv_clint0_register+0x50>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20403612:	fe042783          	lw	a5,-32(s0)
20403616:	c781                	beqz	a5,2040361e <__metal_driver_riscv_clint0_register+0x50>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20403618:	fec42783          	lw	a5,-20(s0)
2040361c:	a049                	j	2040369e <__metal_driver_riscv_clint0_register+0xd0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
2040361e:	fe042223          	sw	zero,-28(s0)
20403622:	a091                	j	20403666 <__metal_driver_riscv_clint0_register+0x98>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403624:	fe442583          	lw	a1,-28(s0)
20403628:	fcc42503          	lw	a0,-52(s0)
2040362c:	3351                	jal	204033b0 <__metal_driver_sifive_clint0_interrupt_lines>
2040362e:	fca42a23          	sw	a0,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403632:	fe442583          	lw	a1,-28(s0)
20403636:	fcc42503          	lw	a0,-52(s0)
2040363a:	3b2d                	jal	20403374 <__metal_driver_sifive_clint0_interrupt_parents>
2040363c:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20403640:	fdc42703          	lw	a4,-36(s0)
20403644:	fe842783          	lw	a5,-24(s0)
20403648:	00f71863          	bne	a4,a5,20403658 <__metal_driver_riscv_clint0_register+0x8a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
2040364c:	fc842703          	lw	a4,-56(s0)
20403650:	fd442783          	lw	a5,-44(s0)
20403654:	02f70063          	beq	a4,a5,20403674 <__metal_driver_riscv_clint0_register+0xa6>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20403658:	fe042423          	sw	zero,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
2040365c:	fe442783          	lw	a5,-28(s0)
20403660:	0785                	addi	a5,a5,1
20403662:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20403666:	fe442703          	lw	a4,-28(s0)
2040366a:	fd842783          	lw	a5,-40(s0)
2040366e:	faf74be3          	blt	a4,a5,20403624 <__metal_driver_riscv_clint0_register+0x56>
20403672:	a011                	j	20403676 <__metal_driver_riscv_clint0_register+0xa8>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20403674:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20403676:	fe842783          	lw	a5,-24(s0)
2040367a:	c385                	beqz	a5,2040369a <__metal_driver_riscv_clint0_register+0xcc>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
2040367c:	fe842783          	lw	a5,-24(s0)
20403680:	439c                	lw	a5,0(a5)
20403682:	4fdc                	lw	a5,28(a5)
20403684:	fc042683          	lw	a3,-64(s0)
20403688:	fc442603          	lw	a2,-60(s0)
2040368c:	fc842583          	lw	a1,-56(s0)
20403690:	fe842503          	lw	a0,-24(s0)
20403694:	9782                	jalr	a5
20403696:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
2040369a:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
2040369e:	853e                	mv	a0,a5
204036a0:	50f2                	lw	ra,60(sp)
204036a2:	5462                	lw	s0,56(sp)
204036a4:	6121                	addi	sp,sp,64
204036a6:	8082                	ret

204036a8 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
204036a8:	7179                	addi	sp,sp,-48
204036aa:	d622                	sw	s0,44(sp)
204036ac:	1800                	addi	s0,sp,48
204036ae:	fca42e23          	sw	a0,-36(s0)
204036b2:	fcb42c23          	sw	a1,-40(s0)
204036b6:	fcc42a23          	sw	a2,-44(s0)
204036ba:	fcd42823          	sw	a3,-48(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
204036be:	57fd                	li	a5,-1
204036c0:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
204036c4:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
204036c8:	853e                	mv	a0,a5
204036ca:	5432                	lw	s0,44(sp)
204036cc:	6145                	addi	sp,sp,48
204036ce:	8082                	ret

204036d0 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
204036d0:	1101                	addi	sp,sp,-32
204036d2:	ce06                	sw	ra,28(sp)
204036d4:	cc22                	sw	s0,24(sp)
204036d6:	1000                	addi	s0,sp,32
204036d8:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
204036dc:	2fe010ef          	jal	ra,204049da <__metal_controller_interrupt_vector_mode>
204036e0:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
204036e2:	853e                	mv	a0,a5
204036e4:	40f2                	lw	ra,28(sp)
204036e6:	4462                	lw	s0,24(sp)
204036e8:	6105                	addi	sp,sp,32
204036ea:	8082                	ret

204036ec <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
204036ec:	7179                	addi	sp,sp,-48
204036ee:	d606                	sw	ra,44(sp)
204036f0:	d422                	sw	s0,40(sp)
204036f2:	1800                	addi	s0,sp,48
204036f4:	fca42e23          	sw	a0,-36(s0)
204036f8:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
204036fc:	57fd                	li	a5,-1
204036fe:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20403702:	3539                	jal	20403510 <_get_cpu_intc>
20403704:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20403708:	fe842783          	lw	a5,-24(s0)
2040370c:	c395                	beqz	a5,20403730 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
2040370e:	fd842703          	lw	a4,-40(s0)
20403712:	4785                	li	a5,1
20403714:	00e7ef63          	bltu	a5,a4,20403732 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20403718:	fe842783          	lw	a5,-24(s0)
2040371c:	439c                	lw	a5,0(a5)
2040371e:	43dc                	lw	a5,4(a5)
20403720:	fd842583          	lw	a1,-40(s0)
20403724:	fe842503          	lw	a0,-24(s0)
20403728:	9782                	jalr	a5
2040372a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
2040372e:	a011                	j	20403732 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20403730:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20403732:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20403736:	853e                	mv	a0,a5
20403738:	50b2                	lw	ra,44(sp)
2040373a:	5422                	lw	s0,40(sp)
2040373c:	6145                	addi	sp,sp,48
2040373e:	8082                	ret

20403740 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20403740:	7139                	addi	sp,sp,-64
20403742:	de06                	sw	ra,60(sp)
20403744:	dc22                	sw	s0,56(sp)
20403746:	0080                	addi	s0,sp,64
20403748:	fca42623          	sw	a0,-52(s0)
2040374c:	fcb42423          	sw	a1,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20403750:	57fd                	li	a5,-1
20403752:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20403756:	fc842783          	lw	a5,-56(s0)
2040375a:	cbc1                	beqz	a5,204037ea <__metal_driver_riscv_clint0_enable+0xaa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
2040375c:	fe042423          	sw	zero,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20403760:	3b45                	jal	20403510 <_get_cpu_intc>
20403762:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20403766:	fcc42503          	lw	a0,-52(s0)
2040376a:	be7ff0ef          	jal	ra,20403350 <__metal_driver_sifive_clint0_num_interrupts>
2040376e:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20403772:	fe042223          	sw	zero,-28(s0)
20403776:	a0a1                	j	204037be <__metal_driver_riscv_clint0_enable+0x7e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403778:	fe442583          	lw	a1,-28(s0)
2040377c:	fcc42503          	lw	a0,-52(s0)
20403780:	c31ff0ef          	jal	ra,204033b0 <__metal_driver_sifive_clint0_interrupt_lines>
20403784:	fca42c23          	sw	a0,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403788:	fe442583          	lw	a1,-28(s0)
2040378c:	fcc42503          	lw	a0,-52(s0)
20403790:	be5ff0ef          	jal	ra,20403374 <__metal_driver_sifive_clint0_interrupt_parents>
20403794:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20403798:	fe042703          	lw	a4,-32(s0)
2040379c:	fe842783          	lw	a5,-24(s0)
204037a0:	00f71863          	bne	a4,a5,204037b0 <__metal_driver_riscv_clint0_enable+0x70>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
204037a4:	fc842703          	lw	a4,-56(s0)
204037a8:	fd842783          	lw	a5,-40(s0)
204037ac:	02f70063          	beq	a4,a5,204037cc <__metal_driver_riscv_clint0_enable+0x8c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
204037b0:	fe042423          	sw	zero,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204037b4:	fe442783          	lw	a5,-28(s0)
204037b8:	0785                	addi	a5,a5,1
204037ba:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
204037be:	fe442703          	lw	a4,-28(s0)
204037c2:	fdc42783          	lw	a5,-36(s0)
204037c6:	faf749e3          	blt	a4,a5,20403778 <__metal_driver_riscv_clint0_enable+0x38>
204037ca:	a011                	j	204037ce <__metal_driver_riscv_clint0_enable+0x8e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
204037cc:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
204037ce:	fe842783          	lw	a5,-24(s0)
204037d2:	cf81                	beqz	a5,204037ea <__metal_driver_riscv_clint0_enable+0xaa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
204037d4:	fe842783          	lw	a5,-24(s0)
204037d8:	439c                	lw	a5,0(a5)
204037da:	53dc                	lw	a5,36(a5)
204037dc:	fc842583          	lw	a1,-56(s0)
204037e0:	fe842503          	lw	a0,-24(s0)
204037e4:	9782                	jalr	a5
204037e6:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
204037ea:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
204037ee:	853e                	mv	a0,a5
204037f0:	50f2                	lw	ra,60(sp)
204037f2:	5462                	lw	s0,56(sp)
204037f4:	6121                	addi	sp,sp,64
204037f6:	8082                	ret

204037f8 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
204037f8:	7139                	addi	sp,sp,-64
204037fa:	de06                	sw	ra,60(sp)
204037fc:	dc22                	sw	s0,56(sp)
204037fe:	0080                	addi	s0,sp,64
20403800:	fca42623          	sw	a0,-52(s0)
20403804:	fcb42423          	sw	a1,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20403808:	57fd                	li	a5,-1
2040380a:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
2040380e:	fc842783          	lw	a5,-56(s0)
20403812:	cbc1                	beqz	a5,204038a2 <__metal_driver_riscv_clint0_disable+0xaa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20403814:	fe042423          	sw	zero,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20403818:	39e5                	jal	20403510 <_get_cpu_intc>
2040381a:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040381e:	fcc42503          	lw	a0,-52(s0)
20403822:	b2fff0ef          	jal	ra,20403350 <__metal_driver_sifive_clint0_num_interrupts>
20403826:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
2040382a:	fe042223          	sw	zero,-28(s0)
2040382e:	a0a1                	j	20403876 <__metal_driver_riscv_clint0_disable+0x7e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20403830:	fe442583          	lw	a1,-28(s0)
20403834:	fcc42503          	lw	a0,-52(s0)
20403838:	b79ff0ef          	jal	ra,204033b0 <__metal_driver_sifive_clint0_interrupt_lines>
2040383c:	fca42c23          	sw	a0,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20403840:	fe442583          	lw	a1,-28(s0)
20403844:	fcc42503          	lw	a0,-52(s0)
20403848:	b2dff0ef          	jal	ra,20403374 <__metal_driver_sifive_clint0_interrupt_parents>
2040384c:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20403850:	fe042703          	lw	a4,-32(s0)
20403854:	fe842783          	lw	a5,-24(s0)
20403858:	00f71863          	bne	a4,a5,20403868 <__metal_driver_riscv_clint0_disable+0x70>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
2040385c:	fc842703          	lw	a4,-56(s0)
20403860:	fd842783          	lw	a5,-40(s0)
20403864:	02f70063          	beq	a4,a5,20403884 <__metal_driver_riscv_clint0_disable+0x8c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20403868:	fe042423          	sw	zero,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2040386c:	fe442783          	lw	a5,-28(s0)
20403870:	0785                	addi	a5,a5,1
20403872:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20403876:	fe442703          	lw	a4,-28(s0)
2040387a:	fdc42783          	lw	a5,-36(s0)
2040387e:	faf749e3          	blt	a4,a5,20403830 <__metal_driver_riscv_clint0_disable+0x38>
20403882:	a011                	j	20403886 <__metal_driver_riscv_clint0_disable+0x8e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20403884:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20403886:	fe842783          	lw	a5,-24(s0)
2040388a:	cf81                	beqz	a5,204038a2 <__metal_driver_riscv_clint0_disable+0xaa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
2040388c:	fe842783          	lw	a5,-24(s0)
20403890:	439c                	lw	a5,0(a5)
20403892:	579c                	lw	a5,40(a5)
20403894:	fc842583          	lw	a1,-56(s0)
20403898:	fe842503          	lw	a0,-24(s0)
2040389c:	9782                	jalr	a5
2040389e:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
204038a2:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
204038a6:	853e                	mv	a0,a5
204038a8:	50f2                	lw	ra,60(sp)
204038aa:	5462                	lw	s0,56(sp)
204038ac:	6121                	addi	sp,sp,64
204038ae:	8082                	ret

204038b0 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
204038b0:	7179                	addi	sp,sp,-48
204038b2:	d606                	sw	ra,44(sp)
204038b4:	d422                	sw	s0,40(sp)
204038b6:	1800                	addi	s0,sp,48
204038b8:	fca42e23          	sw	a0,-36(s0)
204038bc:	fcb42c23          	sw	a1,-40(s0)
204038c0:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
204038c4:	57fd                	li	a5,-1
204038c6:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
204038ca:	fdc42783          	lw	a5,-36(s0)
204038ce:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
204038d2:	fdc42503          	lw	a0,-36(s0)
204038d6:	a55ff0ef          	jal	ra,2040332a <__metal_driver_sifive_clint0_control_base>
204038da:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
204038de:	fd842703          	lw	a4,-40(s0)
204038e2:	4789                	li	a5,2
204038e4:	04f70963          	beq	a4,a5,20403936 <__metal_driver_riscv_clint0_command_request+0x86>
204038e8:	fd842703          	lw	a4,-40(s0)
204038ec:	4789                	li	a5,2
204038ee:	00e7c863          	blt	a5,a4,204038fe <__metal_driver_riscv_clint0_command_request+0x4e>
204038f2:	fd842703          	lw	a4,-40(s0)
204038f6:	4785                	li	a5,1
204038f8:	00f70e63          	beq	a4,a5,20403914 <__metal_driver_riscv_clint0_command_request+0x64>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
204038fc:	a8f1                	j	204039d8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
204038fe:	fd842703          	lw	a4,-40(s0)
20403902:	478d                	li	a5,3
20403904:	04f70d63          	beq	a4,a5,2040395e <__metal_driver_riscv_clint0_command_request+0xae>
20403908:	fd842703          	lw	a4,-40(s0)
2040390c:	4791                	li	a5,4
2040390e:	08f70963          	beq	a4,a5,204039a0 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20403912:	a0d9                	j	204039d8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20403914:	fd442783          	lw	a5,-44(s0)
20403918:	cbcd                	beqz	a5,204039ca <__metal_driver_riscv_clint0_command_request+0x11a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
2040391a:	fe842503          	lw	a0,-24(s0)
2040391e:	ac3ff0ef          	jal	ra,204033e0 <__metal_clint0_mtime_get>
20403922:	87aa                	mv	a5,a0
20403924:	882e                	mv	a6,a1
20403926:	fd442703          	lw	a4,-44(s0)
2040392a:	c31c                	sw	a5,0(a4)
2040392c:	01072223          	sw	a6,4(a4) # 1000004 <__stack_size+0xffd804>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20403930:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20403934:	a859                	j	204039ca <__metal_driver_riscv_clint0_command_request+0x11a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20403936:	fd442783          	lw	a5,-44(s0)
2040393a:	cbd1                	beqz	a5,204039ce <__metal_driver_riscv_clint0_command_request+0x11e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
2040393c:	fd442783          	lw	a5,-44(s0)
20403940:	439c                	lw	a5,0(a5)
20403942:	fef42023          	sw	a5,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403946:	fe042783          	lw	a5,-32(s0)
2040394a:	078a                	slli	a5,a5,0x2
2040394c:	873e                	mv	a4,a5
2040394e:	fe442783          	lw	a5,-28(s0)
20403952:	97ba                	add	a5,a5,a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20403954:	0007a023          	sw	zero,0(a5) # 4000 <__stack_size+0x1800>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20403958:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040395c:	a88d                	j	204039ce <__metal_driver_riscv_clint0_command_request+0x11e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
2040395e:	fd442783          	lw	a5,-44(s0)
20403962:	cba5                	beqz	a5,204039d2 <__metal_driver_riscv_clint0_command_request+0x122>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20403964:	fd442783          	lw	a5,-44(s0)
20403968:	439c                	lw	a5,0(a5)
2040396a:	fef42023          	sw	a5,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040396e:	fe042783          	lw	a5,-32(s0)
20403972:	078a                	slli	a5,a5,0x2
20403974:	873e                	mv	a4,a5
20403976:	fe442783          	lw	a5,-28(s0)
2040397a:	97ba                	add	a5,a5,a4
2040397c:	873e                	mv	a4,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
2040397e:	4785                	li	a5,1
20403980:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20403982:	0480000f          	fence	o,i
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403986:	fe042783          	lw	a5,-32(s0)
2040398a:	078a                	slli	a5,a5,0x2
2040398c:	873e                	mv	a4,a5
2040398e:	fe442783          	lw	a5,-28(s0)
20403992:	97ba                	add	a5,a5,a4
20403994:	439c                	lw	a5,0(a5)
20403996:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
2040399a:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
2040399e:	a815                	j	204039d2 <__metal_driver_riscv_clint0_command_request+0x122>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
204039a0:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
204039a4:	fd442783          	lw	a5,-44(s0)
204039a8:	c79d                	beqz	a5,204039d6 <__metal_driver_riscv_clint0_command_request+0x126>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
204039aa:	fd442783          	lw	a5,-44(s0)
204039ae:	439c                	lw	a5,0(a5)
204039b0:	fef42023          	sw	a5,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204039b4:	fe042783          	lw	a5,-32(s0)
204039b8:	078a                	slli	a5,a5,0x2
204039ba:	873e                	mv	a4,a5
204039bc:	fe442783          	lw	a5,-28(s0)
204039c0:	97ba                	add	a5,a5,a4
204039c2:	439c                	lw	a5,0(a5)
204039c4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204039c8:	a039                	j	204039d6 <__metal_driver_riscv_clint0_command_request+0x126>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204039ca:	0001                	nop
204039cc:	a031                	j	204039d8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204039ce:	0001                	nop
204039d0:	a021                	j	204039d8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204039d2:	0001                	nop
204039d4:	a011                	j	204039d8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204039d6:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
204039d8:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
204039dc:	853e                	mv	a0,a5
204039de:	50b2                	lw	ra,44(sp)
204039e0:	5422                	lw	s0,40(sp)
204039e2:	6145                	addi	sp,sp,48
204039e4:	8082                	ret

204039e6 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
204039e6:	7179                	addi	sp,sp,-48
204039e8:	d606                	sw	ra,44(sp)
204039ea:	d422                	sw	s0,40(sp)
204039ec:	1800                	addi	s0,sp,48
204039ee:	fca42e23          	sw	a0,-36(s0)
204039f2:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
204039f6:	2e2040ef          	jal	ra,20407cd8 <metal_cpu_get_current_hartid>
204039fa:	87aa                	mv	a5,a0
204039fc:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20403a00:	fec40793          	addi	a5,s0,-20
20403a04:	863e                	mv	a2,a5
20403a06:	4589                	li	a1,2
20403a08:	fdc42503          	lw	a0,-36(s0)
20403a0c:	3555                	jal	204038b0 <__metal_driver_riscv_clint0_command_request>
20403a0e:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20403a10:	853e                	mv	a0,a5
20403a12:	50b2                	lw	ra,44(sp)
20403a14:	5422                	lw	s0,40(sp)
20403a16:	6145                	addi	sp,sp,48
20403a18:	8082                	ret

20403a1a <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20403a1a:	7179                	addi	sp,sp,-48
20403a1c:	d606                	sw	ra,44(sp)
20403a1e:	d422                	sw	s0,40(sp)
20403a20:	1800                	addi	s0,sp,48
20403a22:	fca42e23          	sw	a0,-36(s0)
20403a26:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20403a2a:	2ae040ef          	jal	ra,20407cd8 <metal_cpu_get_current_hartid>
20403a2e:	87aa                	mv	a5,a0
20403a30:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20403a34:	fec40793          	addi	a5,s0,-20
20403a38:	863e                	mv	a2,a5
20403a3a:	458d                	li	a1,3
20403a3c:	fdc42503          	lw	a0,-36(s0)
20403a40:	3d85                	jal	204038b0 <__metal_driver_riscv_clint0_command_request>
20403a42:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20403a44:	853e                	mv	a0,a5
20403a46:	50b2                	lw	ra,44(sp)
20403a48:	5422                	lw	s0,40(sp)
20403a4a:	6145                	addi	sp,sp,48
20403a4c:	8082                	ret

20403a4e <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:246



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20403a4e:	1101                	addi	sp,sp,-32
20403a50:	ce22                	sw	s0,28(sp)
20403a52:	1000                	addi	s0,sp,32
20403a54:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:247
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403a58:	fec42703          	lw	a4,-20(s0)
20403a5c:	82018793          	addi	a5,gp,-2016 # 800007e8 <__metal_dt_cpu_0>
20403a60:	00f71463          	bne	a4,a5,20403a68 <__metal_driver_cpu_hartid+0x1a>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:248
		return 0;
20403a64:	4781                	li	a5,0
20403a66:	a011                	j	20403a6a <__metal_driver_cpu_hartid+0x1c>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:251
	}
	else {
		return -1;
20403a68:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:253
	}
}
20403a6a:	853e                	mv	a0,a5
20403a6c:	4472                	lw	s0,28(sp)
20403a6e:	6105                	addi	sp,sp,32
20403a70:	8082                	ret

20403a72 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:256

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20403a72:	1101                	addi	sp,sp,-32
20403a74:	ce22                	sw	s0,28(sp)
20403a76:	1000                	addi	s0,sp,32
20403a78:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:257
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403a7c:	fec42703          	lw	a4,-20(s0)
20403a80:	82018793          	addi	a5,gp,-2016 # 800007e8 <__metal_dt_cpu_0>
20403a84:	00f71763          	bne	a4,a5,20403a92 <__metal_driver_cpu_timebase+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:258
		return 1000000;
20403a88:	000f47b7          	lui	a5,0xf4
20403a8c:	24078793          	addi	a5,a5,576 # f4240 <__stack_size+0xf1a40>
20403a90:	a011                	j	20403a94 <__metal_driver_cpu_timebase+0x22>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:261
	}
	else {
		return 0;
20403a92:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:263
	}
}
20403a94:	853e                	mv	a0,a5
20403a96:	4472                	lw	s0,28(sp)
20403a98:	6105                	addi	sp,sp,32
20403a9a:	8082                	ret

20403a9c <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:266

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20403a9c:	1101                	addi	sp,sp,-32
20403a9e:	ce22                	sw	s0,28(sp)
20403aa0:	1000                	addi	s0,sp,32
20403aa2:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:267
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20403aa6:	fec42703          	lw	a4,-20(s0)
20403aaa:	82018793          	addi	a5,gp,-2016 # 800007e8 <__metal_dt_cpu_0>
20403aae:	00f71763          	bne	a4,a5,20403abc <__metal_driver_cpu_interrupt_controller+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:268
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20403ab2:	800007b7          	lui	a5,0x80000
20403ab6:	08878793          	addi	a5,a5,136 # 80000088 <metal_segment_heap_target_end+0xffffc7d4>
20403aba:	a011                	j	20403abe <__metal_driver_cpu_interrupt_controller+0x22>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:271
	}
	else {
		return NULL;
20403abc:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:273
	}
}
20403abe:	853e                	mv	a0,a5
20403ac0:	4472                	lw	s0,28(sp)
20403ac2:	6105                	addi	sp,sp,32
20403ac4:	8082                	ret

20403ac6 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20403ac6:	1101                	addi	sp,sp,-32
20403ac8:	ce22                	sw	s0,28(sp)
20403aca:	1000                	addi	s0,sp,32
20403acc:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20403ad0:	fec42783          	lw	a5,-20(s0)
20403ad4:	00f04c63          	bgtz	a5,20403aec <__metal_driver_cpu_get+0x26>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20403ad8:	800007b7          	lui	a5,0x80000
20403adc:	fec42703          	lw	a4,-20(s0)
20403ae0:	070a                	slli	a4,a4,0x2
20403ae2:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20403ae6:	97ba                	add	a5,a5,a4
20403ae8:	439c                	lw	a5,0(a5)
20403aea:	a011                	j	20403aee <__metal_driver_cpu_get+0x28>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20403aec:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20403aee:	853e                	mv	a0,a5
20403af0:	4472                	lw	s0,28(sp)
20403af2:	6105                	addi	sp,sp,32
20403af4:	8082                	ret

20403af6 <__metal_myhart_id>:
__metal_myhart_id():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20403af6:	1101                	addi	sp,sp,-32
20403af8:	ce22                	sw	s0,28(sp)
20403afa:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20403afc:	f14027f3          	csrr	a5,mhartid
20403b00:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20403b04:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20403b08:	853e                	mv	a0,a5
20403b0a:	4472                	lw	s0,28(sp)
20403b0c:	6105                	addi	sp,sp,32
20403b0e:	8082                	ret

20403b10 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20403b10:	1101                	addi	sp,sp,-32
20403b12:	ce22                	sw	s0,28(sp)
20403b14:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20403b16:	47a1                	li	a5,8
20403b18:	3007a7f3          	csrrs	a5,mstatus,a5
20403b1c:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20403b20:	0001                	nop
20403b22:	4472                	lw	s0,28(sp)
20403b24:	6105                	addi	sp,sp,32
20403b26:	8082                	ret

20403b28 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20403b28:	1101                	addi	sp,sp,-32
20403b2a:	ce22                	sw	s0,28(sp)
20403b2c:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20403b2e:	47a1                	li	a5,8
20403b30:	3007b7f3          	csrrc	a5,mstatus,a5
20403b34:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20403b38:	0001                	nop
20403b3a:	4472                	lw	s0,28(sp)
20403b3c:	6105                	addi	sp,sp,32
20403b3e:	8082                	ret

20403b40 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20403b40:	1101                	addi	sp,sp,-32
20403b42:	ce22                	sw	s0,28(sp)
20403b44:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20403b46:	47a1                	li	a5,8
20403b48:	3047a7f3          	csrrs	a5,mie,a5
20403b4c:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20403b50:	0001                	nop
20403b52:	4472                	lw	s0,28(sp)
20403b54:	6105                	addi	sp,sp,32
20403b56:	8082                	ret

20403b58 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20403b58:	1101                	addi	sp,sp,-32
20403b5a:	ce22                	sw	s0,28(sp)
20403b5c:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20403b5e:	47a1                	li	a5,8
20403b60:	3047b7f3          	csrrc	a5,mie,a5
20403b64:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20403b68:	0001                	nop
20403b6a:	4472                	lw	s0,28(sp)
20403b6c:	6105                	addi	sp,sp,32
20403b6e:	8082                	ret

20403b70 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20403b70:	1101                	addi	sp,sp,-32
20403b72:	ce22                	sw	s0,28(sp)
20403b74:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20403b76:	08000793          	li	a5,128
20403b7a:	3047a7f3          	csrrs	a5,mie,a5
20403b7e:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20403b82:	0001                	nop
20403b84:	4472                	lw	s0,28(sp)
20403b86:	6105                	addi	sp,sp,32
20403b88:	8082                	ret

20403b8a <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20403b8a:	1101                	addi	sp,sp,-32
20403b8c:	ce22                	sw	s0,28(sp)
20403b8e:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20403b90:	08000793          	li	a5,128
20403b94:	3047b7f3          	csrrc	a5,mie,a5
20403b98:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20403b9c:	0001                	nop
20403b9e:	4472                	lw	s0,28(sp)
20403ba0:	6105                	addi	sp,sp,32
20403ba2:	8082                	ret

20403ba4 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20403ba4:	1101                	addi	sp,sp,-32
20403ba6:	ce22                	sw	s0,28(sp)
20403ba8:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403baa:	6785                	lui	a5,0x1
20403bac:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20403bb0:	3047a7f3          	csrrs	a5,mie,a5
20403bb4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20403bb8:	0001                	nop
20403bba:	4472                	lw	s0,28(sp)
20403bbc:	6105                	addi	sp,sp,32
20403bbe:	8082                	ret

20403bc0 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20403bc0:	1101                	addi	sp,sp,-32
20403bc2:	ce22                	sw	s0,28(sp)
20403bc4:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20403bc6:	6785                	lui	a5,0x1
20403bc8:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20403bcc:	3047b7f3          	csrrc	a5,mie,a5
20403bd0:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20403bd4:	0001                	nop
20403bd6:	4472                	lw	s0,28(sp)
20403bd8:	6105                	addi	sp,sp,32
20403bda:	8082                	ret

20403bdc <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20403bdc:	7179                	addi	sp,sp,-48
20403bde:	d622                	sw	s0,44(sp)
20403be0:	1800                	addi	s0,sp,48
20403be2:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20403be6:	fdc42783          	lw	a5,-36(s0)
20403bea:	4705                	li	a4,1
20403bec:	00f717b3          	sll	a5,a4,a5
20403bf0:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20403bf4:	fec42783          	lw	a5,-20(s0)
20403bf8:	3047a7f3          	csrrs	a5,mie,a5
20403bfc:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20403c00:	0001                	nop
20403c02:	5432                	lw	s0,44(sp)
20403c04:	6145                	addi	sp,sp,48
20403c06:	8082                	ret

20403c08 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20403c08:	7179                	addi	sp,sp,-48
20403c0a:	d622                	sw	s0,44(sp)
20403c0c:	1800                	addi	s0,sp,48
20403c0e:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20403c12:	fdc42783          	lw	a5,-36(s0)
20403c16:	4705                	li	a4,1
20403c18:	00f717b3          	sll	a5,a4,a5
20403c1c:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20403c20:	fec42783          	lw	a5,-20(s0)
20403c24:	3047b7f3          	csrrc	a5,mie,a5
20403c28:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20403c2c:	0001                	nop
20403c2e:	5432                	lw	s0,44(sp)
20403c30:	6145                	addi	sp,sp,48
20403c32:	8082                	ret

20403c34 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20403c34:	1101                	addi	sp,sp,-32
20403c36:	ce06                	sw	ra,28(sp)
20403c38:	cc22                	sw	s0,24(sp)
20403c3a:	1000                	addi	s0,sp,32
20403c3c:	fea42623          	sw	a0,-20(s0)
20403c40:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20403c44:	06400513          	li	a0,100
20403c48:	292040ef          	jal	ra,20407eda <metal_shutdown>

20403c4c <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20403c4c:	1101                	addi	sp,sp,-32
20403c4e:	ce06                	sw	ra,28(sp)
20403c50:	cc22                	sw	s0,24(sp)
20403c52:	1000                	addi	s0,sp,32
20403c54:	fea42623          	sw	a0,-20(s0)
20403c58:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20403c5c:	0c800513          	li	a0,200
20403c60:	27a040ef          	jal	ra,20407eda <metal_shutdown>

20403c64 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20403c64:	715d                	addi	sp,sp,-80
20403c66:	c686                	sw	ra,76(sp)
20403c68:	c496                	sw	t0,72(sp)
20403c6a:	c29a                	sw	t1,68(sp)
20403c6c:	c09e                	sw	t2,64(sp)
20403c6e:	de22                	sw	s0,60(sp)
20403c70:	dc2a                	sw	a0,56(sp)
20403c72:	da2e                	sw	a1,52(sp)
20403c74:	d832                	sw	a2,48(sp)
20403c76:	d636                	sw	a3,44(sp)
20403c78:	d43a                	sw	a4,40(sp)
20403c7a:	d23e                	sw	a5,36(sp)
20403c7c:	d042                	sw	a6,32(sp)
20403c7e:	ce46                	sw	a7,28(sp)
20403c80:	cc72                	sw	t3,24(sp)
20403c82:	ca76                	sw	t4,20(sp)
20403c84:	c87a                	sw	t5,16(sp)
20403c86:	c67e                	sw	t6,12(sp)
20403c88:	0880                	addi	s0,sp,80
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20403c8a:	12c00513          	li	a0,300
20403c8e:	24c040ef          	jal	ra,20407eda <metal_shutdown>

20403c92 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20403c92:	711d                	addi	sp,sp,-96
20403c94:	ce86                	sw	ra,92(sp)
20403c96:	cc96                	sw	t0,88(sp)
20403c98:	ca9a                	sw	t1,84(sp)
20403c9a:	c89e                	sw	t2,80(sp)
20403c9c:	c6a2                	sw	s0,76(sp)
20403c9e:	c4aa                	sw	a0,72(sp)
20403ca0:	c2ae                	sw	a1,68(sp)
20403ca2:	c0b2                	sw	a2,64(sp)
20403ca4:	de36                	sw	a3,60(sp)
20403ca6:	dc3a                	sw	a4,56(sp)
20403ca8:	da3e                	sw	a5,52(sp)
20403caa:	d842                	sw	a6,48(sp)
20403cac:	d646                	sw	a7,44(sp)
20403cae:	d472                	sw	t3,40(sp)
20403cb0:	d276                	sw	t4,36(sp)
20403cb2:	d07a                	sw	t5,32(sp)
20403cb4:	ce7e                	sw	t6,28(sp)
20403cb6:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403cb8:	3d3d                	jal	20403af6 <__metal_myhart_id>
20403cba:	872a                	mv	a4,a0
20403cbc:	800007b7          	lui	a5,0x80000
20403cc0:	070a                	slli	a4,a4,0x2
20403cc2:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20403cc6:	97ba                	add	a5,a5,a4
20403cc8:	439c                	lw	a5,0(a5)
20403cca:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20403cce:	fac42783          	lw	a5,-84(s0)
20403cd2:	c785                	beqz	a5,20403cfa <metal_software_interrupt_vector_handler+0x68>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403cd4:	fac42503          	lw	a0,-84(s0)
20403cd8:	33d1                	jal	20403a9c <__metal_driver_cpu_interrupt_controller>
20403cda:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20403cde:	fa842783          	lw	a5,-88(s0)
20403ce2:	0e07a783          	lw	a5,224(a5)
20403ce6:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20403cea:	fa842783          	lw	a5,-88(s0)
20403cee:	0d87a783          	lw	a5,216(a5)
20403cf2:	fa442583          	lw	a1,-92(s0)
20403cf6:	450d                	li	a0,3
20403cf8:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20403cfa:	0001                	nop
20403cfc:	40f6                	lw	ra,92(sp)
20403cfe:	42e6                	lw	t0,88(sp)
20403d00:	4356                	lw	t1,84(sp)
20403d02:	43c6                	lw	t2,80(sp)
20403d04:	4436                	lw	s0,76(sp)
20403d06:	4526                	lw	a0,72(sp)
20403d08:	4596                	lw	a1,68(sp)
20403d0a:	4606                	lw	a2,64(sp)
20403d0c:	56f2                	lw	a3,60(sp)
20403d0e:	5762                	lw	a4,56(sp)
20403d10:	57d2                	lw	a5,52(sp)
20403d12:	5842                	lw	a6,48(sp)
20403d14:	58b2                	lw	a7,44(sp)
20403d16:	5e22                	lw	t3,40(sp)
20403d18:	5e92                	lw	t4,36(sp)
20403d1a:	5f02                	lw	t5,32(sp)
20403d1c:	4ff2                	lw	t6,28(sp)
20403d1e:	6125                	addi	sp,sp,96
20403d20:	30200073          	mret

20403d24 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20403d24:	7179                	addi	sp,sp,-48
20403d26:	d606                	sw	ra,44(sp)
20403d28:	d422                	sw	s0,40(sp)
20403d2a:	1800                	addi	s0,sp,48
20403d2c:	fca42e23          	sw	a0,-36(s0)
20403d30:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403d34:	33c9                	jal	20403af6 <__metal_myhart_id>
20403d36:	872a                	mv	a4,a0
20403d38:	800007b7          	lui	a5,0x80000
20403d3c:	070a                	slli	a4,a4,0x2
20403d3e:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20403d42:	97ba                	add	a5,a5,a4
20403d44:	439c                	lw	a5,0(a5)
20403d46:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20403d4a:	342027f3          	csrr	a5,mcause
20403d4e:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20403d52:	fec42783          	lw	a5,-20(s0)
20403d56:	c795                	beqz	a5,20403d82 <__metal_default_sw_handler+0x5e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403d58:	fec42503          	lw	a0,-20(s0)
20403d5c:	3381                	jal	20403a9c <__metal_driver_cpu_interrupt_controller>
20403d5e:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20403d62:	fe842783          	lw	a5,-24(s0)
20403d66:	3ff7f793          	andi	a5,a5,1023
20403d6a:	fe442703          	lw	a4,-28(s0)
20403d6e:	0e078793          	addi	a5,a5,224
20403d72:	078a                	slli	a5,a5,0x2
20403d74:	97ba                	add	a5,a5,a4
20403d76:	479c                	lw	a5,8(a5)
20403d78:	fdc42583          	lw	a1,-36(s0)
20403d7c:	fec42503          	lw	a0,-20(s0)
20403d80:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20403d82:	0001                	nop
20403d84:	50b2                	lw	ra,44(sp)
20403d86:	5422                	lw	s0,40(sp)
20403d88:	6145                	addi	sp,sp,48
20403d8a:	8082                	ret

20403d8c <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20403d8c:	711d                	addi	sp,sp,-96
20403d8e:	ce86                	sw	ra,92(sp)
20403d90:	cc96                	sw	t0,88(sp)
20403d92:	ca9a                	sw	t1,84(sp)
20403d94:	c89e                	sw	t2,80(sp)
20403d96:	c6a2                	sw	s0,76(sp)
20403d98:	c4aa                	sw	a0,72(sp)
20403d9a:	c2ae                	sw	a1,68(sp)
20403d9c:	c0b2                	sw	a2,64(sp)
20403d9e:	de36                	sw	a3,60(sp)
20403da0:	dc3a                	sw	a4,56(sp)
20403da2:	da3e                	sw	a5,52(sp)
20403da4:	d842                	sw	a6,48(sp)
20403da6:	d646                	sw	a7,44(sp)
20403da8:	d472                	sw	t3,40(sp)
20403daa:	d276                	sw	t4,36(sp)
20403dac:	d07a                	sw	t5,32(sp)
20403dae:	ce7e                	sw	t6,28(sp)
20403db0:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403db2:	3391                	jal	20403af6 <__metal_myhart_id>
20403db4:	872a                	mv	a4,a0
20403db6:	800007b7          	lui	a5,0x80000
20403dba:	070a                	slli	a4,a4,0x2
20403dbc:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20403dc0:	97ba                	add	a5,a5,a4
20403dc2:	439c                	lw	a5,0(a5)
20403dc4:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20403dc8:	fac42783          	lw	a5,-84(s0)
20403dcc:	c78d                	beqz	a5,20403df6 <metal_timer_interrupt_vector_handler+0x6a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403dce:	fac42503          	lw	a0,-84(s0)
20403dd2:	ccbff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20403dd6:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20403dda:	fa842783          	lw	a5,-88(s0)
20403dde:	1407a783          	lw	a5,320(a5)
20403de2:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20403de6:	fa842783          	lw	a5,-88(s0)
20403dea:	1387a783          	lw	a5,312(a5)
20403dee:	fa442583          	lw	a1,-92(s0)
20403df2:	451d                	li	a0,7
20403df4:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20403df6:	0001                	nop
20403df8:	40f6                	lw	ra,92(sp)
20403dfa:	42e6                	lw	t0,88(sp)
20403dfc:	4356                	lw	t1,84(sp)
20403dfe:	43c6                	lw	t2,80(sp)
20403e00:	4436                	lw	s0,76(sp)
20403e02:	4526                	lw	a0,72(sp)
20403e04:	4596                	lw	a1,68(sp)
20403e06:	4606                	lw	a2,64(sp)
20403e08:	56f2                	lw	a3,60(sp)
20403e0a:	5762                	lw	a4,56(sp)
20403e0c:	57d2                	lw	a5,52(sp)
20403e0e:	5842                	lw	a6,48(sp)
20403e10:	58b2                	lw	a7,44(sp)
20403e12:	5e22                	lw	t3,40(sp)
20403e14:	5e92                	lw	t4,36(sp)
20403e16:	5f02                	lw	t5,32(sp)
20403e18:	4ff2                	lw	t6,28(sp)
20403e1a:	6125                	addi	sp,sp,96
20403e1c:	30200073          	mret

20403e20 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20403e20:	7179                	addi	sp,sp,-48
20403e22:	d606                	sw	ra,44(sp)
20403e24:	d422                	sw	s0,40(sp)
20403e26:	1800                	addi	s0,sp,48
20403e28:	fca42e23          	sw	a0,-36(s0)
20403e2c:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20403e30:	cc7ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20403e34:	87aa                	mv	a5,a0
20403e36:	853e                	mv	a0,a5
20403e38:	c8fff0ef          	jal	ra,20403ac6 <__metal_driver_cpu_get>
20403e3c:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20403e40:	fec42503          	lw	a0,-20(s0)
20403e44:	1f4010ef          	jal	ra,20405038 <__metal_driver_cpu_mtime_get>
20403e48:	fea42023          	sw	a0,-32(s0)
20403e4c:	feb42223          	sw	a1,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20403e50:	fe042783          	lw	a5,-32(s0)
20403e54:	fe442803          	lw	a6,-28(s0)
20403e58:	45a9                	li	a1,10
20403e5a:	4601                	li	a2,0
20403e5c:	00b786b3          	add	a3,a5,a1
20403e60:	8536                	mv	a0,a3
20403e62:	00f53533          	sltu	a0,a0,a5
20403e66:	00c80733          	add	a4,a6,a2
20403e6a:	00e507b3          	add	a5,a0,a4
20403e6e:	873e                	mv	a4,a5
20403e70:	87b6                	mv	a5,a3
20403e72:	883a                	mv	a6,a4
20403e74:	85be                	mv	a1,a5
20403e76:	8642                	mv	a2,a6
20403e78:	fec42503          	lw	a0,-20(s0)
20403e7c:	222010ef          	jal	ra,2040509e <__metal_driver_cpu_mtimecmp_set>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20403e80:	0001                	nop
20403e82:	50b2                	lw	ra,44(sp)
20403e84:	5422                	lw	s0,40(sp)
20403e86:	6145                	addi	sp,sp,48
20403e88:	8082                	ret
	...

20403f00 <__metal_exception_handler>:
__metal_exception_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20403f00:	7119                	addi	sp,sp,-128
20403f02:	de86                	sw	ra,124(sp)
20403f04:	dc96                	sw	t0,120(sp)
20403f06:	da9a                	sw	t1,116(sp)
20403f08:	d89e                	sw	t2,112(sp)
20403f0a:	d6a2                	sw	s0,108(sp)
20403f0c:	d4aa                	sw	a0,104(sp)
20403f0e:	d2ae                	sw	a1,100(sp)
20403f10:	d0b2                	sw	a2,96(sp)
20403f12:	ceb6                	sw	a3,92(sp)
20403f14:	ccba                	sw	a4,88(sp)
20403f16:	cabe                	sw	a5,84(sp)
20403f18:	c8c2                	sw	a6,80(sp)
20403f1a:	c6c6                	sw	a7,76(sp)
20403f1c:	c4f2                	sw	t3,72(sp)
20403f1e:	c2f6                	sw	t4,68(sp)
20403f20:	c0fa                	sw	t5,64(sp)
20403f22:	de7e                	sw	t6,60(sp)
20403f24:	0100                	addi	s0,sp,128
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403f26:	bd1ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20403f2a:	872a                	mv	a4,a0
20403f2c:	800007b7          	lui	a5,0x80000
20403f30:	070a                	slli	a4,a4,0x2
20403f32:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20403f36:	97ba                	add	a5,a5,a4
20403f38:	439c                	lw	a5,0(a5)
20403f3a:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20403f3e:	342027f3          	csrr	a5,mcause
20403f42:	faf42423          	sw	a5,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403f46:	341027f3          	csrr	a5,mepc
20403f4a:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20403f4e:	343027f3          	csrr	a5,mtval
20403f52:	faf42023          	sw	a5,-96(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20403f56:	305027f3          	csrr	a5,mtvec
20403f5a:	f8f42e23          	sw	a5,-100(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20403f5e:	fac42783          	lw	a5,-84(s0)
20403f62:	c7e9                	beqz	a5,2040402c <__metal_exception_handler+0x12c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403f64:	fac42503          	lw	a0,-84(s0)
20403f68:	b35ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20403f6c:	f8a42c23          	sw	a0,-104(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20403f70:	fa842783          	lw	a5,-88(s0)
20403f74:	3ff7f793          	andi	a5,a5,1023
20403f78:	f8f42a23          	sw	a5,-108(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20403f7c:	fa842783          	lw	a5,-88(s0)
20403f80:	0807d863          	bgez	a5,20404010 <__metal_exception_handler+0x110>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403f84:	f9442703          	lw	a4,-108(s0)
20403f88:	47ad                	li	a5,11
20403f8a:	00e7d763          	bge	a5,a4,20403f98 <__metal_exception_handler+0x98>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20403f8e:	f9c42783          	lw	a5,-100(s0)
20403f92:	03f7f793          	andi	a5,a5,63
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403f96:	ef9d                	bnez	a5,20403fd4 <__metal_exception_handler+0xd4>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20403f98:	f9842683          	lw	a3,-104(s0)
20403f9c:	f9442703          	lw	a4,-108(s0)
20403fa0:	87ba                	mv	a5,a4
20403fa2:	0786                	slli	a5,a5,0x1
20403fa4:	97ba                	add	a5,a5,a4
20403fa6:	078e                	slli	a5,a5,0x3
20403fa8:	97b6                	add	a5,a5,a3
20403faa:	0987a783          	lw	a5,152(a5)
20403fae:	f8f42623          	sw	a5,-116(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20403fb2:	f9842683          	lw	a3,-104(s0)
20403fb6:	f9442703          	lw	a4,-108(s0)
20403fba:	87ba                	mv	a5,a4
20403fbc:	0786                	slli	a5,a5,0x1
20403fbe:	97ba                	add	a5,a5,a4
20403fc0:	078e                	slli	a5,a5,0x3
20403fc2:	97b6                	add	a5,a5,a3
20403fc4:	0907a783          	lw	a5,144(a5)
20403fc8:	f8c42583          	lw	a1,-116(s0)
20403fcc:	f9442503          	lw	a0,-108(s0)
20403fd0:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20403fd2:	a8a9                	j	2040402c <__metal_exception_handler+0x12c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20403fd4:	f9c42783          	lw	a5,-100(s0)
20403fd8:	03f7f713          	andi	a4,a5,63
20403fdc:	4789                	li	a5,2
20403fde:	04f71763          	bne	a4,a5,2040402c <__metal_exception_handler+0x12c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20403fe2:	307027f3          	csrr	a5,mtvt
20403fe6:	f8f42823          	sw	a5,-112(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403fea:	f9842783          	lw	a5,-104(s0)
20403fee:	0dc7a783          	lw	a5,220(a5)
20403ff2:	f8f42623          	sw	a5,-116(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20403ff6:	f9042783          	lw	a5,-112(s0)
20403ffa:	439c                	lw	a5,0(a5)
20403ffc:	f8f42423          	sw	a5,-120(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20404000:	f8842783          	lw	a5,-120(s0)
20404004:	f8c42583          	lw	a1,-116(s0)
20404008:	f9442503          	lw	a0,-108(s0)
2040400c:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040400e:	a839                	j	2040402c <__metal_exception_handler+0x12c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20404010:	f9842703          	lw	a4,-104(s0)
20404014:	f9442783          	lw	a5,-108(s0)
20404018:	0e078793          	addi	a5,a5,224
2040401c:	078a                	slli	a5,a5,0x2
2040401e:	97ba                	add	a5,a5,a4
20404020:	479c                	lw	a5,8(a5)
20404022:	f9442583          	lw	a1,-108(s0)
20404026:	fac42503          	lw	a0,-84(s0)
2040402a:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
2040402c:	50f6                	lw	ra,124(sp)
2040402e:	52e6                	lw	t0,120(sp)
20404030:	5356                	lw	t1,116(sp)
20404032:	53c6                	lw	t2,112(sp)
20404034:	5436                	lw	s0,108(sp)
20404036:	5526                	lw	a0,104(sp)
20404038:	5596                	lw	a1,100(sp)
2040403a:	5606                	lw	a2,96(sp)
2040403c:	46f6                	lw	a3,92(sp)
2040403e:	4766                	lw	a4,88(sp)
20404040:	47d6                	lw	a5,84(sp)
20404042:	4846                	lw	a6,80(sp)
20404044:	48b6                	lw	a7,76(sp)
20404046:	4e26                	lw	t3,72(sp)
20404048:	4e96                	lw	t4,68(sp)
2040404a:	4f06                	lw	t5,64(sp)
2040404c:	5ff2                	lw	t6,60(sp)
2040404e:	6109                	addi	sp,sp,128
20404050:	30200073          	mret
	...

2040407a <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
2040407a:	711d                	addi	sp,sp,-96
2040407c:	ce86                	sw	ra,92(sp)
2040407e:	cc96                	sw	t0,88(sp)
20404080:	ca9a                	sw	t1,84(sp)
20404082:	c89e                	sw	t2,80(sp)
20404084:	c6a2                	sw	s0,76(sp)
20404086:	c4aa                	sw	a0,72(sp)
20404088:	c2ae                	sw	a1,68(sp)
2040408a:	c0b2                	sw	a2,64(sp)
2040408c:	de36                	sw	a3,60(sp)
2040408e:	dc3a                	sw	a4,56(sp)
20404090:	da3e                	sw	a5,52(sp)
20404092:	d842                	sw	a6,48(sp)
20404094:	d646                	sw	a7,44(sp)
20404096:	d472                	sw	t3,40(sp)
20404098:	d276                	sw	t4,36(sp)
2040409a:	d07a                	sw	t5,32(sp)
2040409c:	ce7e                	sw	t6,28(sp)
2040409e:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204040a0:	a57ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
204040a4:	872a                	mv	a4,a0
204040a6:	800007b7          	lui	a5,0x80000
204040aa:	070a                	slli	a4,a4,0x2
204040ac:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
204040b0:	97ba                	add	a5,a5,a4
204040b2:	439c                	lw	a5,0(a5)
204040b4:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
204040b8:	fac42783          	lw	a5,-84(s0)
204040bc:	c78d                	beqz	a5,204040e6 <metal_lc0_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204040be:	fac42503          	lw	a0,-84(s0)
204040c2:	9dbff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204040c6:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
204040ca:	fa842783          	lw	a5,-88(s0)
204040ce:	2187a783          	lw	a5,536(a5)
204040d2:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
204040d6:	fa842783          	lw	a5,-88(s0)
204040da:	2107a783          	lw	a5,528(a5)
204040de:	fa442583          	lw	a1,-92(s0)
204040e2:	4541                	li	a0,16
204040e4:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
204040e6:	0001                	nop
204040e8:	40f6                	lw	ra,92(sp)
204040ea:	42e6                	lw	t0,88(sp)
204040ec:	4356                	lw	t1,84(sp)
204040ee:	43c6                	lw	t2,80(sp)
204040f0:	4436                	lw	s0,76(sp)
204040f2:	4526                	lw	a0,72(sp)
204040f4:	4596                	lw	a1,68(sp)
204040f6:	4606                	lw	a2,64(sp)
204040f8:	56f2                	lw	a3,60(sp)
204040fa:	5762                	lw	a4,56(sp)
204040fc:	57d2                	lw	a5,52(sp)
204040fe:	5842                	lw	a6,48(sp)
20404100:	58b2                	lw	a7,44(sp)
20404102:	5e22                	lw	t3,40(sp)
20404104:	5e92                	lw	t4,36(sp)
20404106:	5f02                	lw	t5,32(sp)
20404108:	4ff2                	lw	t6,28(sp)
2040410a:	6125                	addi	sp,sp,96
2040410c:	30200073          	mret

20404110 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20404110:	711d                	addi	sp,sp,-96
20404112:	ce86                	sw	ra,92(sp)
20404114:	cc96                	sw	t0,88(sp)
20404116:	ca9a                	sw	t1,84(sp)
20404118:	c89e                	sw	t2,80(sp)
2040411a:	c6a2                	sw	s0,76(sp)
2040411c:	c4aa                	sw	a0,72(sp)
2040411e:	c2ae                	sw	a1,68(sp)
20404120:	c0b2                	sw	a2,64(sp)
20404122:	de36                	sw	a3,60(sp)
20404124:	dc3a                	sw	a4,56(sp)
20404126:	da3e                	sw	a5,52(sp)
20404128:	d842                	sw	a6,48(sp)
2040412a:	d646                	sw	a7,44(sp)
2040412c:	d472                	sw	t3,40(sp)
2040412e:	d276                	sw	t4,36(sp)
20404130:	d07a                	sw	t5,32(sp)
20404132:	ce7e                	sw	t6,28(sp)
20404134:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404136:	9c1ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
2040413a:	872a                	mv	a4,a0
2040413c:	800007b7          	lui	a5,0x80000
20404140:	070a                	slli	a4,a4,0x2
20404142:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20404146:	97ba                	add	a5,a5,a4
20404148:	439c                	lw	a5,0(a5)
2040414a:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
2040414e:	fac42783          	lw	a5,-84(s0)
20404152:	c78d                	beqz	a5,2040417c <metal_lc1_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404154:	fac42503          	lw	a0,-84(s0)
20404158:	945ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
2040415c:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20404160:	fa842783          	lw	a5,-88(s0)
20404164:	2307a783          	lw	a5,560(a5)
20404168:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
2040416c:	fa842783          	lw	a5,-88(s0)
20404170:	2287a783          	lw	a5,552(a5)
20404174:	fa442583          	lw	a1,-92(s0)
20404178:	4545                	li	a0,17
2040417a:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
2040417c:	0001                	nop
2040417e:	40f6                	lw	ra,92(sp)
20404180:	42e6                	lw	t0,88(sp)
20404182:	4356                	lw	t1,84(sp)
20404184:	43c6                	lw	t2,80(sp)
20404186:	4436                	lw	s0,76(sp)
20404188:	4526                	lw	a0,72(sp)
2040418a:	4596                	lw	a1,68(sp)
2040418c:	4606                	lw	a2,64(sp)
2040418e:	56f2                	lw	a3,60(sp)
20404190:	5762                	lw	a4,56(sp)
20404192:	57d2                	lw	a5,52(sp)
20404194:	5842                	lw	a6,48(sp)
20404196:	58b2                	lw	a7,44(sp)
20404198:	5e22                	lw	t3,40(sp)
2040419a:	5e92                	lw	t4,36(sp)
2040419c:	5f02                	lw	t5,32(sp)
2040419e:	4ff2                	lw	t6,28(sp)
204041a0:	6125                	addi	sp,sp,96
204041a2:	30200073          	mret

204041a6 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
204041a6:	711d                	addi	sp,sp,-96
204041a8:	ce86                	sw	ra,92(sp)
204041aa:	cc96                	sw	t0,88(sp)
204041ac:	ca9a                	sw	t1,84(sp)
204041ae:	c89e                	sw	t2,80(sp)
204041b0:	c6a2                	sw	s0,76(sp)
204041b2:	c4aa                	sw	a0,72(sp)
204041b4:	c2ae                	sw	a1,68(sp)
204041b6:	c0b2                	sw	a2,64(sp)
204041b8:	de36                	sw	a3,60(sp)
204041ba:	dc3a                	sw	a4,56(sp)
204041bc:	da3e                	sw	a5,52(sp)
204041be:	d842                	sw	a6,48(sp)
204041c0:	d646                	sw	a7,44(sp)
204041c2:	d472                	sw	t3,40(sp)
204041c4:	d276                	sw	t4,36(sp)
204041c6:	d07a                	sw	t5,32(sp)
204041c8:	ce7e                	sw	t6,28(sp)
204041ca:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204041cc:	92bff0ef          	jal	ra,20403af6 <__metal_myhart_id>
204041d0:	872a                	mv	a4,a0
204041d2:	800007b7          	lui	a5,0x80000
204041d6:	070a                	slli	a4,a4,0x2
204041d8:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
204041dc:	97ba                	add	a5,a5,a4
204041de:	439c                	lw	a5,0(a5)
204041e0:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
204041e4:	fac42783          	lw	a5,-84(s0)
204041e8:	c78d                	beqz	a5,20404212 <metal_lc2_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204041ea:	fac42503          	lw	a0,-84(s0)
204041ee:	8afff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204041f2:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
204041f6:	fa842783          	lw	a5,-88(s0)
204041fa:	2487a783          	lw	a5,584(a5)
204041fe:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20404202:	fa842783          	lw	a5,-88(s0)
20404206:	2407a783          	lw	a5,576(a5)
2040420a:	fa442583          	lw	a1,-92(s0)
2040420e:	4549                	li	a0,18
20404210:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20404212:	0001                	nop
20404214:	40f6                	lw	ra,92(sp)
20404216:	42e6                	lw	t0,88(sp)
20404218:	4356                	lw	t1,84(sp)
2040421a:	43c6                	lw	t2,80(sp)
2040421c:	4436                	lw	s0,76(sp)
2040421e:	4526                	lw	a0,72(sp)
20404220:	4596                	lw	a1,68(sp)
20404222:	4606                	lw	a2,64(sp)
20404224:	56f2                	lw	a3,60(sp)
20404226:	5762                	lw	a4,56(sp)
20404228:	57d2                	lw	a5,52(sp)
2040422a:	5842                	lw	a6,48(sp)
2040422c:	58b2                	lw	a7,44(sp)
2040422e:	5e22                	lw	t3,40(sp)
20404230:	5e92                	lw	t4,36(sp)
20404232:	5f02                	lw	t5,32(sp)
20404234:	4ff2                	lw	t6,28(sp)
20404236:	6125                	addi	sp,sp,96
20404238:	30200073          	mret

2040423c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
2040423c:	711d                	addi	sp,sp,-96
2040423e:	ce86                	sw	ra,92(sp)
20404240:	cc96                	sw	t0,88(sp)
20404242:	ca9a                	sw	t1,84(sp)
20404244:	c89e                	sw	t2,80(sp)
20404246:	c6a2                	sw	s0,76(sp)
20404248:	c4aa                	sw	a0,72(sp)
2040424a:	c2ae                	sw	a1,68(sp)
2040424c:	c0b2                	sw	a2,64(sp)
2040424e:	de36                	sw	a3,60(sp)
20404250:	dc3a                	sw	a4,56(sp)
20404252:	da3e                	sw	a5,52(sp)
20404254:	d842                	sw	a6,48(sp)
20404256:	d646                	sw	a7,44(sp)
20404258:	d472                	sw	t3,40(sp)
2040425a:	d276                	sw	t4,36(sp)
2040425c:	d07a                	sw	t5,32(sp)
2040425e:	ce7e                	sw	t6,28(sp)
20404260:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404262:	895ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20404266:	872a                	mv	a4,a0
20404268:	800007b7          	lui	a5,0x80000
2040426c:	070a                	slli	a4,a4,0x2
2040426e:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20404272:	97ba                	add	a5,a5,a4
20404274:	439c                	lw	a5,0(a5)
20404276:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
2040427a:	fac42783          	lw	a5,-84(s0)
2040427e:	c78d                	beqz	a5,204042a8 <metal_lc3_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404280:	fac42503          	lw	a0,-84(s0)
20404284:	819ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20404288:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
2040428c:	fa842783          	lw	a5,-88(s0)
20404290:	2607a783          	lw	a5,608(a5)
20404294:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20404298:	fa842783          	lw	a5,-88(s0)
2040429c:	2587a783          	lw	a5,600(a5)
204042a0:	fa442583          	lw	a1,-92(s0)
204042a4:	454d                	li	a0,19
204042a6:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
204042a8:	0001                	nop
204042aa:	40f6                	lw	ra,92(sp)
204042ac:	42e6                	lw	t0,88(sp)
204042ae:	4356                	lw	t1,84(sp)
204042b0:	43c6                	lw	t2,80(sp)
204042b2:	4436                	lw	s0,76(sp)
204042b4:	4526                	lw	a0,72(sp)
204042b6:	4596                	lw	a1,68(sp)
204042b8:	4606                	lw	a2,64(sp)
204042ba:	56f2                	lw	a3,60(sp)
204042bc:	5762                	lw	a4,56(sp)
204042be:	57d2                	lw	a5,52(sp)
204042c0:	5842                	lw	a6,48(sp)
204042c2:	58b2                	lw	a7,44(sp)
204042c4:	5e22                	lw	t3,40(sp)
204042c6:	5e92                	lw	t4,36(sp)
204042c8:	5f02                	lw	t5,32(sp)
204042ca:	4ff2                	lw	t6,28(sp)
204042cc:	6125                	addi	sp,sp,96
204042ce:	30200073          	mret

204042d2 <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
204042d2:	711d                	addi	sp,sp,-96
204042d4:	ce86                	sw	ra,92(sp)
204042d6:	cc96                	sw	t0,88(sp)
204042d8:	ca9a                	sw	t1,84(sp)
204042da:	c89e                	sw	t2,80(sp)
204042dc:	c6a2                	sw	s0,76(sp)
204042de:	c4aa                	sw	a0,72(sp)
204042e0:	c2ae                	sw	a1,68(sp)
204042e2:	c0b2                	sw	a2,64(sp)
204042e4:	de36                	sw	a3,60(sp)
204042e6:	dc3a                	sw	a4,56(sp)
204042e8:	da3e                	sw	a5,52(sp)
204042ea:	d842                	sw	a6,48(sp)
204042ec:	d646                	sw	a7,44(sp)
204042ee:	d472                	sw	t3,40(sp)
204042f0:	d276                	sw	t4,36(sp)
204042f2:	d07a                	sw	t5,32(sp)
204042f4:	ce7e                	sw	t6,28(sp)
204042f6:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204042f8:	ffeff0ef          	jal	ra,20403af6 <__metal_myhart_id>
204042fc:	872a                	mv	a4,a0
204042fe:	800007b7          	lui	a5,0x80000
20404302:	070a                	slli	a4,a4,0x2
20404304:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20404308:	97ba                	add	a5,a5,a4
2040430a:	439c                	lw	a5,0(a5)
2040430c:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20404310:	fac42783          	lw	a5,-84(s0)
20404314:	c78d                	beqz	a5,2040433e <metal_lc4_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404316:	fac42503          	lw	a0,-84(s0)
2040431a:	f82ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
2040431e:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20404322:	fa842783          	lw	a5,-88(s0)
20404326:	2787a783          	lw	a5,632(a5)
2040432a:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
2040432e:	fa842783          	lw	a5,-88(s0)
20404332:	2707a783          	lw	a5,624(a5)
20404336:	fa442583          	lw	a1,-92(s0)
2040433a:	4551                	li	a0,20
2040433c:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
2040433e:	0001                	nop
20404340:	40f6                	lw	ra,92(sp)
20404342:	42e6                	lw	t0,88(sp)
20404344:	4356                	lw	t1,84(sp)
20404346:	43c6                	lw	t2,80(sp)
20404348:	4436                	lw	s0,76(sp)
2040434a:	4526                	lw	a0,72(sp)
2040434c:	4596                	lw	a1,68(sp)
2040434e:	4606                	lw	a2,64(sp)
20404350:	56f2                	lw	a3,60(sp)
20404352:	5762                	lw	a4,56(sp)
20404354:	57d2                	lw	a5,52(sp)
20404356:	5842                	lw	a6,48(sp)
20404358:	58b2                	lw	a7,44(sp)
2040435a:	5e22                	lw	t3,40(sp)
2040435c:	5e92                	lw	t4,36(sp)
2040435e:	5f02                	lw	t5,32(sp)
20404360:	4ff2                	lw	t6,28(sp)
20404362:	6125                	addi	sp,sp,96
20404364:	30200073          	mret

20404368 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20404368:	711d                	addi	sp,sp,-96
2040436a:	ce86                	sw	ra,92(sp)
2040436c:	cc96                	sw	t0,88(sp)
2040436e:	ca9a                	sw	t1,84(sp)
20404370:	c89e                	sw	t2,80(sp)
20404372:	c6a2                	sw	s0,76(sp)
20404374:	c4aa                	sw	a0,72(sp)
20404376:	c2ae                	sw	a1,68(sp)
20404378:	c0b2                	sw	a2,64(sp)
2040437a:	de36                	sw	a3,60(sp)
2040437c:	dc3a                	sw	a4,56(sp)
2040437e:	da3e                	sw	a5,52(sp)
20404380:	d842                	sw	a6,48(sp)
20404382:	d646                	sw	a7,44(sp)
20404384:	d472                	sw	t3,40(sp)
20404386:	d276                	sw	t4,36(sp)
20404388:	d07a                	sw	t5,32(sp)
2040438a:	ce7e                	sw	t6,28(sp)
2040438c:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040438e:	f68ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20404392:	872a                	mv	a4,a0
20404394:	800007b7          	lui	a5,0x80000
20404398:	070a                	slli	a4,a4,0x2
2040439a:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
2040439e:	97ba                	add	a5,a5,a4
204043a0:	439c                	lw	a5,0(a5)
204043a2:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
204043a6:	fac42783          	lw	a5,-84(s0)
204043aa:	c78d                	beqz	a5,204043d4 <metal_lc5_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204043ac:	fac42503          	lw	a0,-84(s0)
204043b0:	eecff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204043b4:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
204043b8:	fa842783          	lw	a5,-88(s0)
204043bc:	2907a783          	lw	a5,656(a5)
204043c0:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
204043c4:	fa842783          	lw	a5,-88(s0)
204043c8:	2887a783          	lw	a5,648(a5)
204043cc:	fa442583          	lw	a1,-92(s0)
204043d0:	4555                	li	a0,21
204043d2:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
204043d4:	0001                	nop
204043d6:	40f6                	lw	ra,92(sp)
204043d8:	42e6                	lw	t0,88(sp)
204043da:	4356                	lw	t1,84(sp)
204043dc:	43c6                	lw	t2,80(sp)
204043de:	4436                	lw	s0,76(sp)
204043e0:	4526                	lw	a0,72(sp)
204043e2:	4596                	lw	a1,68(sp)
204043e4:	4606                	lw	a2,64(sp)
204043e6:	56f2                	lw	a3,60(sp)
204043e8:	5762                	lw	a4,56(sp)
204043ea:	57d2                	lw	a5,52(sp)
204043ec:	5842                	lw	a6,48(sp)
204043ee:	58b2                	lw	a7,44(sp)
204043f0:	5e22                	lw	t3,40(sp)
204043f2:	5e92                	lw	t4,36(sp)
204043f4:	5f02                	lw	t5,32(sp)
204043f6:	4ff2                	lw	t6,28(sp)
204043f8:	6125                	addi	sp,sp,96
204043fa:	30200073          	mret

204043fe <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
204043fe:	711d                	addi	sp,sp,-96
20404400:	ce86                	sw	ra,92(sp)
20404402:	cc96                	sw	t0,88(sp)
20404404:	ca9a                	sw	t1,84(sp)
20404406:	c89e                	sw	t2,80(sp)
20404408:	c6a2                	sw	s0,76(sp)
2040440a:	c4aa                	sw	a0,72(sp)
2040440c:	c2ae                	sw	a1,68(sp)
2040440e:	c0b2                	sw	a2,64(sp)
20404410:	de36                	sw	a3,60(sp)
20404412:	dc3a                	sw	a4,56(sp)
20404414:	da3e                	sw	a5,52(sp)
20404416:	d842                	sw	a6,48(sp)
20404418:	d646                	sw	a7,44(sp)
2040441a:	d472                	sw	t3,40(sp)
2040441c:	d276                	sw	t4,36(sp)
2040441e:	d07a                	sw	t5,32(sp)
20404420:	ce7e                	sw	t6,28(sp)
20404422:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404424:	ed2ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20404428:	872a                	mv	a4,a0
2040442a:	800007b7          	lui	a5,0x80000
2040442e:	070a                	slli	a4,a4,0x2
20404430:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20404434:	97ba                	add	a5,a5,a4
20404436:	439c                	lw	a5,0(a5)
20404438:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040443c:	fac42783          	lw	a5,-84(s0)
20404440:	c78d                	beqz	a5,2040446a <metal_lc6_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404442:	fac42503          	lw	a0,-84(s0)
20404446:	e56ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
2040444a:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
2040444e:	fa842783          	lw	a5,-88(s0)
20404452:	2a87a783          	lw	a5,680(a5)
20404456:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
2040445a:	fa842783          	lw	a5,-88(s0)
2040445e:	2a07a783          	lw	a5,672(a5)
20404462:	fa442583          	lw	a1,-92(s0)
20404466:	4559                	li	a0,22
20404468:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
2040446a:	0001                	nop
2040446c:	40f6                	lw	ra,92(sp)
2040446e:	42e6                	lw	t0,88(sp)
20404470:	4356                	lw	t1,84(sp)
20404472:	43c6                	lw	t2,80(sp)
20404474:	4436                	lw	s0,76(sp)
20404476:	4526                	lw	a0,72(sp)
20404478:	4596                	lw	a1,68(sp)
2040447a:	4606                	lw	a2,64(sp)
2040447c:	56f2                	lw	a3,60(sp)
2040447e:	5762                	lw	a4,56(sp)
20404480:	57d2                	lw	a5,52(sp)
20404482:	5842                	lw	a6,48(sp)
20404484:	58b2                	lw	a7,44(sp)
20404486:	5e22                	lw	t3,40(sp)
20404488:	5e92                	lw	t4,36(sp)
2040448a:	5f02                	lw	t5,32(sp)
2040448c:	4ff2                	lw	t6,28(sp)
2040448e:	6125                	addi	sp,sp,96
20404490:	30200073          	mret

20404494 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20404494:	711d                	addi	sp,sp,-96
20404496:	ce86                	sw	ra,92(sp)
20404498:	cc96                	sw	t0,88(sp)
2040449a:	ca9a                	sw	t1,84(sp)
2040449c:	c89e                	sw	t2,80(sp)
2040449e:	c6a2                	sw	s0,76(sp)
204044a0:	c4aa                	sw	a0,72(sp)
204044a2:	c2ae                	sw	a1,68(sp)
204044a4:	c0b2                	sw	a2,64(sp)
204044a6:	de36                	sw	a3,60(sp)
204044a8:	dc3a                	sw	a4,56(sp)
204044aa:	da3e                	sw	a5,52(sp)
204044ac:	d842                	sw	a6,48(sp)
204044ae:	d646                	sw	a7,44(sp)
204044b0:	d472                	sw	t3,40(sp)
204044b2:	d276                	sw	t4,36(sp)
204044b4:	d07a                	sw	t5,32(sp)
204044b6:	ce7e                	sw	t6,28(sp)
204044b8:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204044ba:	e3cff0ef          	jal	ra,20403af6 <__metal_myhart_id>
204044be:	872a                	mv	a4,a0
204044c0:	800007b7          	lui	a5,0x80000
204044c4:	070a                	slli	a4,a4,0x2
204044c6:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
204044ca:	97ba                	add	a5,a5,a4
204044cc:	439c                	lw	a5,0(a5)
204044ce:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
204044d2:	fac42783          	lw	a5,-84(s0)
204044d6:	c78d                	beqz	a5,20404500 <metal_lc7_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204044d8:	fac42503          	lw	a0,-84(s0)
204044dc:	dc0ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204044e0:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
204044e4:	fa842783          	lw	a5,-88(s0)
204044e8:	2c07a783          	lw	a5,704(a5)
204044ec:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
204044f0:	fa842783          	lw	a5,-88(s0)
204044f4:	2b87a783          	lw	a5,696(a5)
204044f8:	fa442583          	lw	a1,-92(s0)
204044fc:	455d                	li	a0,23
204044fe:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20404500:	0001                	nop
20404502:	40f6                	lw	ra,92(sp)
20404504:	42e6                	lw	t0,88(sp)
20404506:	4356                	lw	t1,84(sp)
20404508:	43c6                	lw	t2,80(sp)
2040450a:	4436                	lw	s0,76(sp)
2040450c:	4526                	lw	a0,72(sp)
2040450e:	4596                	lw	a1,68(sp)
20404510:	4606                	lw	a2,64(sp)
20404512:	56f2                	lw	a3,60(sp)
20404514:	5762                	lw	a4,56(sp)
20404516:	57d2                	lw	a5,52(sp)
20404518:	5842                	lw	a6,48(sp)
2040451a:	58b2                	lw	a7,44(sp)
2040451c:	5e22                	lw	t3,40(sp)
2040451e:	5e92                	lw	t4,36(sp)
20404520:	5f02                	lw	t5,32(sp)
20404522:	4ff2                	lw	t6,28(sp)
20404524:	6125                	addi	sp,sp,96
20404526:	30200073          	mret

2040452a <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
2040452a:	711d                	addi	sp,sp,-96
2040452c:	ce86                	sw	ra,92(sp)
2040452e:	cc96                	sw	t0,88(sp)
20404530:	ca9a                	sw	t1,84(sp)
20404532:	c89e                	sw	t2,80(sp)
20404534:	c6a2                	sw	s0,76(sp)
20404536:	c4aa                	sw	a0,72(sp)
20404538:	c2ae                	sw	a1,68(sp)
2040453a:	c0b2                	sw	a2,64(sp)
2040453c:	de36                	sw	a3,60(sp)
2040453e:	dc3a                	sw	a4,56(sp)
20404540:	da3e                	sw	a5,52(sp)
20404542:	d842                	sw	a6,48(sp)
20404544:	d646                	sw	a7,44(sp)
20404546:	d472                	sw	t3,40(sp)
20404548:	d276                	sw	t4,36(sp)
2040454a:	d07a                	sw	t5,32(sp)
2040454c:	ce7e                	sw	t6,28(sp)
2040454e:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404550:	da6ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20404554:	872a                	mv	a4,a0
20404556:	800007b7          	lui	a5,0x80000
2040455a:	070a                	slli	a4,a4,0x2
2040455c:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20404560:	97ba                	add	a5,a5,a4
20404562:	439c                	lw	a5,0(a5)
20404564:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20404568:	fac42783          	lw	a5,-84(s0)
2040456c:	c78d                	beqz	a5,20404596 <metal_lc8_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040456e:	fac42503          	lw	a0,-84(s0)
20404572:	d2aff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20404576:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
2040457a:	fa842783          	lw	a5,-88(s0)
2040457e:	2d87a783          	lw	a5,728(a5)
20404582:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20404586:	fa842783          	lw	a5,-88(s0)
2040458a:	2d07a783          	lw	a5,720(a5)
2040458e:	fa442583          	lw	a1,-92(s0)
20404592:	4561                	li	a0,24
20404594:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20404596:	0001                	nop
20404598:	40f6                	lw	ra,92(sp)
2040459a:	42e6                	lw	t0,88(sp)
2040459c:	4356                	lw	t1,84(sp)
2040459e:	43c6                	lw	t2,80(sp)
204045a0:	4436                	lw	s0,76(sp)
204045a2:	4526                	lw	a0,72(sp)
204045a4:	4596                	lw	a1,68(sp)
204045a6:	4606                	lw	a2,64(sp)
204045a8:	56f2                	lw	a3,60(sp)
204045aa:	5762                	lw	a4,56(sp)
204045ac:	57d2                	lw	a5,52(sp)
204045ae:	5842                	lw	a6,48(sp)
204045b0:	58b2                	lw	a7,44(sp)
204045b2:	5e22                	lw	t3,40(sp)
204045b4:	5e92                	lw	t4,36(sp)
204045b6:	5f02                	lw	t5,32(sp)
204045b8:	4ff2                	lw	t6,28(sp)
204045ba:	6125                	addi	sp,sp,96
204045bc:	30200073          	mret

204045c0 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
204045c0:	711d                	addi	sp,sp,-96
204045c2:	ce86                	sw	ra,92(sp)
204045c4:	cc96                	sw	t0,88(sp)
204045c6:	ca9a                	sw	t1,84(sp)
204045c8:	c89e                	sw	t2,80(sp)
204045ca:	c6a2                	sw	s0,76(sp)
204045cc:	c4aa                	sw	a0,72(sp)
204045ce:	c2ae                	sw	a1,68(sp)
204045d0:	c0b2                	sw	a2,64(sp)
204045d2:	de36                	sw	a3,60(sp)
204045d4:	dc3a                	sw	a4,56(sp)
204045d6:	da3e                	sw	a5,52(sp)
204045d8:	d842                	sw	a6,48(sp)
204045da:	d646                	sw	a7,44(sp)
204045dc:	d472                	sw	t3,40(sp)
204045de:	d276                	sw	t4,36(sp)
204045e0:	d07a                	sw	t5,32(sp)
204045e2:	ce7e                	sw	t6,28(sp)
204045e4:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204045e6:	d10ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
204045ea:	872a                	mv	a4,a0
204045ec:	800007b7          	lui	a5,0x80000
204045f0:	070a                	slli	a4,a4,0x2
204045f2:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
204045f6:	97ba                	add	a5,a5,a4
204045f8:	439c                	lw	a5,0(a5)
204045fa:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
204045fe:	fac42783          	lw	a5,-84(s0)
20404602:	c78d                	beqz	a5,2040462c <metal_lc9_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404604:	fac42503          	lw	a0,-84(s0)
20404608:	c94ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
2040460c:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20404610:	fa842783          	lw	a5,-88(s0)
20404614:	2f07a783          	lw	a5,752(a5)
20404618:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
2040461c:	fa842783          	lw	a5,-88(s0)
20404620:	2e87a783          	lw	a5,744(a5)
20404624:	fa442583          	lw	a1,-92(s0)
20404628:	4565                	li	a0,25
2040462a:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
2040462c:	0001                	nop
2040462e:	40f6                	lw	ra,92(sp)
20404630:	42e6                	lw	t0,88(sp)
20404632:	4356                	lw	t1,84(sp)
20404634:	43c6                	lw	t2,80(sp)
20404636:	4436                	lw	s0,76(sp)
20404638:	4526                	lw	a0,72(sp)
2040463a:	4596                	lw	a1,68(sp)
2040463c:	4606                	lw	a2,64(sp)
2040463e:	56f2                	lw	a3,60(sp)
20404640:	5762                	lw	a4,56(sp)
20404642:	57d2                	lw	a5,52(sp)
20404644:	5842                	lw	a6,48(sp)
20404646:	58b2                	lw	a7,44(sp)
20404648:	5e22                	lw	t3,40(sp)
2040464a:	5e92                	lw	t4,36(sp)
2040464c:	5f02                	lw	t5,32(sp)
2040464e:	4ff2                	lw	t6,28(sp)
20404650:	6125                	addi	sp,sp,96
20404652:	30200073          	mret

20404656 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20404656:	711d                	addi	sp,sp,-96
20404658:	ce86                	sw	ra,92(sp)
2040465a:	cc96                	sw	t0,88(sp)
2040465c:	ca9a                	sw	t1,84(sp)
2040465e:	c89e                	sw	t2,80(sp)
20404660:	c6a2                	sw	s0,76(sp)
20404662:	c4aa                	sw	a0,72(sp)
20404664:	c2ae                	sw	a1,68(sp)
20404666:	c0b2                	sw	a2,64(sp)
20404668:	de36                	sw	a3,60(sp)
2040466a:	dc3a                	sw	a4,56(sp)
2040466c:	da3e                	sw	a5,52(sp)
2040466e:	d842                	sw	a6,48(sp)
20404670:	d646                	sw	a7,44(sp)
20404672:	d472                	sw	t3,40(sp)
20404674:	d276                	sw	t4,36(sp)
20404676:	d07a                	sw	t5,32(sp)
20404678:	ce7e                	sw	t6,28(sp)
2040467a:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040467c:	c7aff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20404680:	872a                	mv	a4,a0
20404682:	800007b7          	lui	a5,0x80000
20404686:	070a                	slli	a4,a4,0x2
20404688:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
2040468c:	97ba                	add	a5,a5,a4
2040468e:	439c                	lw	a5,0(a5)
20404690:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20404694:	fac42783          	lw	a5,-84(s0)
20404698:	c78d                	beqz	a5,204046c2 <metal_lc10_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040469a:	fac42503          	lw	a0,-84(s0)
2040469e:	bfeff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204046a2:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204046a6:	fa842783          	lw	a5,-88(s0)
204046aa:	3087a783          	lw	a5,776(a5)
204046ae:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
204046b2:	fa842783          	lw	a5,-88(s0)
204046b6:	3007a783          	lw	a5,768(a5)
204046ba:	fa442583          	lw	a1,-92(s0)
204046be:	4569                	li	a0,26
204046c0:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
204046c2:	0001                	nop
204046c4:	40f6                	lw	ra,92(sp)
204046c6:	42e6                	lw	t0,88(sp)
204046c8:	4356                	lw	t1,84(sp)
204046ca:	43c6                	lw	t2,80(sp)
204046cc:	4436                	lw	s0,76(sp)
204046ce:	4526                	lw	a0,72(sp)
204046d0:	4596                	lw	a1,68(sp)
204046d2:	4606                	lw	a2,64(sp)
204046d4:	56f2                	lw	a3,60(sp)
204046d6:	5762                	lw	a4,56(sp)
204046d8:	57d2                	lw	a5,52(sp)
204046da:	5842                	lw	a6,48(sp)
204046dc:	58b2                	lw	a7,44(sp)
204046de:	5e22                	lw	t3,40(sp)
204046e0:	5e92                	lw	t4,36(sp)
204046e2:	5f02                	lw	t5,32(sp)
204046e4:	4ff2                	lw	t6,28(sp)
204046e6:	6125                	addi	sp,sp,96
204046e8:	30200073          	mret

204046ec <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
204046ec:	711d                	addi	sp,sp,-96
204046ee:	ce86                	sw	ra,92(sp)
204046f0:	cc96                	sw	t0,88(sp)
204046f2:	ca9a                	sw	t1,84(sp)
204046f4:	c89e                	sw	t2,80(sp)
204046f6:	c6a2                	sw	s0,76(sp)
204046f8:	c4aa                	sw	a0,72(sp)
204046fa:	c2ae                	sw	a1,68(sp)
204046fc:	c0b2                	sw	a2,64(sp)
204046fe:	de36                	sw	a3,60(sp)
20404700:	dc3a                	sw	a4,56(sp)
20404702:	da3e                	sw	a5,52(sp)
20404704:	d842                	sw	a6,48(sp)
20404706:	d646                	sw	a7,44(sp)
20404708:	d472                	sw	t3,40(sp)
2040470a:	d276                	sw	t4,36(sp)
2040470c:	d07a                	sw	t5,32(sp)
2040470e:	ce7e                	sw	t6,28(sp)
20404710:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20404712:	be4ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20404716:	872a                	mv	a4,a0
20404718:	800007b7          	lui	a5,0x80000
2040471c:	070a                	slli	a4,a4,0x2
2040471e:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20404722:	97ba                	add	a5,a5,a4
20404724:	439c                	lw	a5,0(a5)
20404726:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
2040472a:	fac42783          	lw	a5,-84(s0)
2040472e:	c78d                	beqz	a5,20404758 <metal_lc11_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404730:	fac42503          	lw	a0,-84(s0)
20404734:	b68ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20404738:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
2040473c:	fa842783          	lw	a5,-88(s0)
20404740:	3207a783          	lw	a5,800(a5)
20404744:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20404748:	fa842783          	lw	a5,-88(s0)
2040474c:	3187a783          	lw	a5,792(a5)
20404750:	fa442583          	lw	a1,-92(s0)
20404754:	456d                	li	a0,27
20404756:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20404758:	0001                	nop
2040475a:	40f6                	lw	ra,92(sp)
2040475c:	42e6                	lw	t0,88(sp)
2040475e:	4356                	lw	t1,84(sp)
20404760:	43c6                	lw	t2,80(sp)
20404762:	4436                	lw	s0,76(sp)
20404764:	4526                	lw	a0,72(sp)
20404766:	4596                	lw	a1,68(sp)
20404768:	4606                	lw	a2,64(sp)
2040476a:	56f2                	lw	a3,60(sp)
2040476c:	5762                	lw	a4,56(sp)
2040476e:	57d2                	lw	a5,52(sp)
20404770:	5842                	lw	a6,48(sp)
20404772:	58b2                	lw	a7,44(sp)
20404774:	5e22                	lw	t3,40(sp)
20404776:	5e92                	lw	t4,36(sp)
20404778:	5f02                	lw	t5,32(sp)
2040477a:	4ff2                	lw	t6,28(sp)
2040477c:	6125                	addi	sp,sp,96
2040477e:	30200073          	mret

20404782 <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20404782:	711d                	addi	sp,sp,-96
20404784:	ce86                	sw	ra,92(sp)
20404786:	cc96                	sw	t0,88(sp)
20404788:	ca9a                	sw	t1,84(sp)
2040478a:	c89e                	sw	t2,80(sp)
2040478c:	c6a2                	sw	s0,76(sp)
2040478e:	c4aa                	sw	a0,72(sp)
20404790:	c2ae                	sw	a1,68(sp)
20404792:	c0b2                	sw	a2,64(sp)
20404794:	de36                	sw	a3,60(sp)
20404796:	dc3a                	sw	a4,56(sp)
20404798:	da3e                	sw	a5,52(sp)
2040479a:	d842                	sw	a6,48(sp)
2040479c:	d646                	sw	a7,44(sp)
2040479e:	d472                	sw	t3,40(sp)
204047a0:	d276                	sw	t4,36(sp)
204047a2:	d07a                	sw	t5,32(sp)
204047a4:	ce7e                	sw	t6,28(sp)
204047a6:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204047a8:	b4eff0ef          	jal	ra,20403af6 <__metal_myhart_id>
204047ac:	872a                	mv	a4,a0
204047ae:	800007b7          	lui	a5,0x80000
204047b2:	070a                	slli	a4,a4,0x2
204047b4:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
204047b8:	97ba                	add	a5,a5,a4
204047ba:	439c                	lw	a5,0(a5)
204047bc:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
204047c0:	fac42783          	lw	a5,-84(s0)
204047c4:	c78d                	beqz	a5,204047ee <metal_lc12_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204047c6:	fac42503          	lw	a0,-84(s0)
204047ca:	ad2ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204047ce:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
204047d2:	fa842783          	lw	a5,-88(s0)
204047d6:	3387a783          	lw	a5,824(a5)
204047da:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
204047de:	fa842783          	lw	a5,-88(s0)
204047e2:	3307a783          	lw	a5,816(a5)
204047e6:	fa442583          	lw	a1,-92(s0)
204047ea:	4571                	li	a0,28
204047ec:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
204047ee:	0001                	nop
204047f0:	40f6                	lw	ra,92(sp)
204047f2:	42e6                	lw	t0,88(sp)
204047f4:	4356                	lw	t1,84(sp)
204047f6:	43c6                	lw	t2,80(sp)
204047f8:	4436                	lw	s0,76(sp)
204047fa:	4526                	lw	a0,72(sp)
204047fc:	4596                	lw	a1,68(sp)
204047fe:	4606                	lw	a2,64(sp)
20404800:	56f2                	lw	a3,60(sp)
20404802:	5762                	lw	a4,56(sp)
20404804:	57d2                	lw	a5,52(sp)
20404806:	5842                	lw	a6,48(sp)
20404808:	58b2                	lw	a7,44(sp)
2040480a:	5e22                	lw	t3,40(sp)
2040480c:	5e92                	lw	t4,36(sp)
2040480e:	5f02                	lw	t5,32(sp)
20404810:	4ff2                	lw	t6,28(sp)
20404812:	6125                	addi	sp,sp,96
20404814:	30200073          	mret

20404818 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20404818:	711d                	addi	sp,sp,-96
2040481a:	ce86                	sw	ra,92(sp)
2040481c:	cc96                	sw	t0,88(sp)
2040481e:	ca9a                	sw	t1,84(sp)
20404820:	c89e                	sw	t2,80(sp)
20404822:	c6a2                	sw	s0,76(sp)
20404824:	c4aa                	sw	a0,72(sp)
20404826:	c2ae                	sw	a1,68(sp)
20404828:	c0b2                	sw	a2,64(sp)
2040482a:	de36                	sw	a3,60(sp)
2040482c:	dc3a                	sw	a4,56(sp)
2040482e:	da3e                	sw	a5,52(sp)
20404830:	d842                	sw	a6,48(sp)
20404832:	d646                	sw	a7,44(sp)
20404834:	d472                	sw	t3,40(sp)
20404836:	d276                	sw	t4,36(sp)
20404838:	d07a                	sw	t5,32(sp)
2040483a:	ce7e                	sw	t6,28(sp)
2040483c:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040483e:	ab8ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
20404842:	872a                	mv	a4,a0
20404844:	800007b7          	lui	a5,0x80000
20404848:	070a                	slli	a4,a4,0x2
2040484a:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
2040484e:	97ba                	add	a5,a5,a4
20404850:	439c                	lw	a5,0(a5)
20404852:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20404856:	fac42783          	lw	a5,-84(s0)
2040485a:	c78d                	beqz	a5,20404884 <metal_lc13_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040485c:	fac42503          	lw	a0,-84(s0)
20404860:	a3cff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20404864:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20404868:	fa842783          	lw	a5,-88(s0)
2040486c:	3507a783          	lw	a5,848(a5)
20404870:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20404874:	fa842783          	lw	a5,-88(s0)
20404878:	3487a783          	lw	a5,840(a5)
2040487c:	fa442583          	lw	a1,-92(s0)
20404880:	4575                	li	a0,29
20404882:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20404884:	0001                	nop
20404886:	40f6                	lw	ra,92(sp)
20404888:	42e6                	lw	t0,88(sp)
2040488a:	4356                	lw	t1,84(sp)
2040488c:	43c6                	lw	t2,80(sp)
2040488e:	4436                	lw	s0,76(sp)
20404890:	4526                	lw	a0,72(sp)
20404892:	4596                	lw	a1,68(sp)
20404894:	4606                	lw	a2,64(sp)
20404896:	56f2                	lw	a3,60(sp)
20404898:	5762                	lw	a4,56(sp)
2040489a:	57d2                	lw	a5,52(sp)
2040489c:	5842                	lw	a6,48(sp)
2040489e:	58b2                	lw	a7,44(sp)
204048a0:	5e22                	lw	t3,40(sp)
204048a2:	5e92                	lw	t4,36(sp)
204048a4:	5f02                	lw	t5,32(sp)
204048a6:	4ff2                	lw	t6,28(sp)
204048a8:	6125                	addi	sp,sp,96
204048aa:	30200073          	mret

204048ae <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204048ae:	711d                	addi	sp,sp,-96
204048b0:	ce86                	sw	ra,92(sp)
204048b2:	cc96                	sw	t0,88(sp)
204048b4:	ca9a                	sw	t1,84(sp)
204048b6:	c89e                	sw	t2,80(sp)
204048b8:	c6a2                	sw	s0,76(sp)
204048ba:	c4aa                	sw	a0,72(sp)
204048bc:	c2ae                	sw	a1,68(sp)
204048be:	c0b2                	sw	a2,64(sp)
204048c0:	de36                	sw	a3,60(sp)
204048c2:	dc3a                	sw	a4,56(sp)
204048c4:	da3e                	sw	a5,52(sp)
204048c6:	d842                	sw	a6,48(sp)
204048c8:	d646                	sw	a7,44(sp)
204048ca:	d472                	sw	t3,40(sp)
204048cc:	d276                	sw	t4,36(sp)
204048ce:	d07a                	sw	t5,32(sp)
204048d0:	ce7e                	sw	t6,28(sp)
204048d2:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204048d4:	a22ff0ef          	jal	ra,20403af6 <__metal_myhart_id>
204048d8:	872a                	mv	a4,a0
204048da:	800007b7          	lui	a5,0x80000
204048de:	070a                	slli	a4,a4,0x2
204048e0:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
204048e4:	97ba                	add	a5,a5,a4
204048e6:	439c                	lw	a5,0(a5)
204048e8:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
204048ec:	fac42783          	lw	a5,-84(s0)
204048f0:	c78d                	beqz	a5,2040491a <metal_lc14_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204048f2:	fac42503          	lw	a0,-84(s0)
204048f6:	9a6ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204048fa:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
204048fe:	fa842783          	lw	a5,-88(s0)
20404902:	3687a783          	lw	a5,872(a5)
20404906:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
2040490a:	fa842783          	lw	a5,-88(s0)
2040490e:	3607a783          	lw	a5,864(a5)
20404912:	fa442583          	lw	a1,-92(s0)
20404916:	4579                	li	a0,30
20404918:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
2040491a:	0001                	nop
2040491c:	40f6                	lw	ra,92(sp)
2040491e:	42e6                	lw	t0,88(sp)
20404920:	4356                	lw	t1,84(sp)
20404922:	43c6                	lw	t2,80(sp)
20404924:	4436                	lw	s0,76(sp)
20404926:	4526                	lw	a0,72(sp)
20404928:	4596                	lw	a1,68(sp)
2040492a:	4606                	lw	a2,64(sp)
2040492c:	56f2                	lw	a3,60(sp)
2040492e:	5762                	lw	a4,56(sp)
20404930:	57d2                	lw	a5,52(sp)
20404932:	5842                	lw	a6,48(sp)
20404934:	58b2                	lw	a7,44(sp)
20404936:	5e22                	lw	t3,40(sp)
20404938:	5e92                	lw	t4,36(sp)
2040493a:	5f02                	lw	t5,32(sp)
2040493c:	4ff2                	lw	t6,28(sp)
2040493e:	6125                	addi	sp,sp,96
20404940:	30200073          	mret

20404944 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20404944:	711d                	addi	sp,sp,-96
20404946:	ce86                	sw	ra,92(sp)
20404948:	cc96                	sw	t0,88(sp)
2040494a:	ca9a                	sw	t1,84(sp)
2040494c:	c89e                	sw	t2,80(sp)
2040494e:	c6a2                	sw	s0,76(sp)
20404950:	c4aa                	sw	a0,72(sp)
20404952:	c2ae                	sw	a1,68(sp)
20404954:	c0b2                	sw	a2,64(sp)
20404956:	de36                	sw	a3,60(sp)
20404958:	dc3a                	sw	a4,56(sp)
2040495a:	da3e                	sw	a5,52(sp)
2040495c:	d842                	sw	a6,48(sp)
2040495e:	d646                	sw	a7,44(sp)
20404960:	d472                	sw	t3,40(sp)
20404962:	d276                	sw	t4,36(sp)
20404964:	d07a                	sw	t5,32(sp)
20404966:	ce7e                	sw	t6,28(sp)
20404968:	1080                	addi	s0,sp,96
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040496a:	98cff0ef          	jal	ra,20403af6 <__metal_myhart_id>
2040496e:	872a                	mv	a4,a0
20404970:	800007b7          	lui	a5,0x80000
20404974:	070a                	slli	a4,a4,0x2
20404976:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
2040497a:	97ba                	add	a5,a5,a4
2040497c:	439c                	lw	a5,0(a5)
2040497e:	faf42623          	sw	a5,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20404982:	fac42783          	lw	a5,-84(s0)
20404986:	c78d                	beqz	a5,204049b0 <metal_lc15_interrupt_vector_handler+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20404988:	fac42503          	lw	a0,-84(s0)
2040498c:	910ff0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20404990:	faa42423          	sw	a0,-88(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20404994:	fa842783          	lw	a5,-88(s0)
20404998:	3807a783          	lw	a5,896(a5)
2040499c:	faf42223          	sw	a5,-92(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204049a0:	fa842783          	lw	a5,-88(s0)
204049a4:	3787a783          	lw	a5,888(a5)
204049a8:	fa442583          	lw	a1,-92(s0)
204049ac:	457d                	li	a0,31
204049ae:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204049b0:	0001                	nop
204049b2:	40f6                	lw	ra,92(sp)
204049b4:	42e6                	lw	t0,88(sp)
204049b6:	4356                	lw	t1,84(sp)
204049b8:	43c6                	lw	t2,80(sp)
204049ba:	4436                	lw	s0,76(sp)
204049bc:	4526                	lw	a0,72(sp)
204049be:	4596                	lw	a1,68(sp)
204049c0:	4606                	lw	a2,64(sp)
204049c2:	56f2                	lw	a3,60(sp)
204049c4:	5762                	lw	a4,56(sp)
204049c6:	57d2                	lw	a5,52(sp)
204049c8:	5842                	lw	a6,48(sp)
204049ca:	58b2                	lw	a7,44(sp)
204049cc:	5e22                	lw	t3,40(sp)
204049ce:	5e92                	lw	t4,36(sp)
204049d0:	5f02                	lw	t5,32(sp)
204049d2:	4ff2                	lw	t6,28(sp)
204049d4:	6125                	addi	sp,sp,96
204049d6:	30200073          	mret

204049da <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
204049da:	1101                	addi	sp,sp,-32
204049dc:	ce22                	sw	s0,28(sp)
204049de:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
204049e0:	305027f3          	csrr	a5,mtvec
204049e4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
204049e8:	fec42783          	lw	a5,-20(s0)
204049ec:	03f7f793          	andi	a5,a5,63
204049f0:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
204049f4:	fec42703          	lw	a4,-20(s0)
204049f8:	4789                	li	a5,2
204049fa:	00f70d63          	beq	a4,a5,20404a14 <__metal_controller_interrupt_vector_mode+0x3a>
204049fe:	fec42703          	lw	a4,-20(s0)
20404a02:	478d                	li	a5,3
20404a04:	00f70a63          	beq	a4,a5,20404a18 <__metal_controller_interrupt_vector_mode+0x3e>
20404a08:	fec42703          	lw	a4,-20(s0)
20404a0c:	4785                	li	a5,1
20404a0e:	00f70763          	beq	a4,a5,20404a1c <__metal_controller_interrupt_vector_mode+0x42>
20404a12:	a039                	j	20404a20 <__metal_controller_interrupt_vector_mode+0x46>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20404a14:	478d                	li	a5,3
20404a16:	a031                	j	20404a22 <__metal_controller_interrupt_vector_mode+0x48>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20404a18:	4791                	li	a5,4
20404a1a:	a021                	j	20404a22 <__metal_controller_interrupt_vector_mode+0x48>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20404a1c:	4785                	li	a5,1
20404a1e:	a011                	j	20404a22 <__metal_controller_interrupt_vector_mode+0x48>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20404a20:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20404a22:	853e                	mv	a0,a5
20404a24:	4472                	lw	s0,28(sp)
20404a26:	6105                	addi	sp,sp,32
20404a28:	8082                	ret

20404a2a <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20404a2a:	7179                	addi	sp,sp,-48
20404a2c:	d622                	sw	s0,44(sp)
20404a2e:	1800                	addi	s0,sp,48
20404a30:	fca42e23          	sw	a0,-36(s0)
20404a34:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20404a38:	305027f3          	csrr	a5,mtvec
20404a3c:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20404a40:	fec42783          	lw	a5,-20(s0)
20404a44:	fc07f793          	andi	a5,a5,-64
20404a48:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20404a4c:	fd842783          	lw	a5,-40(s0)
20404a50:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20404a54:	fdc42703          	lw	a4,-36(s0)
20404a58:	4791                	li	a5,4
20404a5a:	06e7e063          	bltu	a5,a4,20404aba <__metal_controller_interrupt_vector+0x90>
20404a5e:	fdc42783          	lw	a5,-36(s0)
20404a62:	00279713          	slli	a4,a5,0x2
20404a66:	204457b7          	lui	a5,0x20445
20404a6a:	79c78793          	addi	a5,a5,1948 # 2044579c <__metal_driver_vtable_riscv_clint0+0x4c>
20404a6e:	97ba                	add	a5,a5,a4
20404a70:	439c                	lw	a5,0(a5)
20404a72:	8782                	jr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20404a74:	fe842783          	lw	a5,-24(s0)
20404a78:	30779073          	csrw	mtvt,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20404a7c:	fec42783          	lw	a5,-20(s0)
20404a80:	0027e793          	ori	a5,a5,2
20404a84:	30579073          	csrw	mtvec,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20404a88:	a80d                	j	20404aba <__metal_controller_interrupt_vector+0x90>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20404a8a:	fe842783          	lw	a5,-24(s0)
20404a8e:	30779073          	csrw	mtvt,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20404a92:	fec42783          	lw	a5,-20(s0)
20404a96:	0037e793          	ori	a5,a5,3
20404a9a:	30579073          	csrw	mtvec,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20404a9e:	a831                	j	20404aba <__metal_controller_interrupt_vector+0x90>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20404aa0:	fe842783          	lw	a5,-24(s0)
20404aa4:	0017e793          	ori	a5,a5,1
20404aa8:	30579073          	csrw	mtvec,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20404aac:	a039                	j	20404aba <__metal_controller_interrupt_vector+0x90>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20404aae:	fe842783          	lw	a5,-24(s0)
20404ab2:	9bf1                	andi	a5,a5,-4
20404ab4:	30579073          	csrw	mtvec,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20404ab8:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20404aba:	0001                	nop
20404abc:	5432                	lw	s0,44(sp)
20404abe:	6145                	addi	sp,sp,48
20404ac0:	8082                	ret

20404ac2 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
20404ac2:	1101                	addi	sp,sp,-32
20404ac4:	ce22                	sw	s0,28(sp)
20404ac6:	1000                	addi	s0,sp,32
20404ac8:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20404acc:	fec42783          	lw	a5,-20(s0)
20404ad0:	17f5                	addi	a5,a5,-3
20404ad2:	4771                	li	a4,28
20404ad4:	00f76d63          	bltu	a4,a5,20404aee <__metal_valid_interrupt_id+0x2c>
20404ad8:	00279713          	slli	a4,a5,0x2
20404adc:	204457b7          	lui	a5,0x20445
20404ae0:	7b078793          	addi	a5,a5,1968 # 204457b0 <__metal_driver_vtable_riscv_clint0+0x60>
20404ae4:	97ba                	add	a5,a5,a4
20404ae6:	439c                	lw	a5,0(a5)
20404ae8:	8782                	jr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20404aea:	4785                	li	a5,1
20404aec:	a019                	j	20404af2 <__metal_valid_interrupt_id+0x30>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20404aee:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20404af0:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20404af2:	853e                	mv	a0,a5
20404af4:	4472                	lw	s0,28(sp)
20404af6:	6105                	addi	sp,sp,32
20404af8:	8082                	ret

20404afa <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20404afa:	7179                	addi	sp,sp,-48
20404afc:	d606                	sw	ra,44(sp)
20404afe:	d422                	sw	s0,40(sp)
20404b00:	1800                	addi	s0,sp,48
20404b02:	fca42e23          	sw	a0,-36(s0)
20404b06:	fcb42c23          	sw	a1,-40(s0)
20404b0a:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20404b0e:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20404b12:	fdc42783          	lw	a5,-36(s0)
20404b16:	e399                	bnez	a5,20404b1c <__metal_local_interrupt_enable+0x22>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20404b18:	57fd                	li	a5,-1
20404b1a:	a849                	j	20404bac <__metal_local_interrupt_enable+0xb2>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20404b1c:	fd842703          	lw	a4,-40(s0)
20404b20:	47fd                	li	a5,31
20404b22:	08e7e063          	bltu	a5,a4,20404ba2 <__metal_local_interrupt_enable+0xa8>
20404b26:	fd842783          	lw	a5,-40(s0)
20404b2a:	00279713          	slli	a4,a5,0x2
20404b2e:	204467b7          	lui	a5,0x20446
20404b32:	82478793          	addi	a5,a5,-2012 # 20445824 <__metal_driver_vtable_riscv_clint0+0xd4>
20404b36:	97ba                	add	a5,a5,a4
20404b38:	439c                	lw	a5,0(a5)
20404b3a:	8782                	jr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20404b3c:	fd442783          	lw	a5,-44(s0)
20404b40:	c781                	beqz	a5,20404b48 <__metal_local_interrupt_enable+0x4e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20404b42:	fcffe0ef          	jal	ra,20403b10 <__metal_interrupt_global_enable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20404b46:	a08d                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20404b48:	fe1fe0ef          	jal	ra,20403b28 <__metal_interrupt_global_disable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20404b4c:	a8b1                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20404b4e:	fd442783          	lw	a5,-44(s0)
20404b52:	c781                	beqz	a5,20404b5a <__metal_local_interrupt_enable+0x60>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20404b54:	fedfe0ef          	jal	ra,20403b40 <__metal_interrupt_software_enable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20404b58:	a881                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20404b5a:	ffffe0ef          	jal	ra,20403b58 <__metal_interrupt_software_disable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20404b5e:	a0a9                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20404b60:	fd442783          	lw	a5,-44(s0)
20404b64:	c781                	beqz	a5,20404b6c <__metal_local_interrupt_enable+0x72>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20404b66:	80aff0ef          	jal	ra,20403b70 <__metal_interrupt_timer_enable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20404b6a:	a83d                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20404b6c:	81eff0ef          	jal	ra,20403b8a <__metal_interrupt_timer_disable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
20404b70:	a825                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20404b72:	fd442783          	lw	a5,-44(s0)
20404b76:	c781                	beqz	a5,20404b7e <__metal_local_interrupt_enable+0x84>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20404b78:	82cff0ef          	jal	ra,20403ba4 <__metal_interrupt_external_enable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20404b7c:	a035                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20404b7e:	842ff0ef          	jal	ra,20403bc0 <__metal_interrupt_external_disable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
20404b82:	a01d                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20404b84:	fd442783          	lw	a5,-44(s0)
20404b88:	c799                	beqz	a5,20404b96 <__metal_local_interrupt_enable+0x9c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20404b8a:	fd842783          	lw	a5,-40(s0)
20404b8e:	853e                	mv	a0,a5
20404b90:	84cff0ef          	jal	ra,20403bdc <__metal_interrupt_local_enable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20404b94:	a811                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20404b96:	fd842783          	lw	a5,-40(s0)
20404b9a:	853e                	mv	a0,a5
20404b9c:	86cff0ef          	jal	ra,20403c08 <__metal_interrupt_local_disable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
20404ba0:	a021                	j	20404ba8 <__metal_local_interrupt_enable+0xae>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
20404ba2:	57fd                	li	a5,-1
20404ba4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20404ba8:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20404bac:	853e                	mv	a0,a5
20404bae:	50b2                	lw	ra,44(sp)
20404bb0:	5422                	lw	s0,40(sp)
20404bb2:	6145                	addi	sp,sp,48
20404bb4:	8082                	ret

20404bb6 <__metal_exception_register>:
__metal_exception_register():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20404bb6:	7179                	addi	sp,sp,-48
20404bb8:	d622                	sw	s0,44(sp)
20404bba:	1800                	addi	s0,sp,48
20404bbc:	fca42e23          	sw	a0,-36(s0)
20404bc0:	fcb42c23          	sw	a1,-40(s0)
20404bc4:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404bc8:	fdc42783          	lw	a5,-36(s0)
20404bcc:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20404bd0:	fd842703          	lw	a4,-40(s0)
20404bd4:	47ad                	li	a5,11
20404bd6:	02e7c263          	blt	a5,a4,20404bfa <__metal_exception_register+0x44>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20404bda:	fd442783          	lw	a5,-44(s0)
20404bde:	cf91                	beqz	a5,20404bfa <__metal_exception_register+0x44>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20404be0:	fec42703          	lw	a4,-20(s0)
20404be4:	fd842783          	lw	a5,-40(s0)
20404be8:	0e078793          	addi	a5,a5,224
20404bec:	078a                	slli	a5,a5,0x2
20404bee:	97ba                	add	a5,a5,a4
20404bf0:	fd442703          	lw	a4,-44(s0)
20404bf4:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20404bf6:	4781                	li	a5,0
20404bf8:	a011                	j	20404bfc <__metal_exception_register+0x46>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20404bfa:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20404bfc:	853e                	mv	a0,a5
20404bfe:	5432                	lw	s0,44(sp)
20404c00:	6145                	addi	sp,sp,48
20404c02:	8082                	ret

20404c04 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20404c04:	7139                	addi	sp,sp,-64
20404c06:	de06                	sw	ra,60(sp)
20404c08:	dc22                	sw	s0,56(sp)
20404c0a:	0080                	addi	s0,sp,64
20404c0c:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404c10:	fcc42783          	lw	a5,-52(s0)
20404c14:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20404c18:	fe442783          	lw	a5,-28(s0)
20404c1c:	43dc                	lw	a5,4(a5)
20404c1e:	10079e63          	bnez	a5,20404d3a <__metal_driver_riscv_cpu_controller_interrupt_init+0x136>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20404c22:	57fd                	li	a5,-1
20404c24:	3047b073          	csrc	mie,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20404c28:	57fd                	li	a5,-1
20404c2a:	3447b073          	csrc	mip,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20404c2e:	301027f3          	csrr	a5,misa
20404c32:	fef42023          	sw	a5,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20404c36:	fe042703          	lw	a4,-32(s0)
20404c3a:	6789                	lui	a5,0x2
20404c3c:	8ff9                	and	a5,a5,a4
20404c3e:	e799                	bnez	a5,20404c4c <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20404c40:	fe042703          	lw	a4,-32(s0)
20404c44:	000407b7          	lui	a5,0x40
20404c48:	8ff9                	and	a5,a5,a4
20404c4a:	c799                	beqz	a5,20404c58 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20404c4c:	57fd                	li	a5,-1
20404c4e:	3037b073          	csrc	mideleg,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20404c52:	57fd                	li	a5,-1
20404c54:	3027b073          	csrc	medeleg,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20404c58:	fe042703          	lw	a4,-32(s0)
20404c5c:	000407b7          	lui	a5,0x40
20404c60:	8ff9                	and	a5,a5,a4
20404c62:	c781                	beqz	a5,20404c6a <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20404c64:	57fd                	li	a5,-1
20404c66:	1807b073          	csrc	satp,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20404c6a:	fe042623          	sw	zero,-20(s0)
20404c6e:	a0b9                	j	20404cbc <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20404c70:	fe442683          	lw	a3,-28(s0)
20404c74:	fec42703          	lw	a4,-20(s0)
20404c78:	87ba                	mv	a5,a4
20404c7a:	0786                	slli	a5,a5,0x1
20404c7c:	97ba                	add	a5,a5,a4
20404c7e:	078e                	slli	a5,a5,0x3
20404c80:	97b6                	add	a5,a5,a3
20404c82:	0807a823          	sw	zero,144(a5) # 40090 <__stack_size+0x3d890>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20404c86:	fe442683          	lw	a3,-28(s0)
20404c8a:	fec42703          	lw	a4,-20(s0)
20404c8e:	87ba                	mv	a5,a4
20404c90:	0786                	slli	a5,a5,0x1
20404c92:	97ba                	add	a5,a5,a4
20404c94:	078e                	slli	a5,a5,0x3
20404c96:	97b6                	add	a5,a5,a3
20404c98:	0807aa23          	sw	zero,148(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20404c9c:	fe442683          	lw	a3,-28(s0)
20404ca0:	fec42703          	lw	a4,-20(s0)
20404ca4:	87ba                	mv	a5,a4
20404ca6:	0786                	slli	a5,a5,0x1
20404ca8:	97ba                	add	a5,a5,a4
20404caa:	078e                	slli	a5,a5,0x3
20404cac:	97b6                	add	a5,a5,a3
20404cae:	0807ac23          	sw	zero,152(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20404cb2:	fec42783          	lw	a5,-20(s0)
20404cb6:	0785                	addi	a5,a5,1
20404cb8:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20404cbc:	fec42703          	lw	a4,-20(s0)
20404cc0:	47fd                	li	a5,31
20404cc2:	fae7d7e3          	bge	a5,a4,20404c70 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20404cc6:	fe042423          	sw	zero,-24(s0)
20404cca:	a01d                	j	20404cf0 <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20404ccc:	fe442703          	lw	a4,-28(s0)
20404cd0:	fe842783          	lw	a5,-24(s0)
20404cd4:	0e078793          	addi	a5,a5,224
20404cd8:	078a                	slli	a5,a5,0x2
20404cda:	97ba                	add	a5,a5,a4
20404cdc:	20404737          	lui	a4,0x20404
20404ce0:	c3470713          	addi	a4,a4,-972 # 20403c34 <__metal_default_exception_handler>
20404ce4:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20404ce6:	fe842783          	lw	a5,-24(s0)
20404cea:	0785                	addi	a5,a5,1
20404cec:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20404cf0:	fe842703          	lw	a4,-24(s0)
20404cf4:	47ad                	li	a5,11
20404cf6:	fce7dbe3          	bge	a5,a4,20404ccc <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20404cfa:	204047b7          	lui	a5,0x20404
20404cfe:	f0078593          	addi	a1,a5,-256 # 20403f00 <__metal_exception_handler>
20404d02:	4501                	li	a0,0
20404d04:	d27ff0ef          	jal	ra,20404a2a <__metal_controller_interrupt_vector>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20404d08:	301027f3          	csrr	a5,misa
20404d0c:	fcf42e23          	sw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20404d10:	fdc42703          	lw	a4,-36(s0)
20404d14:	67c1                	lui	a5,0x10
20404d16:	02878793          	addi	a5,a5,40 # 10028 <__stack_size+0xd828>
20404d1a:	8ff9                	and	a5,a5,a4
20404d1c:	cb99                	beqz	a5,20404d32 <__metal_driver_riscv_cpu_controller_interrupt_init+0x12e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20404d1e:	300027f3          	csrr	a5,mstatus
20404d22:	fcf42e23          	sw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20404d26:	fdc42703          	lw	a4,-36(s0)
20404d2a:	6789                	lui	a5,0x2
20404d2c:	8fd9                	or	a5,a5,a4
20404d2e:	30079073          	csrw	mstatus,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20404d32:	fe442783          	lw	a5,-28(s0)
20404d36:	4705                	li	a4,1
20404d38:	c3d8                	sw	a4,4(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20404d3a:	0001                	nop
20404d3c:	50f2                	lw	ra,60(sp)
20404d3e:	5462                	lw	s0,56(sp)
20404d40:	6121                	addi	sp,sp,64
20404d42:	8082                	ret

20404d44 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20404d44:	7179                	addi	sp,sp,-48
20404d46:	d606                	sw	ra,44(sp)
20404d48:	d422                	sw	s0,40(sp)
20404d4a:	1800                	addi	s0,sp,48
20404d4c:	fca42e23          	sw	a0,-36(s0)
20404d50:	fcb42c23          	sw	a1,-40(s0)
20404d54:	fcc42a23          	sw	a2,-44(s0)
20404d58:	fcd42823          	sw	a3,-48(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20404d5c:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404d60:	fdc42783          	lw	a5,-36(s0)
20404d64:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20404d68:	fd842503          	lw	a0,-40(s0)
20404d6c:	d57ff0ef          	jal	ra,20404ac2 <__metal_valid_interrupt_id>
20404d70:	87aa                	mv	a5,a0
20404d72:	e399                	bnez	a5,20404d78 <__metal_driver_riscv_cpu_controller_interrupt_register+0x34>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20404d74:	57d5                	li	a5,-11
20404d76:	aa11                	j	20404e8a <__metal_driver_riscv_cpu_controller_interrupt_register+0x146>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20404d78:	fd442783          	lw	a5,-44(s0)
20404d7c:	cf85                	beqz	a5,20404db4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x70>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20404d7e:	fe842683          	lw	a3,-24(s0)
20404d82:	fd842703          	lw	a4,-40(s0)
20404d86:	87ba                	mv	a5,a4
20404d88:	0786                	slli	a5,a5,0x1
20404d8a:	97ba                	add	a5,a5,a4
20404d8c:	078e                	slli	a5,a5,0x3
20404d8e:	97b6                	add	a5,a5,a3
20404d90:	fd442703          	lw	a4,-44(s0)
20404d94:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20404d98:	fe842683          	lw	a3,-24(s0)
20404d9c:	fd842703          	lw	a4,-40(s0)
20404da0:	87ba                	mv	a5,a4
20404da2:	0786                	slli	a5,a5,0x1
20404da4:	97ba                	add	a5,a5,a4
20404da6:	078e                	slli	a5,a5,0x3
20404da8:	97b6                	add	a5,a5,a3
20404daa:	fd042703          	lw	a4,-48(s0)
20404dae:	08e7ac23          	sw	a4,152(a5)
20404db2:	a8d1                	j	20404e86 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20404db4:	fd842783          	lw	a5,-40(s0)
20404db8:	17f5                	addi	a5,a5,-3
20404dba:	4771                	li	a4,28
20404dbc:	0cf76263          	bltu	a4,a5,20404e80 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13c>
20404dc0:	00279713          	slli	a4,a5,0x2
20404dc4:	204467b7          	lui	a5,0x20446
20404dc8:	8a478793          	addi	a5,a5,-1884 # 204458a4 <__metal_driver_vtable_riscv_clint0+0x154>
20404dcc:	97ba                	add	a5,a5,a4
20404dce:	439c                	lw	a5,0(a5)
20404dd0:	8782                	jr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20404dd2:	fe842683          	lw	a3,-24(s0)
20404dd6:	fd842703          	lw	a4,-40(s0)
20404dda:	87ba                	mv	a5,a4
20404ddc:	0786                	slli	a5,a5,0x1
20404dde:	97ba                	add	a5,a5,a4
20404de0:	078e                	slli	a5,a5,0x3
20404de2:	97b6                	add	a5,a5,a3
20404de4:	20404737          	lui	a4,0x20404
20404de8:	d2470713          	addi	a4,a4,-732 # 20403d24 <__metal_default_sw_handler>
20404dec:	08e7a823          	sw	a4,144(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20404df0:	fe842683          	lw	a3,-24(s0)
20404df4:	fd842703          	lw	a4,-40(s0)
20404df8:	87ba                	mv	a5,a4
20404dfa:	0786                	slli	a5,a5,0x1
20404dfc:	97ba                	add	a5,a5,a4
20404dfe:	078e                	slli	a5,a5,0x3
20404e00:	97b6                	add	a5,a5,a3
20404e02:	fd042703          	lw	a4,-48(s0)
20404e06:	08e7aa23          	sw	a4,148(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20404e0a:	a8b5                	j	20404e86 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20404e0c:	fe842683          	lw	a3,-24(s0)
20404e10:	fd842703          	lw	a4,-40(s0)
20404e14:	87ba                	mv	a5,a4
20404e16:	0786                	slli	a5,a5,0x1
20404e18:	97ba                	add	a5,a5,a4
20404e1a:	078e                	slli	a5,a5,0x3
20404e1c:	97b6                	add	a5,a5,a3
20404e1e:	20404737          	lui	a4,0x20404
20404e22:	e2070713          	addi	a4,a4,-480 # 20403e20 <__metal_default_timer_handler>
20404e26:	08e7a823          	sw	a4,144(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20404e2a:	fe842683          	lw	a3,-24(s0)
20404e2e:	fd842703          	lw	a4,-40(s0)
20404e32:	87ba                	mv	a5,a4
20404e34:	0786                	slli	a5,a5,0x1
20404e36:	97ba                	add	a5,a5,a4
20404e38:	078e                	slli	a5,a5,0x3
20404e3a:	97b6                	add	a5,a5,a3
20404e3c:	fd042703          	lw	a4,-48(s0)
20404e40:	08e7aa23          	sw	a4,148(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20404e44:	a089                	j	20404e86 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20404e46:	fe842683          	lw	a3,-24(s0)
20404e4a:	fd842703          	lw	a4,-40(s0)
20404e4e:	87ba                	mv	a5,a4
20404e50:	0786                	slli	a5,a5,0x1
20404e52:	97ba                	add	a5,a5,a4
20404e54:	078e                	slli	a5,a5,0x3
20404e56:	97b6                	add	a5,a5,a3
20404e58:	20404737          	lui	a4,0x20404
20404e5c:	c4c70713          	addi	a4,a4,-948 # 20403c4c <__metal_default_interrupt_handler>
20404e60:	08e7a823          	sw	a4,144(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20404e64:	fe842683          	lw	a3,-24(s0)
20404e68:	fd842703          	lw	a4,-40(s0)
20404e6c:	87ba                	mv	a5,a4
20404e6e:	0786                	slli	a5,a5,0x1
20404e70:	97ba                	add	a5,a5,a4
20404e72:	078e                	slli	a5,a5,0x3
20404e74:	97b6                	add	a5,a5,a3
20404e76:	fd042703          	lw	a4,-48(s0)
20404e7a:	08e7aa23          	sw	a4,148(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20404e7e:	a021                	j	20404e86 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20404e80:	57d1                	li	a5,-12
20404e82:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20404e86:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20404e8a:	853e                	mv	a0,a5
20404e8c:	50b2                	lw	ra,44(sp)
20404e8e:	5422                	lw	s0,40(sp)
20404e90:	6145                	addi	sp,sp,48
20404e92:	8082                	ret

20404e94 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20404e94:	1101                	addi	sp,sp,-32
20404e96:	ce06                	sw	ra,28(sp)
20404e98:	cc22                	sw	s0,24(sp)
20404e9a:	1000                	addi	s0,sp,32
20404e9c:	fea42623          	sw	a0,-20(s0)
20404ea0:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20404ea4:	fe842783          	lw	a5,-24(s0)
20404ea8:	4605                	li	a2,1
20404eaa:	85be                	mv	a1,a5
20404eac:	fec42503          	lw	a0,-20(s0)
20404eb0:	c4bff0ef          	jal	ra,20404afa <__metal_local_interrupt_enable>
20404eb4:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20404eb6:	853e                	mv	a0,a5
20404eb8:	40f2                	lw	ra,28(sp)
20404eba:	4462                	lw	s0,24(sp)
20404ebc:	6105                	addi	sp,sp,32
20404ebe:	8082                	ret

20404ec0 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20404ec0:	1101                	addi	sp,sp,-32
20404ec2:	ce06                	sw	ra,28(sp)
20404ec4:	cc22                	sw	s0,24(sp)
20404ec6:	1000                	addi	s0,sp,32
20404ec8:	fea42623          	sw	a0,-20(s0)
20404ecc:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20404ed0:	fe842783          	lw	a5,-24(s0)
20404ed4:	4601                	li	a2,0
20404ed6:	85be                	mv	a1,a5
20404ed8:	fec42503          	lw	a0,-20(s0)
20404edc:	c1fff0ef          	jal	ra,20404afa <__metal_local_interrupt_enable>
20404ee0:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20404ee2:	853e                	mv	a0,a5
20404ee4:	40f2                	lw	ra,28(sp)
20404ee6:	4462                	lw	s0,24(sp)
20404ee8:	6105                	addi	sp,sp,32
20404eea:	8082                	ret

20404eec <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20404eec:	1101                	addi	sp,sp,-32
20404eee:	ce06                	sw	ra,28(sp)
20404ef0:	cc22                	sw	s0,24(sp)
20404ef2:	1000                	addi	s0,sp,32
20404ef4:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20404ef8:	ae3ff0ef          	jal	ra,204049da <__metal_controller_interrupt_vector_mode>
20404efc:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20404efe:	853e                	mv	a0,a5
20404f00:	40f2                	lw	ra,28(sp)
20404f02:	4462                	lw	s0,24(sp)
20404f04:	6105                	addi	sp,sp,32
20404f06:	8082                	ret

20404f08 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20404f08:	7179                	addi	sp,sp,-48
20404f0a:	d606                	sw	ra,44(sp)
20404f0c:	d422                	sw	s0,40(sp)
20404f0e:	1800                	addi	s0,sp,48
20404f10:	fca42e23          	sw	a0,-36(s0)
20404f14:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404f18:	fdc42783          	lw	a5,-36(s0)
20404f1c:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20404f20:	fd842783          	lw	a5,-40(s0)
20404f24:	eb99                	bnez	a5,20404f3a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20404f26:	204047b7          	lui	a5,0x20404
20404f2a:	f0078593          	addi	a1,a5,-256 # 20403f00 <__metal_exception_handler>
20404f2e:	fd842503          	lw	a0,-40(s0)
20404f32:	af9ff0ef          	jal	ra,20404a2a <__metal_controller_interrupt_vector>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20404f36:	4781                	li	a5,0
20404f38:	a00d                	j	20404f5a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20404f3a:	fd842703          	lw	a4,-40(s0)
20404f3e:	4785                	li	a5,1
20404f40:	00f71c63          	bne	a4,a5,20404f58 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20404f44:	204087b7          	lui	a5,0x20408
20404f48:	18078593          	addi	a1,a5,384 # 20408180 <__metal_vector_table>
20404f4c:	fd842503          	lw	a0,-40(s0)
20404f50:	adbff0ef          	jal	ra,20404a2a <__metal_controller_interrupt_vector>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20404f54:	4781                	li	a5,0
20404f56:	a011                	j	20404f5a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20404f58:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20404f5a:	853e                	mv	a0,a5
20404f5c:	50b2                	lw	ra,44(sp)
20404f5e:	5422                	lw	s0,40(sp)
20404f60:	6145                	addi	sp,sp,48
20404f62:	8082                	ret

20404f64 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20404f64:	1101                	addi	sp,sp,-32
20404f66:	ce22                	sw	s0,28(sp)
20404f68:	1000                	addi	s0,sp,32
20404f6a:	fea42623          	sw	a0,-20(s0)
20404f6e:	feb42423          	sw	a1,-24(s0)
20404f72:	fec42223          	sw	a2,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20404f76:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20404f78:	853e                	mv	a0,a5
20404f7a:	4472                	lw	s0,28(sp)
20404f7c:	6105                	addi	sp,sp,32
20404f7e:	8082                	ret

20404f80 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20404f80:	7139                	addi	sp,sp,-64
20404f82:	de22                	sw	s0,60(sp)
20404f84:	0080                	addi	s0,sp,64
20404f86:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20404f8a:	4301                	li	t1,0
20404f8c:	4381                	li	t2,0
20404f8e:	fe642423          	sw	t1,-24(s0)
20404f92:	fe742623          	sw	t2,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20404f96:	b8002573          	csrr	a0,mcycleh
20404f9a:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20404f9e:	b0002573          	csrr	a0,mcycle
20404fa2:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20404fa6:	b8002573          	csrr	a0,mcycleh
20404faa:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20404fae:	fe442883          	lw	a7,-28(s0)
20404fb2:	fdc42503          	lw	a0,-36(s0)
20404fb6:	02a89563          	bne	a7,a0,20404fe0 <__metal_driver_cpu_mcycle_get+0x60>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20404fba:	fe442503          	lw	a0,-28(s0)
20404fbe:	85aa                	mv	a1,a0
20404fc0:	4601                	li	a2,0
20404fc2:	00059813          	slli	a6,a1,0x0
20404fc6:	4781                	li	a5,0
20404fc8:	fe042603          	lw	a2,-32(s0)
20404fcc:	86b2                	mv	a3,a2
20404fce:	4701                	li	a4,0
20404fd0:	00d7e633          	or	a2,a5,a3
20404fd4:	fec42423          	sw	a2,-24(s0)
20404fd8:	00e867b3          	or	a5,a6,a4
20404fdc:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20404fe0:	fe842783          	lw	a5,-24(s0)
20404fe4:	fec42803          	lw	a6,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20404fe8:	853e                	mv	a0,a5
20404fea:	85c2                	mv	a1,a6
20404fec:	5472                	lw	s0,60(sp)
20404fee:	6121                	addi	sp,sp,64
20404ff0:	8082                	ret

20404ff2 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20404ff2:	7179                	addi	sp,sp,-48
20404ff4:	d606                	sw	ra,44(sp)
20404ff6:	d422                	sw	s0,40(sp)
20404ff8:	d24a                	sw	s2,36(sp)
20404ffa:	d04e                	sw	s3,32(sp)
20404ffc:	1800                	addi	s0,sp,48
20404ffe:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20405002:	fdc42783          	lw	a5,-36(s0)
20405006:	e781                	bnez	a5,2040500e <__metal_driver_cpu_timebase_get+0x1c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20405008:	4901                	li	s2,0
2040500a:	4981                	li	s3,0
2040500c:	a821                	j	20405024 <__metal_driver_cpu_timebase_get+0x32>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
2040500e:	fdc42503          	lw	a0,-36(s0)
20405012:	a61fe0ef          	jal	ra,20403a72 <__metal_driver_cpu_timebase>
20405016:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
2040501a:	fec42783          	lw	a5,-20(s0)
2040501e:	893e                	mv	s2,a5
20405020:	87fd                	srai	a5,a5,0x1f
20405022:	89be                	mv	s3,a5
20405024:	87ca                	mv	a5,s2
20405026:	884e                	mv	a6,s3
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20405028:	853e                	mv	a0,a5
2040502a:	85c2                	mv	a1,a6
2040502c:	50b2                	lw	ra,44(sp)
2040502e:	5422                	lw	s0,40(sp)
20405030:	5912                	lw	s2,36(sp)
20405032:	5982                	lw	s3,32(sp)
20405034:	6145                	addi	sp,sp,48
20405036:	8082                	ret

20405038 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20405038:	7179                	addi	sp,sp,-48
2040503a:	d606                	sw	ra,44(sp)
2040503c:	d422                	sw	s0,40(sp)
2040503e:	1800                	addi	s0,sp,48
20405040:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20405044:	4781                	li	a5,0
20405046:	4801                	li	a6,0
20405048:	fef42023          	sw	a5,-32(s0)
2040504c:	ff042223          	sw	a6,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20405050:	fdc42503          	lw	a0,-36(s0)
20405054:	a49fe0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20405058:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
2040505c:	fec42783          	lw	a5,-20(s0)
20405060:	c78d                	beqz	a5,2040508a <__metal_driver_cpu_mtime_get+0x52>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20405062:	fec42783          	lw	a5,-20(s0)
20405066:	13c7a783          	lw	a5,316(a5)
2040506a:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
2040506e:	fe842783          	lw	a5,-24(s0)
20405072:	cf81                	beqz	a5,2040508a <__metal_driver_cpu_mtime_get+0x52>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20405074:	fe842783          	lw	a5,-24(s0)
20405078:	439c                	lw	a5,0(a5)
2040507a:	43f8                	lw	a4,68(a5)
2040507c:	fe040793          	addi	a5,s0,-32
20405080:	863e                	mv	a2,a5
20405082:	4585                	li	a1,1
20405084:	fe842503          	lw	a0,-24(s0)
20405088:	9702                	jalr	a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
2040508a:	fe042783          	lw	a5,-32(s0)
2040508e:	fe442803          	lw	a6,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20405092:	853e                	mv	a0,a5
20405094:	85c2                	mv	a1,a6
20405096:	50b2                	lw	ra,44(sp)
20405098:	5422                	lw	s0,40(sp)
2040509a:	6145                	addi	sp,sp,48
2040509c:	8082                	ret

2040509e <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
2040509e:	7179                	addi	sp,sp,-48
204050a0:	d606                	sw	ra,44(sp)
204050a2:	d422                	sw	s0,40(sp)
204050a4:	d226                	sw	s1,36(sp)
204050a6:	1800                	addi	s0,sp,48
204050a8:	fca42e23          	sw	a0,-36(s0)
204050ac:	fcb42823          	sw	a1,-48(s0)
204050b0:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204050b4:	57fd                	li	a5,-1
204050b6:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204050ba:	fdc42503          	lw	a0,-36(s0)
204050be:	9dffe0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204050c2:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
204050c6:	fe842783          	lw	a5,-24(s0)
204050ca:	cf8d                	beqz	a5,20405104 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
204050cc:	fe842783          	lw	a5,-24(s0)
204050d0:	13c7a783          	lw	a5,316(a5)
204050d4:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
204050d8:	fe442783          	lw	a5,-28(s0)
204050dc:	c785                	beqz	a5,20405104 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
204050de:	fe442783          	lw	a5,-28(s0)
204050e2:	439c                	lw	a5,0(a5)
204050e4:	47a4                	lw	s1,72(a5)
204050e6:	fdc42503          	lw	a0,-36(s0)
204050ea:	965fe0ef          	jal	ra,20403a4e <__metal_driver_cpu_hartid>
204050ee:	87aa                	mv	a5,a0
204050f0:	fd042603          	lw	a2,-48(s0)
204050f4:	fd442683          	lw	a3,-44(s0)
204050f8:	85be                	mv	a1,a5
204050fa:	fe442503          	lw	a0,-28(s0)
204050fe:	9482                	jalr	s1
20405100:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20405104:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20405108:	853e                	mv	a0,a5
2040510a:	50b2                	lw	ra,44(sp)
2040510c:	5422                	lw	s0,40(sp)
2040510e:	5492                	lw	s1,36(sp)
20405110:	6145                	addi	sp,sp,48
20405112:	8082                	ret

20405114 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20405114:	1101                	addi	sp,sp,-32
20405116:	ce22                	sw	s0,28(sp)
20405118:	1000                	addi	s0,sp,32
2040511a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2040511e:	81818793          	addi	a5,gp,-2024 # 800007e0 <__metal_dt_clint_2000000>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20405122:	853e                	mv	a0,a5
20405124:	4472                	lw	s0,28(sp)
20405126:	6105                	addi	sp,sp,32
20405128:	8082                	ret

2040512a <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
2040512a:	1101                	addi	sp,sp,-32
2040512c:	ce22                	sw	s0,28(sp)
2040512e:	1000                	addi	s0,sp,32
20405130:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20405134:	479d                	li	a5,7
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20405136:	853e                	mv	a0,a5
20405138:	4472                	lw	s0,28(sp)
2040513a:	6105                	addi	sp,sp,32
2040513c:	8082                	ret

2040513e <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
2040513e:	1101                	addi	sp,sp,-32
20405140:	ce22                	sw	s0,28(sp)
20405142:	1000                	addi	s0,sp,32
20405144:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20405148:	81818793          	addi	a5,gp,-2024 # 800007e0 <__metal_dt_clint_2000000>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
2040514c:	853e                	mv	a0,a5
2040514e:	4472                	lw	s0,28(sp)
20405150:	6105                	addi	sp,sp,32
20405152:	8082                	ret

20405154 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20405154:	1101                	addi	sp,sp,-32
20405156:	ce22                	sw	s0,28(sp)
20405158:	1000                	addi	s0,sp,32
2040515a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2040515e:	478d                	li	a5,3
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20405160:	853e                	mv	a0,a5
20405162:	4472                	lw	s0,28(sp)
20405164:	6105                	addi	sp,sp,32
20405166:	8082                	ret

20405168 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20405168:	7179                	addi	sp,sp,-48
2040516a:	d606                	sw	ra,44(sp)
2040516c:	d422                	sw	s0,40(sp)
2040516e:	1800                	addi	s0,sp,48
20405170:	fca42e23          	sw	a0,-36(s0)
20405174:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20405178:	57fd                	li	a5,-1
2040517a:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040517e:	fdc42503          	lw	a0,-36(s0)
20405182:	91bfe0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20405186:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
2040518a:	fe842783          	lw	a5,-24(s0)
2040518e:	c79d                	beqz	a5,204051bc <__metal_driver_cpu_set_sw_ipi+0x54>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20405190:	fe842783          	lw	a5,-24(s0)
20405194:	0dc7a783          	lw	a5,220(a5)
20405198:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
2040519c:	fe442783          	lw	a5,-28(s0)
204051a0:	cf91                	beqz	a5,204051bc <__metal_driver_cpu_set_sw_ipi+0x54>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
204051a2:	fe442783          	lw	a5,-28(s0)
204051a6:	439c                	lw	a5,0(a5)
204051a8:	43f8                	lw	a4,68(a5)
204051aa:	fd840793          	addi	a5,s0,-40
204051ae:	863e                	mv	a2,a5
204051b0:	458d                	li	a1,3
204051b2:	fe442503          	lw	a0,-28(s0)
204051b6:	9702                	jalr	a4
204051b8:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204051bc:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
204051c0:	853e                	mv	a0,a5
204051c2:	50b2                	lw	ra,44(sp)
204051c4:	5422                	lw	s0,40(sp)
204051c6:	6145                	addi	sp,sp,48
204051c8:	8082                	ret

204051ca <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204051ca:	7179                	addi	sp,sp,-48
204051cc:	d606                	sw	ra,44(sp)
204051ce:	d422                	sw	s0,40(sp)
204051d0:	1800                	addi	s0,sp,48
204051d2:	fca42e23          	sw	a0,-36(s0)
204051d6:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
204051da:	57fd                	li	a5,-1
204051dc:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204051e0:	fdc42503          	lw	a0,-36(s0)
204051e4:	8b9fe0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204051e8:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
204051ec:	fe842783          	lw	a5,-24(s0)
204051f0:	c79d                	beqz	a5,2040521e <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204051f2:	fe842783          	lw	a5,-24(s0)
204051f6:	0dc7a783          	lw	a5,220(a5)
204051fa:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
204051fe:	fe442783          	lw	a5,-28(s0)
20405202:	cf91                	beqz	a5,2040521e <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20405204:	fe442783          	lw	a5,-28(s0)
20405208:	439c                	lw	a5,0(a5)
2040520a:	43f8                	lw	a4,68(a5)
2040520c:	fd840793          	addi	a5,s0,-40
20405210:	863e                	mv	a2,a5
20405212:	4589                	li	a1,2
20405214:	fe442503          	lw	a0,-28(s0)
20405218:	9702                	jalr	a4
2040521a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2040521e:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20405222:	853e                	mv	a0,a5
20405224:	50b2                	lw	ra,44(sp)
20405226:	5422                	lw	s0,40(sp)
20405228:	6145                	addi	sp,sp,48
2040522a:	8082                	ret

2040522c <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
2040522c:	7179                	addi	sp,sp,-48
2040522e:	d606                	sw	ra,44(sp)
20405230:	d422                	sw	s0,40(sp)
20405232:	1800                	addi	s0,sp,48
20405234:	fca42e23          	sw	a0,-36(s0)
20405238:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
2040523c:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20405240:	fdc42503          	lw	a0,-36(s0)
20405244:	859fe0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
20405248:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
2040524c:	fe842783          	lw	a5,-24(s0)
20405250:	c79d                	beqz	a5,2040527e <__metal_driver_cpu_get_msip+0x52>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20405252:	fe842783          	lw	a5,-24(s0)
20405256:	0dc7a783          	lw	a5,220(a5)
2040525a:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2040525e:	fe442783          	lw	a5,-28(s0)
20405262:	cf91                	beqz	a5,2040527e <__metal_driver_cpu_get_msip+0x52>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20405264:	fe442783          	lw	a5,-28(s0)
20405268:	439c                	lw	a5,0(a5)
2040526a:	43f8                	lw	a4,68(a5)
2040526c:	fd840793          	addi	a5,s0,-40
20405270:	863e                	mv	a2,a5
20405272:	4591                	li	a1,4
20405274:	fe442503          	lw	a0,-28(s0)
20405278:	9702                	jalr	a4
2040527a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
2040527e:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20405282:	853e                	mv	a0,a5
20405284:	50b2                	lw	ra,44(sp)
20405286:	5422                	lw	s0,40(sp)
20405288:	6145                	addi	sp,sp,48
2040528a:	8082                	ret

2040528c <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
2040528c:	1101                	addi	sp,sp,-32
2040528e:	ce06                	sw	ra,28(sp)
20405290:	cc22                	sw	s0,24(sp)
20405292:	1000                	addi	s0,sp,32
20405294:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20405298:	fec42503          	lw	a0,-20(s0)
2040529c:	801fe0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204052a0:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
204052a2:	853e                	mv	a0,a5
204052a4:	40f2                	lw	ra,28(sp)
204052a6:	4462                	lw	s0,24(sp)
204052a8:	6105                	addi	sp,sp,32
204052aa:	8082                	ret

204052ac <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204052ac:	7179                	addi	sp,sp,-48
204052ae:	d606                	sw	ra,44(sp)
204052b0:	d422                	sw	s0,40(sp)
204052b2:	1800                	addi	s0,sp,48
204052b4:	fca42e23          	sw	a0,-36(s0)
204052b8:	fcb42c23          	sw	a1,-40(s0)
204052bc:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204052c0:	fdc42503          	lw	a0,-36(s0)
204052c4:	fd8fe0ef          	jal	ra,20403a9c <__metal_driver_cpu_interrupt_controller>
204052c8:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
204052cc:	fec42783          	lw	a5,-20(s0)
204052d0:	cb99                	beqz	a5,204052e6 <__metal_driver_cpu_exception_register+0x3a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
204052d2:	fd442603          	lw	a2,-44(s0)
204052d6:	fd842583          	lw	a1,-40(s0)
204052da:	fec42503          	lw	a0,-20(s0)
204052de:	8d9ff0ef          	jal	ra,20404bb6 <__metal_exception_register>
204052e2:	87aa                	mv	a5,a0
204052e4:	a011                	j	204052e8 <__metal_driver_cpu_exception_register+0x3c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
204052e6:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
204052e8:	853e                	mv	a0,a5
204052ea:	50b2                	lw	ra,44(sp)
204052ec:	5422                	lw	s0,40(sp)
204052ee:	6145                	addi	sp,sp,48
204052f0:	8082                	ret

204052f2 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
204052f2:	1101                	addi	sp,sp,-32
204052f4:	ce22                	sw	s0,28(sp)
204052f6:	1000                	addi	s0,sp,32
204052f8:	fea42623          	sw	a0,-20(s0)
204052fc:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20405300:	fe842783          	lw	a5,-24(s0)
20405304:	0007d783          	lhu	a5,0(a5)
20405308:	0037f713          	andi	a4,a5,3
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
2040530c:	478d                	li	a5,3
2040530e:	00f71463          	bne	a4,a5,20405316 <__metal_driver_cpu_get_instruction_length+0x24>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20405312:	4791                	li	a5,4
20405314:	a011                	j	20405318 <__metal_driver_cpu_get_instruction_length+0x26>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20405316:	4789                	li	a5,2
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20405318:	853e                	mv	a0,a5
2040531a:	4472                	lw	s0,28(sp)
2040531c:	6105                	addi	sp,sp,32
2040531e:	8082                	ret

20405320 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20405320:	7179                	addi	sp,sp,-48
20405322:	d622                	sw	s0,44(sp)
20405324:	1800                	addi	s0,sp,48
20405326:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
2040532a:	341027f3          	csrr	a5,mepc
2040532e:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20405332:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20405336:	853e                	mv	a0,a5
20405338:	5432                	lw	s0,44(sp)
2040533a:	6145                	addi	sp,sp,48
2040533c:	8082                	ret

2040533e <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
2040533e:	1101                	addi	sp,sp,-32
20405340:	ce22                	sw	s0,28(sp)
20405342:	1000                	addi	s0,sp,32
20405344:	fea42623          	sw	a0,-20(s0)
20405348:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
2040534c:	fe842783          	lw	a5,-24(s0)
20405350:	34179073          	csrw	mepc,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20405354:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20405356:	853e                	mv	a0,a5
20405358:	4472                	lw	s0,28(sp)
2040535a:	6105                	addi	sp,sp,32
2040535c:	8082                	ret

2040535e <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:289



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
2040535e:	1101                	addi	sp,sp,-32
20405360:	ce22                	sw	s0,28(sp)
20405362:	1000                	addi	s0,sp,32
20405364:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:290
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20405368:	fec42703          	lw	a4,-20(s0)
2040536c:	800007b7          	lui	a5,0x80000
20405370:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffcb8c>
20405374:	00f71563          	bne	a4,a5,2040537e <__metal_driver_sifive_plic0_control_base+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:291
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20405378:	0c0007b7          	lui	a5,0xc000
2040537c:	a011                	j	20405380 <__metal_driver_sifive_plic0_control_base+0x22>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:294
	}
	else {
		return 0;
2040537e:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:296
	}
}
20405380:	853e                	mv	a0,a5
20405382:	4472                	lw	s0,28(sp)
20405384:	6105                	addi	sp,sp,32
20405386:	8082                	ret

20405388 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:309
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20405388:	1101                	addi	sp,sp,-32
2040538a:	ce22                	sw	s0,28(sp)
2040538c:	1000                	addi	s0,sp,32
2040538e:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:310
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20405392:	fec42703          	lw	a4,-20(s0)
20405396:	800007b7          	lui	a5,0x80000
2040539a:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffcb8c>
2040539e:	00f71463          	bne	a4,a5,204053a6 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:311
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
204053a2:	47ed                	li	a5,27
204053a4:	a011                	j	204053a8 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:314
	}
	else {
		return 0;
204053a6:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:316
	}
}
204053a8:	853e                	mv	a0,a5
204053aa:	4472                	lw	s0,28(sp)
204053ac:	6105                	addi	sp,sp,32
204053ae:	8082                	ret

204053b0 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:319

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
204053b0:	1101                	addi	sp,sp,-32
204053b2:	ce22                	sw	s0,28(sp)
204053b4:	1000                	addi	s0,sp,32
204053b6:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:320
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204053ba:	fec42703          	lw	a4,-20(s0)
204053be:	800007b7          	lui	a5,0x80000
204053c2:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffcb8c>
204053c6:	00f71463          	bne	a4,a5,204053ce <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:321
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
204053ca:	479d                	li	a5,7
204053cc:	a011                	j	204053d0 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:324
	}
	else {
		return 0;
204053ce:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:326
	}
}
204053d0:	853e                	mv	a0,a5
204053d2:	4472                	lw	s0,28(sp)
204053d4:	6105                	addi	sp,sp,32
204053d6:	8082                	ret

204053d8 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:329

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
204053d8:	1101                	addi	sp,sp,-32
204053da:	ce22                	sw	s0,28(sp)
204053dc:	1000                	addi	s0,sp,32
204053de:	fea42623          	sw	a0,-20(s0)
204053e2:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:330
	if (idx == 0) {
204053e6:	fe842783          	lw	a5,-24(s0)
204053ea:	e791                	bnez	a5,204053f6 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:331
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204053ec:	800007b7          	lui	a5,0x80000
204053f0:	08878793          	addi	a5,a5,136 # 80000088 <metal_segment_heap_target_end+0xffffc7d4>
204053f4:	a011                	j	204053f8 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:334
	}
	else {
		return NULL;
204053f6:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:336
	}
}
204053f8:	853e                	mv	a0,a5
204053fa:	4472                	lw	s0,28(sp)
204053fc:	6105                	addi	sp,sp,32
204053fe:	8082                	ret

20405400 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:339

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20405400:	1101                	addi	sp,sp,-32
20405402:	ce22                	sw	s0,28(sp)
20405404:	1000                	addi	s0,sp,32
20405406:	fea42623          	sw	a0,-20(s0)
2040540a:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:340
	if (idx == 0) {
2040540e:	fe842783          	lw	a5,-24(s0)
20405412:	e399                	bnez	a5,20405418 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:341
		return 11;
20405414:	47ad                	li	a5,11
20405416:	a011                	j	2040541a <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:344
	}
	else {
		return 0;
20405418:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:346
	}
}
2040541a:	853e                	mv	a0,a5
2040541c:	4472                	lw	s0,28(sp)
2040541e:	6105                	addi	sp,sp,32
20405420:	8082                	ret

20405422 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20405422:	7179                	addi	sp,sp,-48
20405424:	d606                	sw	ra,44(sp)
20405426:	d422                	sw	s0,40(sp)
20405428:	1800                	addi	s0,sp,48
2040542a:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040542e:	fdc42503          	lw	a0,-36(s0)
20405432:	3735                	jal	2040535e <__metal_driver_sifive_plic0_control_base>
20405434:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405438:	fec42703          	lw	a4,-20(s0)
2040543c:	002007b7          	lui	a5,0x200
20405440:	0791                	addi	a5,a5,4
20405442:	97ba                	add	a5,a5,a4
20405444:	439c                	lw	a5,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20405446:	853e                	mv	a0,a5
20405448:	50b2                	lw	ra,44(sp)
2040544a:	5422                	lw	s0,40(sp)
2040544c:	6145                	addi	sp,sp,48
2040544e:	8082                	ret

20405450 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20405450:	7179                	addi	sp,sp,-48
20405452:	d606                	sw	ra,44(sp)
20405454:	d422                	sw	s0,40(sp)
20405456:	1800                	addi	s0,sp,48
20405458:	fca42e23          	sw	a0,-36(s0)
2040545c:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20405460:	fdc42503          	lw	a0,-36(s0)
20405464:	3ded                	jal	2040535e <__metal_driver_sifive_plic0_control_base>
20405466:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040546a:	fec42703          	lw	a4,-20(s0)
2040546e:	002007b7          	lui	a5,0x200
20405472:	0791                	addi	a5,a5,4
20405474:	97ba                	add	a5,a5,a4
20405476:	873e                	mv	a4,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20405478:	fd842783          	lw	a5,-40(s0)
2040547c:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
2040547e:	0001                	nop
20405480:	50b2                	lw	ra,44(sp)
20405482:	5422                	lw	s0,40(sp)
20405484:	6145                	addi	sp,sp,48
20405486:	8082                	ret

20405488 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20405488:	7179                	addi	sp,sp,-48
2040548a:	d606                	sw	ra,44(sp)
2040548c:	d422                	sw	s0,40(sp)
2040548e:	1800                	addi	s0,sp,48
20405490:	fca42e23          	sw	a0,-36(s0)
20405494:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20405498:	fdc42503          	lw	a0,-36(s0)
2040549c:	35c9                	jal	2040535e <__metal_driver_sifive_plic0_control_base>
2040549e:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204054a2:	fec42703          	lw	a4,-20(s0)
204054a6:	002007b7          	lui	a5,0x200
204054aa:	97ba                	add	a5,a5,a4
204054ac:	873e                	mv	a4,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
204054ae:	fd842783          	lw	a5,-40(s0)
204054b2:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
204054b4:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
204054b6:	853e                	mv	a0,a5
204054b8:	50b2                	lw	ra,44(sp)
204054ba:	5422                	lw	s0,40(sp)
204054bc:	6145                	addi	sp,sp,48
204054be:	8082                	ret

204054c0 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
204054c0:	7179                	addi	sp,sp,-48
204054c2:	d606                	sw	ra,44(sp)
204054c4:	d422                	sw	s0,40(sp)
204054c6:	1800                	addi	s0,sp,48
204054c8:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204054cc:	fdc42503          	lw	a0,-36(s0)
204054d0:	3579                	jal	2040535e <__metal_driver_sifive_plic0_control_base>
204054d2:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204054d6:	fec42703          	lw	a4,-20(s0)
204054da:	002007b7          	lui	a5,0x200
204054de:	97ba                	add	a5,a5,a4
204054e0:	439c                	lw	a5,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
204054e2:	853e                	mv	a0,a5
204054e4:	50b2                	lw	ra,44(sp)
204054e6:	5422                	lw	s0,40(sp)
204054e8:	6145                	addi	sp,sp,48
204054ea:	8082                	ret

204054ec <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
204054ec:	7179                	addi	sp,sp,-48
204054ee:	d606                	sw	ra,44(sp)
204054f0:	d422                	sw	s0,40(sp)
204054f2:	1800                	addi	s0,sp,48
204054f4:	fca42e23          	sw	a0,-36(s0)
204054f8:	fcb42c23          	sw	a1,-40(s0)
204054fc:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20405500:	fdc42503          	lw	a0,-36(s0)
20405504:	3da9                	jal	2040535e <__metal_driver_sifive_plic0_control_base>
20405506:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
2040550a:	fdc42503          	lw	a0,-36(s0)
2040550e:	354d                	jal	204053b0 <__metal_driver_sifive_plic0_max_priority>
20405510:	87aa                	mv	a5,a0
20405512:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20405516:	fe842783          	lw	a5,-24(s0)
2040551a:	c785                	beqz	a5,20405542 <__metal_plic0_set_priority+0x56>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
2040551c:	fd442703          	lw	a4,-44(s0)
20405520:	fe842783          	lw	a5,-24(s0)
20405524:	00f77f63          	bgeu	a4,a5,20405542 <__metal_plic0_set_priority+0x56>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20405528:	fd842783          	lw	a5,-40(s0)
2040552c:	078a                	slli	a5,a5,0x2
2040552e:	873e                	mv	a4,a5
20405530:	fec42783          	lw	a5,-20(s0)
20405534:	97ba                	add	a5,a5,a4
20405536:	873e                	mv	a4,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20405538:	fd442783          	lw	a5,-44(s0)
2040553c:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
2040553e:	4781                	li	a5,0
20405540:	a011                	j	20405544 <__metal_plic0_set_priority+0x58>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20405542:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20405544:	853e                	mv	a0,a5
20405546:	50b2                	lw	ra,44(sp)
20405548:	5422                	lw	s0,40(sp)
2040554a:	6145                	addi	sp,sp,48
2040554c:	8082                	ret

2040554e <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
2040554e:	7179                	addi	sp,sp,-48
20405550:	d606                	sw	ra,44(sp)
20405552:	d422                	sw	s0,40(sp)
20405554:	1800                	addi	s0,sp,48
20405556:	fca42e23          	sw	a0,-36(s0)
2040555a:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
2040555e:	fdc42503          	lw	a0,-36(s0)
20405562:	dfdff0ef          	jal	ra,2040535e <__metal_driver_sifive_plic0_control_base>
20405566:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040556a:	fd842783          	lw	a5,-40(s0)
2040556e:	078a                	slli	a5,a5,0x2
20405570:	873e                	mv	a4,a5
20405572:	fec42783          	lw	a5,-20(s0)
20405576:	97ba                	add	a5,a5,a4
20405578:	439c                	lw	a5,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
2040557a:	853e                	mv	a0,a5
2040557c:	50b2                	lw	ra,44(sp)
2040557e:	5422                	lw	s0,40(sp)
20405580:	6145                	addi	sp,sp,48
20405582:	8082                	ret

20405584 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20405584:	7179                	addi	sp,sp,-48
20405586:	d606                	sw	ra,44(sp)
20405588:	d422                	sw	s0,40(sp)
2040558a:	1800                	addi	s0,sp,48
2040558c:	fca42e23          	sw	a0,-36(s0)
20405590:	fcb42c23          	sw	a1,-40(s0)
20405594:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20405598:	fdc42503          	lw	a0,-36(s0)
2040559c:	dc3ff0ef          	jal	ra,2040535e <__metal_driver_sifive_plic0_control_base>
204055a0:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204055a4:	fd842783          	lw	a5,-40(s0)
204055a8:	8795                	srai	a5,a5,0x5
204055aa:	078a                	slli	a5,a5,0x2
204055ac:	873e                	mv	a4,a5
204055ae:	fec42783          	lw	a5,-20(s0)
204055b2:	973e                	add	a4,a4,a5
204055b4:	6789                	lui	a5,0x2
204055b6:	97ba                	add	a5,a5,a4
204055b8:	439c                	lw	a5,0(a5)
204055ba:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204055be:	fd442783          	lw	a5,-44(s0)
204055c2:	cf81                	beqz	a5,204055da <__metal_plic0_enable+0x56>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
204055c4:	fd842783          	lw	a5,-40(s0)
204055c8:	8bfd                	andi	a5,a5,31
204055ca:	4705                	li	a4,1
204055cc:	00f717b3          	sll	a5,a4,a5
204055d0:	873e                	mv	a4,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204055d2:	fe842783          	lw	a5,-24(s0)
204055d6:	8fd9                	or	a5,a5,a4
204055d8:	a829                	j	204055f2 <__metal_plic0_enable+0x6e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
204055da:	fd842783          	lw	a5,-40(s0)
204055de:	8bfd                	andi	a5,a5,31
204055e0:	4705                	li	a4,1
204055e2:	00f717b3          	sll	a5,a4,a5
204055e6:	fff7c793          	not	a5,a5
204055ea:	873e                	mv	a4,a5
204055ec:	fe842783          	lw	a5,-24(s0)
204055f0:	8ff9                	and	a5,a5,a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204055f2:	fd842703          	lw	a4,-40(s0)
204055f6:	8715                	srai	a4,a4,0x5
204055f8:	070a                	slli	a4,a4,0x2
204055fa:	86ba                	mv	a3,a4
204055fc:	fec42703          	lw	a4,-20(s0)
20405600:	96ba                	add	a3,a3,a4
20405602:	6709                	lui	a4,0x2
20405604:	9736                	add	a4,a4,a3
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20405606:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20405608:	0001                	nop
2040560a:	50b2                	lw	ra,44(sp)
2040560c:	5422                	lw	s0,40(sp)
2040560e:	6145                	addi	sp,sp,48
20405610:	8082                	ret

20405612 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20405612:	1101                	addi	sp,sp,-32
20405614:	ce06                	sw	ra,28(sp)
20405616:	cc22                	sw	s0,24(sp)
20405618:	1000                	addi	s0,sp,32
2040561a:	fea42623          	sw	a0,-20(s0)
2040561e:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20405622:	12c00513          	li	a0,300
20405626:	0b5020ef          	jal	ra,20407eda <metal_shutdown>

2040562a <__metal_plic0_handler>:
__metal_plic0_handler():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
2040562a:	7179                	addi	sp,sp,-48
2040562c:	d606                	sw	ra,44(sp)
2040562e:	d422                	sw	s0,40(sp)
20405630:	1800                	addi	s0,sp,48
20405632:	fca42e23          	sw	a0,-36(s0)
20405636:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
2040563a:	fd842783          	lw	a5,-40(s0)
2040563e:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20405642:	fec42503          	lw	a0,-20(s0)
20405646:	dddff0ef          	jal	ra,20405422 <__metal_plic0_claim_interrupt>
2040564a:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
2040564e:	fec42503          	lw	a0,-20(s0)
20405652:	d37ff0ef          	jal	ra,20405388 <__metal_driver_sifive_plic0_num_interrupts>
20405656:	87aa                	mv	a5,a0
20405658:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040565c:	fe842703          	lw	a4,-24(s0)
20405660:	fe442783          	lw	a5,-28(s0)
20405664:	04f77263          	bgeu	a4,a5,204056a8 <__metal_plic0_handler+0x7e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20405668:	fec42703          	lw	a4,-20(s0)
2040566c:	fe842783          	lw	a5,-24(s0)
20405670:	078a                	slli	a5,a5,0x2
20405672:	97ba                	add	a5,a5,a4
20405674:	479c                	lw	a5,8(a5)
20405676:	cb8d                	beqz	a5,204056a8 <__metal_plic0_handler+0x7e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20405678:	fec42703          	lw	a4,-20(s0)
2040567c:	fe842783          	lw	a5,-24(s0)
20405680:	078a                	slli	a5,a5,0x2
20405682:	97ba                	add	a5,a5,a4
20405684:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20405688:	fe842603          	lw	a2,-24(s0)
2040568c:	fec42683          	lw	a3,-20(s0)
20405690:	fe842703          	lw	a4,-24(s0)
20405694:	87ba                	mv	a5,a4
20405696:	0786                	slli	a5,a5,0x1
20405698:	97ba                	add	a5,a5,a4
2040569a:	078e                	slli	a5,a5,0x3
2040569c:	97b6                	add	a5,a5,a3
2040569e:	0887a783          	lw	a5,136(a5)
204056a2:	85be                	mv	a1,a5
204056a4:	8532                	mv	a0,a2
204056a6:	9802                	jalr	a6
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204056a8:	fe842583          	lw	a1,-24(s0)
204056ac:	fec42503          	lw	a0,-20(s0)
204056b0:	da1ff0ef          	jal	ra,20405450 <__metal_plic0_complete_interrupt>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204056b4:	0001                	nop
204056b6:	50b2                	lw	ra,44(sp)
204056b8:	5422                	lw	s0,40(sp)
204056ba:	6145                	addi	sp,sp,48
204056bc:	8082                	ret

204056be <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
204056be:	7139                	addi	sp,sp,-64
204056c0:	de06                	sw	ra,60(sp)
204056c2:	dc22                	sw	s0,56(sp)
204056c4:	0080                	addi	s0,sp,64
204056c6:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204056ca:	fcc42783          	lw	a5,-52(s0)
204056ce:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
204056d2:	fe442783          	lw	a5,-28(s0)
204056d6:	43dc                	lw	a5,4(a5)
204056d8:	12079163          	bnez	a5,204057fa <__metal_driver_riscv_plic0_init+0x13c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
204056dc:	fe042623          	sw	zero,-20(s0)
204056e0:	a229                	j	204057ea <__metal_driver_riscv_plic0_init+0x12c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
204056e2:	fcc42503          	lw	a0,-52(s0)
204056e6:	ca3ff0ef          	jal	ra,20405388 <__metal_driver_sifive_plic0_num_interrupts>
204056ea:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
204056ee:	fec42583          	lw	a1,-20(s0)
204056f2:	fcc42503          	lw	a0,-52(s0)
204056f6:	ce3ff0ef          	jal	ra,204053d8 <__metal_driver_sifive_plic0_interrupt_parents>
204056fa:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
204056fe:	fec42583          	lw	a1,-20(s0)
20405702:	fcc42503          	lw	a0,-52(s0)
20405706:	cfbff0ef          	jal	ra,20405400 <__metal_driver_sifive_plic0_interrupt_lines>
2040570a:	fca42c23          	sw	a0,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2040570e:	fdc42783          	lw	a5,-36(s0)
20405712:	439c                	lw	a5,0(a5)
20405714:	439c                	lw	a5,0(a5)
20405716:	fdc42503          	lw	a0,-36(s0)
2040571a:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
2040571c:	fe042423          	sw	zero,-24(s0)
20405720:	a08d                	j	20405782 <__metal_driver_riscv_plic0_init+0xc4>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20405722:	4601                	li	a2,0
20405724:	fe842583          	lw	a1,-24(s0)
20405728:	fe442503          	lw	a0,-28(s0)
2040572c:	3da1                	jal	20405584 <__metal_plic0_enable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2040572e:	4601                	li	a2,0
20405730:	fe842583          	lw	a1,-24(s0)
20405734:	fcc42503          	lw	a0,-52(s0)
20405738:	db5ff0ef          	jal	ra,204054ec <__metal_plic0_set_priority>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
2040573c:	fe442703          	lw	a4,-28(s0)
20405740:	fe842783          	lw	a5,-24(s0)
20405744:	078a                	slli	a5,a5,0x2
20405746:	97ba                	add	a5,a5,a4
20405748:	0007a423          	sw	zero,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
2040574c:	fe442683          	lw	a3,-28(s0)
20405750:	fe842703          	lw	a4,-24(s0)
20405754:	87ba                	mv	a5,a4
20405756:	0786                	slli	a5,a5,0x1
20405758:	97ba                	add	a5,a5,a4
2040575a:	078e                	slli	a5,a5,0x3
2040575c:	97b6                	add	a5,a5,a3
2040575e:	0807a223          	sw	zero,132(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20405762:	fe442683          	lw	a3,-28(s0)
20405766:	fe842703          	lw	a4,-24(s0)
2040576a:	87ba                	mv	a5,a4
2040576c:	0786                	slli	a5,a5,0x1
2040576e:	97ba                	add	a5,a5,a4
20405770:	078e                	slli	a5,a5,0x3
20405772:	97b6                	add	a5,a5,a3
20405774:	0807a423          	sw	zero,136(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20405778:	fe842783          	lw	a5,-24(s0)
2040577c:	0785                	addi	a5,a5,1
2040577e:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20405782:	fe842703          	lw	a4,-24(s0)
20405786:	fe042783          	lw	a5,-32(s0)
2040578a:	f8f74ce3          	blt	a4,a5,20405722 <__metal_driver_riscv_plic0_init+0x64>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
2040578e:	4581                	li	a1,0
20405790:	fcc42503          	lw	a0,-52(s0)
20405794:	cf5ff0ef          	jal	ra,20405488 <__metal_plic0_set_threshold>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20405798:	fdc42783          	lw	a5,-36(s0)
2040579c:	439c                	lw	a5,0(a5)
2040579e:	4fdc                	lw	a5,28(a5)
204057a0:	fe442683          	lw	a3,-28(s0)
204057a4:	4601                	li	a2,0
204057a6:	fd842583          	lw	a1,-40(s0)
204057aa:	fdc42503          	lw	a0,-36(s0)
204057ae:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204057b0:	fdc42783          	lw	a5,-36(s0)
204057b4:	439c                	lw	a5,0(a5)
204057b6:	4fd8                	lw	a4,28(a5)
204057b8:	fe442683          	lw	a3,-28(s0)
204057bc:	204057b7          	lui	a5,0x20405
204057c0:	62a78613          	addi	a2,a5,1578 # 2040562a <__metal_plic0_handler>
204057c4:	fd842583          	lw	a1,-40(s0)
204057c8:	fdc42503          	lw	a0,-36(s0)
204057cc:	9702                	jalr	a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
204057ce:	fdc42783          	lw	a5,-36(s0)
204057d2:	439c                	lw	a5,0(a5)
204057d4:	53dc                	lw	a5,36(a5)
204057d6:	fd842583          	lw	a1,-40(s0)
204057da:	fdc42503          	lw	a0,-36(s0)
204057de:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
204057e0:	fec42783          	lw	a5,-20(s0)
204057e4:	0785                	addi	a5,a5,1
204057e6:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
204057ea:	fec42783          	lw	a5,-20(s0)
204057ee:	eef05ae3          	blez	a5,204056e2 <__metal_driver_riscv_plic0_init+0x24>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
204057f2:	fe442783          	lw	a5,-28(s0)
204057f6:	4705                	li	a4,1
204057f8:	c3d8                	sw	a4,4(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
204057fa:	0001                	nop
204057fc:	50f2                	lw	ra,60(sp)
204057fe:	5462                	lw	s0,56(sp)
20405800:	6121                	addi	sp,sp,64
20405802:	8082                	ret

20405804 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20405804:	7179                	addi	sp,sp,-48
20405806:	d606                	sw	ra,44(sp)
20405808:	d422                	sw	s0,40(sp)
2040580a:	1800                	addi	s0,sp,48
2040580c:	fca42e23          	sw	a0,-36(s0)
20405810:	fcb42c23          	sw	a1,-40(s0)
20405814:	fcc42a23          	sw	a2,-44(s0)
20405818:	fcd42823          	sw	a3,-48(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040581c:	fdc42783          	lw	a5,-36(s0)
20405820:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20405824:	fdc42503          	lw	a0,-36(s0)
20405828:	b61ff0ef          	jal	ra,20405388 <__metal_driver_sifive_plic0_num_interrupts>
2040582c:	872a                	mv	a4,a0
2040582e:	fd842783          	lw	a5,-40(s0)
20405832:	00e7c463          	blt	a5,a4,2040583a <__metal_driver_riscv_plic0_register+0x36>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20405836:	57fd                	li	a5,-1
20405838:	a051                	j	204058bc <__metal_driver_riscv_plic0_register+0xb8>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
2040583a:	fd442783          	lw	a5,-44(s0)
2040583e:	cf9d                	beqz	a5,2040587c <__metal_driver_riscv_plic0_register+0x78>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20405840:	4609                	li	a2,2
20405842:	fd842583          	lw	a1,-40(s0)
20405846:	fdc42503          	lw	a0,-36(s0)
2040584a:	ca3ff0ef          	jal	ra,204054ec <__metal_plic0_set_priority>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
2040584e:	fec42703          	lw	a4,-20(s0)
20405852:	fd842783          	lw	a5,-40(s0)
20405856:	078a                	slli	a5,a5,0x2
20405858:	97ba                	add	a5,a5,a4
2040585a:	fd442703          	lw	a4,-44(s0)
2040585e:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20405860:	fec42683          	lw	a3,-20(s0)
20405864:	fd842703          	lw	a4,-40(s0)
20405868:	87ba                	mv	a5,a4
2040586a:	0786                	slli	a5,a5,0x1
2040586c:	97ba                	add	a5,a5,a4
2040586e:	078e                	slli	a5,a5,0x3
20405870:	97b6                	add	a5,a5,a3
20405872:	fd042703          	lw	a4,-48(s0)
20405876:	08e7a423          	sw	a4,136(a5)
2040587a:	a081                	j	204058ba <__metal_driver_riscv_plic0_register+0xb6>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
2040587c:	4605                	li	a2,1
2040587e:	fd842583          	lw	a1,-40(s0)
20405882:	fdc42503          	lw	a0,-36(s0)
20405886:	c67ff0ef          	jal	ra,204054ec <__metal_plic0_set_priority>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
2040588a:	fec42703          	lw	a4,-20(s0)
2040588e:	fd842783          	lw	a5,-40(s0)
20405892:	078a                	slli	a5,a5,0x2
20405894:	97ba                	add	a5,a5,a4
20405896:	20405737          	lui	a4,0x20405
2040589a:	61270713          	addi	a4,a4,1554 # 20405612 <__metal_plic0_default_handler>
2040589e:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204058a0:	fec42683          	lw	a3,-20(s0)
204058a4:	fd842703          	lw	a4,-40(s0)
204058a8:	87ba                	mv	a5,a4
204058aa:	0786                	slli	a5,a5,0x1
204058ac:	97ba                	add	a5,a5,a4
204058ae:	078e                	slli	a5,a5,0x3
204058b0:	97b6                	add	a5,a5,a3
204058b2:	fd042703          	lw	a4,-48(s0)
204058b6:	08e7a223          	sw	a4,132(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204058ba:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204058bc:	853e                	mv	a0,a5
204058be:	50b2                	lw	ra,44(sp)
204058c0:	5422                	lw	s0,40(sp)
204058c2:	6145                	addi	sp,sp,48
204058c4:	8082                	ret

204058c6 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204058c6:	7179                	addi	sp,sp,-48
204058c8:	d606                	sw	ra,44(sp)
204058ca:	d422                	sw	s0,40(sp)
204058cc:	1800                	addi	s0,sp,48
204058ce:	fca42e23          	sw	a0,-36(s0)
204058d2:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204058d6:	fdc42783          	lw	a5,-36(s0)
204058da:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204058de:	fdc42503          	lw	a0,-36(s0)
204058e2:	aa7ff0ef          	jal	ra,20405388 <__metal_driver_sifive_plic0_num_interrupts>
204058e6:	872a                	mv	a4,a0
204058e8:	fd842783          	lw	a5,-40(s0)
204058ec:	00e7c463          	blt	a5,a4,204058f4 <__metal_driver_riscv_plic0_enable+0x2e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
204058f0:	57fd                	li	a5,-1
204058f2:	a809                	j	20405904 <__metal_driver_riscv_plic0_enable+0x3e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
204058f4:	4605                	li	a2,1
204058f6:	fd842583          	lw	a1,-40(s0)
204058fa:	fec42503          	lw	a0,-20(s0)
204058fe:	c87ff0ef          	jal	ra,20405584 <__metal_plic0_enable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20405902:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20405904:	853e                	mv	a0,a5
20405906:	50b2                	lw	ra,44(sp)
20405908:	5422                	lw	s0,40(sp)
2040590a:	6145                	addi	sp,sp,48
2040590c:	8082                	ret

2040590e <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
2040590e:	7179                	addi	sp,sp,-48
20405910:	d606                	sw	ra,44(sp)
20405912:	d422                	sw	s0,40(sp)
20405914:	1800                	addi	s0,sp,48
20405916:	fca42e23          	sw	a0,-36(s0)
2040591a:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040591e:	fdc42783          	lw	a5,-36(s0)
20405922:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20405926:	fdc42503          	lw	a0,-36(s0)
2040592a:	a5fff0ef          	jal	ra,20405388 <__metal_driver_sifive_plic0_num_interrupts>
2040592e:	872a                	mv	a4,a0
20405930:	fd842783          	lw	a5,-40(s0)
20405934:	00e7c463          	blt	a5,a4,2040593c <__metal_driver_riscv_plic0_disable+0x2e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20405938:	57fd                	li	a5,-1
2040593a:	a809                	j	2040594c <__metal_driver_riscv_plic0_disable+0x3e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
2040593c:	4601                	li	a2,0
2040593e:	fd842583          	lw	a1,-40(s0)
20405942:	fec42503          	lw	a0,-20(s0)
20405946:	c3fff0ef          	jal	ra,20405584 <__metal_plic0_enable>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
2040594a:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
2040594c:	853e                	mv	a0,a5
2040594e:	50b2                	lw	ra,44(sp)
20405950:	5422                	lw	s0,40(sp)
20405952:	6145                	addi	sp,sp,48
20405954:	8082                	ret

20405956 <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:877



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
20405956:	1101                	addi	sp,sp,-32
20405958:	ce22                	sw	s0,28(sp)
2040595a:	1000                	addi	s0,sp,32
2040595c:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:878
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
20405960:	800007b7          	lui	a5,0x80000
20405964:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffc7b8>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:879
}
20405968:	853e                	mv	a0,a5
2040596a:	4472                	lw	s0,28(sp)
2040596c:	6105                	addi	sp,sp,32
2040596e:	8082                	ret

20405970 <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:882

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
20405970:	1101                	addi	sp,sp,-32
20405972:	ce22                	sw	s0,28(sp)
20405974:	1000                	addi	s0,sp,32
20405976:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:883
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
2040597a:	82818793          	addi	a5,gp,-2008 # 800007f0 <__metal_dt_prci_10008000>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:884
}
2040597e:	853e                	mv	a0,a5
20405980:	4472                	lw	s0,28(sp)
20405982:	6105                	addi	sp,sp,32
20405984:	8082                	ret

20405986 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:892
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
20405986:	1101                	addi	sp,sp,-32
20405988:	ce22                	sw	s0,28(sp)
2040598a:	1000                	addi	s0,sp,32
2040598c:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:893
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
20405990:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:894
}
20405992:	853e                	mv	a0,a5
20405994:	4472                	lw	s0,28(sp)
20405996:	6105                	addi	sp,sp,32
20405998:	8082                	ret

2040599a <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1009
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
2040599a:	1141                	addi	sp,sp,-16
2040599c:	c622                	sw	s0,12(sp)
2040599e:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1010
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
204059a0:	83c18793          	addi	a5,gp,-1988 # 80000804 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1011
}
204059a4:	853e                	mv	a0,a5
204059a6:	4432                	lw	s0,12(sp)
204059a8:	0141                	addi	sp,sp,16
204059aa:	8082                	ret

204059ac <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
204059ac:	7139                	addi	sp,sp,-64
204059ae:	de06                	sw	ra,60(sp)
204059b0:	dc22                	sw	s0,56(sp)
204059b2:	0080                	addi	s0,sp,64
204059b4:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:18
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
204059b8:	fcc42503          	lw	a0,-52(s0)
204059bc:	3f69                	jal	20405956 <__metal_driver_sifive_fe310_g000_hfrosc_ref>
204059be:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    long config_offset = __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
204059c2:	fcc42503          	lw	a0,-52(s0)
204059c6:	37c1                	jal	20405986 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
204059c8:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
204059cc:	fcc42503          	lw	a0,-52(s0)
204059d0:	3745                	jal	20405970 <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
204059d2:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
204059d6:	37d1                	jal	2040599a <__metal_driver_sifive_fe310_g000_prci_vtable>
204059d8:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
204059dc:	fe042783          	lw	a5,-32(s0)
204059e0:	439c                	lw	a5,0(a5)
204059e2:	fe842583          	lw	a1,-24(s0)
204059e6:	fe442503          	lw	a0,-28(s0)
204059ea:	9782                	jalr	a5
204059ec:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
204059f0:	fdc42703          	lw	a4,-36(s0)
204059f4:	400007b7          	lui	a5,0x40000
204059f8:	8ff9                	and	a5,a5,a4
204059fa:	e399                	bnez	a5,20405a00 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:27
        return -1;
204059fc:	57fd                	li	a5,-1
204059fe:	a025                	j	20405a26 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28
    if ((cfg & CONFIG_READY) == 0)
20405a00:	fdc42783          	lw	a5,-36(s0)
20405a04:	0007c463          	bltz	a5,20405a0c <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
20405a08:	57fd                	li	a5,-1
20405a0a:	a831                	j	20405a26 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
20405a0c:	fec42503          	lw	a0,-20(s0)
20405a10:	14a020ef          	jal	ra,20407b5a <metal_clock_get_rate_hz>
20405a14:	87aa                	mv	a5,a0
20405a16:	873e                	mv	a4,a5
20405a18:	fdc42783          	lw	a5,-36(s0)
20405a1c:	03f7f793          	andi	a5,a5,63
20405a20:	0785                	addi	a5,a5,1
20405a22:	02f757b3          	divu	a5,a4,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
}
20405a26:	853e                	mv	a0,a5
20405a28:	50f2                	lw	ra,60(sp)
20405a2a:	5462                	lw	s0,56(sp)
20405a2c:	6121                	addi	sp,sp,64
20405a2e:	8082                	ret

20405a30 <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:34

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20405a30:	1101                	addi	sp,sp,-32
20405a32:	ce06                	sw	ra,28(sp)
20405a34:	cc22                	sw	s0,24(sp)
20405a36:	1000                	addi	s0,sp,32
20405a38:	fea42623          	sw	a0,-20(s0)
20405a3c:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:35
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
20405a40:	fec42503          	lw	a0,-20(s0)
20405a44:	37a5                	jal	204059ac <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20405a46:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36
}
20405a48:	853e                	mv	a0,a5
20405a4a:	40f2                	lw	ra,28(sp)
20405a4c:	4462                	lw	s0,24(sp)
20405a4e:	6105                	addi	sp,sp,32
20405a50:	8082                	ret

20405a52 <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:900
{
20405a52:	1101                	addi	sp,sp,-32
20405a54:	ce22                	sw	s0,28(sp)
20405a56:	1000                	addi	s0,sp,32
20405a58:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:901
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20405a5c:	800007b7          	lui	a5,0x80000
20405a60:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffc7ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:902
}
20405a64:	853e                	mv	a0,a5
20405a66:	4472                	lw	s0,28(sp)
20405a68:	6105                	addi	sp,sp,32
20405a6a:	8082                	ret

20405a6c <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:905
{
20405a6c:	1101                	addi	sp,sp,-32
20405a6e:	ce22                	sw	s0,28(sp)
20405a70:	1000                	addi	s0,sp,32
20405a72:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:906
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20405a76:	82818793          	addi	a5,gp,-2008 # 800007f0 <__metal_dt_prci_10008000>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:907
}
20405a7a:	853e                	mv	a0,a5
20405a7c:	4472                	lw	s0,28(sp)
20405a7e:	6105                	addi	sp,sp,32
20405a80:	8082                	ret

20405a82 <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:910
{
20405a82:	1101                	addi	sp,sp,-32
20405a84:	ce22                	sw	s0,28(sp)
20405a86:	1000                	addi	s0,sp,32
20405a88:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:911
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
20405a8c:	4791                	li	a5,4
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:912
}
20405a8e:	853e                	mv	a0,a5
20405a90:	4472                	lw	s0,28(sp)
20405a92:	6105                	addi	sp,sp,32
20405a94:	8082                	ret

20405a96 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1009
{
20405a96:	1141                	addi	sp,sp,-16
20405a98:	c622                	sw	s0,12(sp)
20405a9a:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1010
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20405a9c:	83c18793          	addi	a5,gp,-1988 # 80000804 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1011
}
20405aa0:	853e                	mv	a0,a5
20405aa2:	4432                	lw	s0,12(sp)
20405aa4:	0141                	addi	sp,sp,16
20405aa6:	8082                	ret

20405aa8 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
20405aa8:	7139                	addi	sp,sp,-64
20405aaa:	de06                	sw	ra,60(sp)
20405aac:	dc22                	sw	s0,56(sp)
20405aae:	0080                	addi	s0,sp,64
20405ab0:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:16
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
20405ab4:	fcc42503          	lw	a0,-52(s0)
20405ab8:	3f69                	jal	20405a52 <__metal_driver_sifive_fe310_g000_hfxosc_ref>
20405aba:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    long config_offset = __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
20405abe:	fcc42503          	lw	a0,-52(s0)
20405ac2:	37c1                	jal	20405a82 <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
20405ac4:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
20405ac8:	fcc42503          	lw	a0,-52(s0)
20405acc:	3745                	jal	20405a6c <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
20405ace:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20405ad2:	37d1                	jal	20405a96 <__metal_driver_sifive_fe310_g000_prci_vtable>
20405ad4:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:22
    long cfg = vtable->get_reg(config_base, config_offset);
20405ad8:	fe042783          	lw	a5,-32(s0)
20405adc:	439c                	lw	a5,0(a5)
20405ade:	fe842583          	lw	a1,-24(s0)
20405ae2:	fe442503          	lw	a0,-28(s0)
20405ae6:	9782                	jalr	a5
20405ae8:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24

    if ((cfg & CONFIG_ENABLE) == 0)
20405aec:	fdc42703          	lw	a4,-36(s0)
20405af0:	400007b7          	lui	a5,0x40000
20405af4:	8ff9                	and	a5,a5,a4
20405af6:	e399                	bnez	a5,20405afc <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:25
        return -1;
20405af8:	57fd                	li	a5,-1
20405afa:	a821                	j	20405b12 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26
    if ((cfg & CONFIG_READY) == 0)
20405afc:	fdc42783          	lw	a5,-36(s0)
20405b00:	0007c463          	bltz	a5,20405b08 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
20405b04:	57fd                	li	a5,-1
20405b06:	a031                	j	20405b12 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    return metal_clock_get_rate_hz(ref);
20405b08:	fec42503          	lw	a0,-20(s0)
20405b0c:	04e020ef          	jal	ra,20407b5a <metal_clock_get_rate_hz>
20405b10:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
}
20405b12:	853e                	mv	a0,a5
20405b14:	50f2                	lw	ra,60(sp)
20405b16:	5462                	lw	s0,56(sp)
20405b18:	6121                	addi	sp,sp,64
20405b1a:	8082                	ret

20405b1c <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:32

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20405b1c:	1101                	addi	sp,sp,-32
20405b1e:	ce06                	sw	ra,28(sp)
20405b20:	cc22                	sw	s0,24(sp)
20405b22:	1000                	addi	s0,sp,32
20405b24:	fea42623          	sw	a0,-20(s0)
20405b28:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:33
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20405b2c:	fec42503          	lw	a0,-20(s0)
20405b30:	3fa5                	jal	20405aa8 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
20405b32:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34
}
20405b34:	853e                	mv	a0,a5
20405b36:	40f2                	lw	ra,28(sp)
20405b38:	4462                	lw	s0,24(sp)
20405b3a:	6105                	addi	sp,sp,32
20405b3c:	8082                	ret

20405b3e <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:961
{
20405b3e:	1101                	addi	sp,sp,-32
20405b40:	ce22                	sw	s0,28(sp)
20405b42:	1000                	addi	s0,sp,32
20405b44:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:962
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
20405b48:	800007b7          	lui	a5,0x80000
20405b4c:	7a078793          	addi	a5,a5,1952 # 800007a0 <metal_segment_heap_target_end+0xffffceec>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:963
}
20405b50:	853e                	mv	a0,a5
20405b52:	4472                	lw	s0,28(sp)
20405b54:	6105                	addi	sp,sp,32
20405b56:	8082                	ret

20405b58 <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:966
{
20405b58:	1101                	addi	sp,sp,-32
20405b5a:	ce22                	sw	s0,28(sp)
20405b5c:	1000                	addi	s0,sp,32
20405b5e:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:967
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
20405b62:	800007b7          	lui	a5,0x80000
20405b66:	7ac78793          	addi	a5,a5,1964 # 800007ac <metal_segment_heap_target_end+0xffffcef8>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:968
}
20405b6a:	853e                	mv	a0,a5
20405b6c:	4472                	lw	s0,28(sp)
20405b6e:	6105                	addi	sp,sp,32
20405b70:	8082                	ret

20405b72 <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:971
{
20405b72:	1101                	addi	sp,sp,-32
20405b74:	ce22                	sw	s0,28(sp)
20405b76:	1000                	addi	s0,sp,32
20405b78:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:972
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20405b7c:	82818793          	addi	a5,gp,-2008 # 800007f0 <__metal_dt_prci_10008000>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:973
}
20405b80:	853e                	mv	a0,a5
20405b82:	4472                	lw	s0,28(sp)
20405b84:	6105                	addi	sp,sp,32
20405b86:	8082                	ret

20405b88 <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:976
{
20405b88:	1101                	addi	sp,sp,-32
20405b8a:	ce22                	sw	s0,28(sp)
20405b8c:	1000                	addi	s0,sp,32
20405b8e:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:977
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
20405b92:	47b1                	li	a5,12
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:978
}
20405b94:	853e                	mv	a0,a5
20405b96:	4472                	lw	s0,28(sp)
20405b98:	6105                	addi	sp,sp,32
20405b9a:	8082                	ret

20405b9c <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:981
{
20405b9c:	1141                	addi	sp,sp,-16
20405b9e:	c622                	sw	s0,12(sp)
20405ba0:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:982
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20405ba2:	82818793          	addi	a5,gp,-2008 # 800007f0 <__metal_dt_prci_10008000>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:983
}
20405ba6:	853e                	mv	a0,a5
20405ba8:	4432                	lw	s0,12(sp)
20405baa:	0141                	addi	sp,sp,16
20405bac:	8082                	ret

20405bae <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:986
{
20405bae:	1141                	addi	sp,sp,-16
20405bb0:	c622                	sw	s0,12(sp)
20405bb2:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:987
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
20405bb4:	47a1                	li	a5,8
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:988
}
20405bb6:	853e                	mv	a0,a5
20405bb8:	4432                	lw	s0,12(sp)
20405bba:	0141                	addi	sp,sp,16
20405bbc:	8082                	ret

20405bbe <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:991
{
20405bbe:	1141                	addi	sp,sp,-16
20405bc0:	c622                	sw	s0,12(sp)
20405bc2:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:992
		return 16000000;
20405bc4:	00f427b7          	lui	a5,0xf42
20405bc8:	40078793          	addi	a5,a5,1024 # f42400 <__stack_size+0xf3fc00>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:993
}
20405bcc:	853e                	mv	a0,a5
20405bce:	4432                	lw	s0,12(sp)
20405bd0:	0141                	addi	sp,sp,16
20405bd2:	8082                	ret

20405bd4 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:999
{
20405bd4:	1141                	addi	sp,sp,-16
20405bd6:	c622                	sw	s0,12(sp)
20405bd8:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1000
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20405bda:	100087b7          	lui	a5,0x10008
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1001
}
20405bde:	853e                	mv	a0,a5
20405be0:	4432                	lw	s0,12(sp)
20405be2:	0141                	addi	sp,sp,16
20405be4:	8082                	ret

20405be6 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1009
{
20405be6:	1141                	addi	sp,sp,-16
20405be8:	c622                	sw	s0,12(sp)
20405bea:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1010
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20405bec:	83c18793          	addi	a5,gp,-1988 # 80000804 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1011
}
20405bf0:	853e                	mv	a0,a5
20405bf2:	4432                	lw	s0,12(sp)
20405bf4:	0141                	addi	sp,sp,16
20405bf6:	8082                	ret

20405bf8 <get_pll_config_freq>:
get_pll_config_freq():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:137
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(unsigned long pll_input_rate, const struct pll_config_t *config)
{
20405bf8:	1101                	addi	sp,sp,-32
20405bfa:	ce22                	sw	s0,28(sp)
20405bfc:	1000                	addi	s0,sp,32
20405bfe:	fea42623          	sw	a0,-20(s0)
20405c02:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
20405c06:	fe842783          	lw	a5,-24(s0)
20405c0a:	479c                	lw	a5,8(a5)
20405c0c:	fec42703          	lw	a4,-20(s0)
20405c10:	00f76963          	bltu	a4,a5,20405c22 <get_pll_config_freq+0x2a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138 (discriminator 1)
20405c14:	fe842783          	lw	a5,-24(s0)
20405c18:	47dc                	lw	a5,12(a5)
20405c1a:	fec42703          	lw	a4,-20(s0)
20405c1e:	00e7f463          	bgeu	a5,a4,20405c26 <get_pll_config_freq+0x2e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:139
        return PLL_CONFIG_NOT_VALID;
20405c22:	57fd                	li	a5,-1
20405c24:	a829                	j	20405c3e <get_pll_config_freq+0x46>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141

    return pll_input_rate * config->multiplier / config->divisor;
20405c26:	fe842783          	lw	a5,-24(s0)
20405c2a:	4398                	lw	a4,0(a5)
20405c2c:	fec42783          	lw	a5,-20(s0)
20405c30:	02f70733          	mul	a4,a4,a5
20405c34:	fe842783          	lw	a5,-24(s0)
20405c38:	43dc                	lw	a5,4(a5)
20405c3a:	02f757b3          	divu	a5,a4,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
}
20405c3e:	853e                	mv	a0,a5
20405c40:	4472                	lw	s0,28(sp)
20405c42:	6105                	addi	sp,sp,32
20405c44:	8082                	ret

20405c46 <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:147

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
20405c46:	1101                	addi	sp,sp,-32
20405c48:	ce06                	sw	ra,28(sp)
20405c4a:	cc22                	sw	s0,24(sp)
20405c4c:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:148
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20405c4e:	3f85                	jal	20405bbe <__metal_driver_sifive_fe310_g000_pll_init_rate>
20405c50:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:150
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(init_rate != 0)
20405c54:	fec42783          	lw	a5,-20(s0)
20405c58:	c791                	beqz	a5,20405c64 <metal_sifive_fe310_g000_pll_init+0x1e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
20405c5a:	800007b7          	lui	a5,0x80000
20405c5e:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xffffcf04>
20405c62:	2031                	jal	20405c6e <__metal_driver_sifive_fe310_g000_pll_init>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:152
}
20405c64:	0001                	nop
20405c66:	40f2                	lw	ra,28(sp)
20405c68:	4462                	lw	s0,24(sp)
20405c6a:	6105                	addi	sp,sp,32
20405c6c:	8082                	ret

20405c6e <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:156

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
20405c6e:	7139                	addi	sp,sp,-64
20405c70:	de06                	sw	ra,60(sp)
20405c72:	dc22                	sw	s0,56(sp)
20405c74:	0080                	addi	s0,sp,64
20405c76:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:157
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
20405c7a:	fcc42783          	lw	a5,-52(s0)
20405c7e:	853e                	mv	a0,a5
20405c80:	ed9ff0ef          	jal	ra,20405b58 <__metal_driver_sifive_fe310_g000_pll_pllref>
20405c84:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:158
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20405c88:	3f1d                	jal	20405bbe <__metal_driver_sifive_fe310_g000_pll_init_rate>
20405c8a:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:159
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
20405c8e:	3705                	jal	20405bae <__metal_driver_sifive_fe310_g000_pll_config_offset>
20405c90:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:160
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20405c94:	3781                	jal	20405bd4 <__metal_driver_sifive_fe310_g000_prci_base>
20405c96:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20405c9a:	fe042703          	lw	a4,-32(s0)
20405c9e:	fe442783          	lw	a5,-28(s0)
20405ca2:	97ba                	add	a5,a5,a4
20405ca4:	fcf42e23          	sw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
20405ca8:	fcc42783          	lw	a5,-52(s0)
20405cac:	43dc                	lw	a5,4(a5)
20405cae:	853e                	mv	a0,a5
20405cb0:	617010ef          	jal	ra,20407ac6 <_metal_clock_call_all_callbacks>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:168

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
20405cb4:	fdc42783          	lw	a5,-36(s0)
20405cb8:	4398                	lw	a4,0(a5)
20405cba:	67c1                	lui	a5,0x10
20405cbc:	8ff9                	and	a5,a5,a4
20405cbe:	eb91                	bnez	a5,20405cd2 <__metal_driver_sifive_fe310_g000_pll_init+0x64>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:169
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20405cc0:	fdc42783          	lw	a5,-36(s0)
20405cc4:	4398                	lw	a4,0(a5)
20405cc6:	77c1                	lui	a5,0xffff0
20405cc8:	17fd                	addi	a5,a5,-1
20405cca:	8f7d                	and	a4,a4,a5
20405ccc:	fdc42783          	lw	a5,-36(s0)
20405cd0:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:172

    /* Make sure we're running off of the external oscillator for stability */
    if(pllref != NULL)
20405cd2:	fec42783          	lw	a5,-20(s0)
20405cd6:	cb91                	beqz	a5,20405cea <__metal_driver_sifive_fe310_g000_pll_init+0x7c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20405cd8:	fdc42783          	lw	a5,-36(s0)
20405cdc:	4398                	lw	a4,0(a5)
20405cde:	000207b7          	lui	a5,0x20
20405ce2:	8f5d                	or	a4,a4,a5
20405ce4:	fdc42783          	lw	a5,-36(s0)
20405ce8:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20405cea:	fcc42783          	lw	a5,-52(s0)
20405cee:	439c                	lw	a5,0(a5)
20405cf0:	43d8                	lw	a4,4(a5)
20405cf2:	fcc42783          	lw	a5,-52(s0)
20405cf6:	fe842583          	lw	a1,-24(s0)
20405cfa:	853e                	mv	a0,a5
20405cfc:	9702                	jalr	a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181

    /* If the PLL clock has had a rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
20405cfe:	fcc42783          	lw	a5,-52(s0)
20405d02:	479c                	lw	a5,8(a5)
20405d04:	853e                	mv	a0,a5
20405d06:	5c1010ef          	jal	ra,20407ac6 <_metal_clock_call_all_callbacks>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
}
20405d0a:	0001                	nop
20405d0c:	50f2                	lw	ra,60(sp)
20405d0e:	5462                	lw	s0,56(sp)
20405d10:	6121                	addi	sp,sp,64
20405d12:	8082                	ret

20405d14 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:185

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
20405d14:	711d                	addi	sp,sp,-96
20405d16:	ce86                	sw	ra,92(sp)
20405d18:	cca2                	sw	s0,88(sp)
20405d1a:	1080                	addi	s0,sp,96
20405d1c:	faa42623          	sw	a0,-84(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:186
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20405d20:	fac42503          	lw	a0,-84(s0)
20405d24:	e35ff0ef          	jal	ra,20405b58 <__metal_driver_sifive_fe310_g000_pll_pllref>
20405d28:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20405d2c:	fac42503          	lw	a0,-84(s0)
20405d30:	e0fff0ef          	jal	ra,20405b3e <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20405d34:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:188
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20405d38:	fac42503          	lw	a0,-84(s0)
20405d3c:	e73ff0ef          	jal	ra,20405bae <__metal_driver_sifive_fe310_g000_pll_config_offset>
20405d40:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_pll_config_base(clock);
20405d44:	fac42503          	lw	a0,-84(s0)
20405d48:	e55ff0ef          	jal	ra,20405b9c <__metal_driver_sifive_fe310_g000_pll_config_base>
20405d4c:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20405d50:	fac42503          	lw	a0,-84(s0)
20405d54:	e35ff0ef          	jal	ra,20405b88 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20405d58:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:193
    struct __metal_driver_sifive_fe310_g000_prci *divider_base =
      __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
20405d5c:	fac42503          	lw	a0,-84(s0)
20405d60:	e13ff0ef          	jal	ra,20405b72 <__metal_driver_sifive_fe310_g000_pll_divider_base>
20405d64:	fca42c23          	sw	a0,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:195
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20405d68:	e7fff0ef          	jal	ra,20405be6 <__metal_driver_sifive_fe310_g000_prci_vtable>
20405d6c:	fca42a23          	sw	a0,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:197

    long cfg = vtable->get_reg(config_base, config_offset);
20405d70:	fd442783          	lw	a5,-44(s0)
20405d74:	439c                	lw	a5,0(a5)
20405d76:	fe442583          	lw	a1,-28(s0)
20405d7a:	fe042503          	lw	a0,-32(s0)
20405d7e:	9782                	jalr	a5
20405d80:	fca42823          	sw	a0,-48(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:198
    long div = vtable->get_reg(divider_base, divider_offset);
20405d84:	fd442783          	lw	a5,-44(s0)
20405d88:	439c                	lw	a5,0(a5)
20405d8a:	fdc42583          	lw	a1,-36(s0)
20405d8e:	fd842503          	lw	a0,-40(s0)
20405d92:	9782                	jalr	a5
20405d94:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:202

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
20405d98:	fd042703          	lw	a4,-48(s0)
20405d9c:	67c1                	lui	a5,0x10
20405d9e:	8f7d                	and	a4,a4,a5
20405da0:	67c1                	lui	a5,0x10
20405da2:	00f77863          	bgeu	a4,a5,20405db2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x9e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:203
        return metal_clock_get_rate_hz(pllsel0);
20405da6:	fe842503          	lw	a0,-24(s0)
20405daa:	5b1010ef          	jal	ra,20407b5a <metal_clock_get_rate_hz>
20405dae:	87aa                	mv	a5,a0
20405db0:	a8e1                	j	20405e88 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x174>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
20405db2:	fd042703          	lw	a4,-48(s0)
20405db6:	000207b7          	lui	a5,0x20
20405dba:	8f7d                	and	a4,a4,a5
20405dbc:	000207b7          	lui	a5,0x20
20405dc0:	00f76563          	bltu	a4,a5,20405dca <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xb6>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 1)
20405dc4:	fec42783          	lw	a5,-20(s0)
20405dc8:	a019                	j	20405dce <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xba>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 2)
20405dca:	fe842783          	lw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 4)
20405dce:	853e                	mv	a0,a5
20405dd0:	58b010ef          	jal	ra,20407b5a <metal_clock_get_rate_hz>
20405dd4:	fca42423          	sw	a0,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
20405dd8:	fd042703          	lw	a4,-48(s0)
20405ddc:	000407b7          	lui	a5,0x40
20405de0:	8f7d                	and	a4,a4,a5
20405de2:	000407b7          	lui	a5,0x40
20405de6:	00f76563          	bltu	a4,a5,20405df0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xdc>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:212
        return ref_hz;
20405dea:	fc842783          	lw	a5,-56(s0)
20405dee:	a869                	j	20405e88 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x174>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
20405df0:	fd042783          	lw	a5,-48(s0)
20405df4:	8b9d                	andi	a5,a5,7
20405df6:	0785                	addi	a5,a5,1
20405df8:	fcf42223          	sw	a5,-60(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
20405dfc:	fd042783          	lw	a5,-48(s0)
20405e00:	3f07f793          	andi	a5,a5,1008
20405e04:	8391                	srli	a5,a5,0x4
20405e06:	0785                	addi	a5,a5,1
20405e08:	0786                	slli	a5,a5,0x1
20405e0a:	fcf42023          	sw	a5,-64(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:217
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
20405e0e:	fd042703          	lw	a4,-48(s0)
20405e12:	6785                	lui	a5,0x1
20405e14:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20405e18:	8f7d                	and	a4,a4,a5
20405e1a:	3ff00793          	li	a5,1023
20405e1e:	00e7e463          	bltu	a5,a4,20405e26 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x112>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:218
        return -1;
20405e22:	57fd                	li	a5,-1
20405e24:	a095                	j	20405e88 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x174>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20405e26:	fd042703          	lw	a4,-48(s0)
20405e2a:	6785                	lui	a5,0x1
20405e2c:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20405e30:	8ff9                	and	a5,a5,a4
20405e32:	83a9                	srli	a5,a5,0xa
20405e34:	4705                	li	a4,1
20405e36:	00f717b3          	sll	a5,a4,a5
20405e3a:	faf42e23          	sw	a5,-68(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:224

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
20405e3e:	fc842703          	lw	a4,-56(s0)
20405e42:	fc442783          	lw	a5,-60(s0)
20405e46:	02f74733          	div	a4,a4,a5
20405e4a:	fc042783          	lw	a5,-64(s0)
20405e4e:	02f70733          	mul	a4,a4,a5
20405e52:	fbc42783          	lw	a5,-68(s0)
20405e56:	02f747b3          	div	a5,a4,a5
20405e5a:	faf42c23          	sw	a5,-72(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225
    if (__METAL_GET_FIELD(div, DIV_1))
20405e5e:	fcc42783          	lw	a5,-52(s0)
20405e62:	1007f713          	andi	a4,a5,256
20405e66:	0ff00793          	li	a5,255
20405e6a:	00e7f563          	bgeu	a5,a4,20405e74 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x160>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:226
        return pllout;
20405e6e:	fb842783          	lw	a5,-72(s0)
20405e72:	a819                	j	20405e88 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x174>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:228

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20405e74:	fb842703          	lw	a4,-72(s0)
20405e78:	fcc42783          	lw	a5,-52(s0)
20405e7c:	03f7f793          	andi	a5,a5,63
20405e80:	0785                	addi	a5,a5,1
20405e82:	0786                	slli	a5,a5,0x1
20405e84:	02f757b3          	divu	a5,a4,a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
}
20405e88:	853e                	mv	a0,a5
20405e8a:	40f6                	lw	ra,92(sp)
20405e8c:	4466                	lw	s0,88(sp)
20405e8e:	6125                	addi	sp,sp,96
20405e90:	8082                	ret

20405e92 <find_closest_config>:
find_closest_config():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:240
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
20405e92:	7139                	addi	sp,sp,-64
20405e94:	de06                	sw	ra,60(sp)
20405e96:	dc22                	sw	s0,56(sp)
20405e98:	0080                	addi	s0,sp,64
20405e9a:	fca42623          	sw	a0,-52(s0)
20405e9e:	fcb42423          	sw	a1,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:241
    int closest_index = -1;
20405ea2:	57fd                	li	a5,-1
20405ea4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    long closest_diff = LONG_MAX;
20405ea8:	800007b7          	lui	a5,0x80000
20405eac:	fff7c793          	not	a5,a5
20405eb0:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20405eb4:	04300793          	li	a5,67
20405eb8:	fef42223          	sw	a5,-28(s0)
20405ebc:	a0b5                	j	20405f28 <find_closest_config+0x96>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:248
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
20405ebe:	fcc42683          	lw	a3,-52(s0)
20405ec2:	fe442783          	lw	a5,-28(s0)
20405ec6:	00579713          	slli	a4,a5,0x5
20405eca:	204467b7          	lui	a5,0x20446
20405ece:	9f078793          	addi	a5,a5,-1552 # 204459f0 <pll_configs>
20405ed2:	97ba                	add	a5,a5,a4
20405ed4:	85be                	mv	a1,a5
20405ed6:	8536                	mv	a0,a3
20405ed8:	d21ff0ef          	jal	ra,20405bf8 <get_pll_config_freq>
20405edc:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:249
        if(config_freq != PLL_CONFIG_NOT_VALID)
20405ee0:	fe042703          	lw	a4,-32(s0)
20405ee4:	57fd                	li	a5,-1
20405ee6:	02f70c63          	beq	a4,a5,20405f1e <find_closest_config+0x8c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:251
        {
            long freq_diff = abs(config_freq - rate);
20405eea:	fe042703          	lw	a4,-32(s0)
20405eee:	fc842783          	lw	a5,-56(s0)
20405ef2:	8f1d                	sub	a4,a4,a5
20405ef4:	41f75793          	srai	a5,a4,0x1f
20405ef8:	8f3d                	xor	a4,a4,a5
20405efa:	40f707b3          	sub	a5,a4,a5
20405efe:	fcf42e23          	sw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:252
            if(freq_diff < closest_diff)
20405f02:	fdc42703          	lw	a4,-36(s0)
20405f06:	fe842783          	lw	a5,-24(s0)
20405f0a:	00f75a63          	bge	a4,a5,20405f1e <find_closest_config+0x8c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
            {
                closest_index = i;
20405f0e:	fe442783          	lw	a5,-28(s0)
20405f12:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:255
                closest_diff = freq_diff;
20405f16:	fdc42783          	lw	a5,-36(s0)
20405f1a:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20405f1e:	fe442783          	lw	a5,-28(s0)
20405f22:	17fd                	addi	a5,a5,-1
20405f24:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 1)
20405f28:	fe442783          	lw	a5,-28(s0)
20405f2c:	f807d9e3          	bgez	a5,20405ebe <find_closest_config+0x2c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
            }
        }
    }

    return closest_index;
20405f30:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
}
20405f34:	853e                	mv	a0,a5
20405f36:	50f2                	lw	ra,60(sp)
20405f38:	5462                	lw	s0,56(sp)
20405f3a:	6121                	addi	sp,sp,64
20405f3c:	8082                	ret

20405f3e <configure_pll>:
configure_pll():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
20405f3e:	1101                	addi	sp,sp,-32
20405f40:	ce22                	sw	s0,28(sp)
20405f42:	1000                	addi	s0,sp,32
20405f44:	fea42623          	sw	a0,-20(s0)
20405f48:	feb42423          	sw	a1,-24(s0)
20405f4c:	fec42223          	sw	a2,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:266
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
20405f50:	fec42783          	lw	a5,-20(s0)
20405f54:	439c                	lw	a5,0(a5)
20405f56:	ff87f713          	andi	a4,a5,-8
20405f5a:	fec42783          	lw	a5,-20(s0)
20405f5e:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:267
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
20405f60:	fec42783          	lw	a5,-20(s0)
20405f64:	4398                	lw	a4,0(a5)
20405f66:	fe442783          	lw	a5,-28(s0)
20405f6a:	4b9c                	lw	a5,16(a5)
20405f6c:	8b9d                	andi	a5,a5,7
20405f6e:	8f5d                	or	a4,a4,a5
20405f70:	fec42783          	lw	a5,-20(s0)
20405f74:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:269

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20405f76:	fec42783          	lw	a5,-20(s0)
20405f7a:	439c                	lw	a5,0(a5)
20405f7c:	c0f7f713          	andi	a4,a5,-1009
20405f80:	fec42783          	lw	a5,-20(s0)
20405f84:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:270
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20405f86:	fec42783          	lw	a5,-20(s0)
20405f8a:	4398                	lw	a4,0(a5)
20405f8c:	fe442783          	lw	a5,-28(s0)
20405f90:	4bdc                	lw	a5,20(a5)
20405f92:	0792                	slli	a5,a5,0x4
20405f94:	3f07f793          	andi	a5,a5,1008
20405f98:	8f5d                	or	a4,a4,a5
20405f9a:	fec42783          	lw	a5,-20(s0)
20405f9e:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:272

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
20405fa0:	fec42783          	lw	a5,-20(s0)
20405fa4:	4398                	lw	a4,0(a5)
20405fa6:	77fd                	lui	a5,0xfffff
20405fa8:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffbb4b>
20405fac:	8f7d                	and	a4,a4,a5
20405fae:	fec42783          	lw	a5,-20(s0)
20405fb2:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:273
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
20405fb4:	fec42783          	lw	a5,-20(s0)
20405fb8:	4398                	lw	a4,0(a5)
20405fba:	fe442783          	lw	a5,-28(s0)
20405fbe:	4f9c                	lw	a5,24(a5)
20405fc0:	00a79693          	slli	a3,a5,0xa
20405fc4:	6785                	lui	a5,0x1
20405fc6:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20405fca:	8ff5                	and	a5,a5,a3
20405fcc:	8f5d                	or	a4,a4,a5
20405fce:	fec42783          	lw	a5,-20(s0)
20405fd2:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:275

    if(config->d < 0)
20405fd4:	fe442783          	lw	a5,-28(s0)
20405fd8:	4fdc                	lw	a5,28(a5)
20405fda:	0207db63          	bgez	a5,20406010 <configure_pll+0xd2>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:278
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
20405fde:	fe842783          	lw	a5,-24(s0)
20405fe2:	439c                	lw	a5,0(a5)
20405fe4:	1007e713          	ori	a4,a5,256
20405fe8:	fe842783          	lw	a5,-24(s0)
20405fec:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:280

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20405fee:	fe842783          	lw	a5,-24(s0)
20405ff2:	439c                	lw	a5,0(a5)
20405ff4:	fc07f713          	andi	a4,a5,-64
20405ff8:	fe842783          	lw	a5,-24(s0)
20405ffc:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:281
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20405ffe:	fe842783          	lw	a5,-24(s0)
20406002:	439c                	lw	a5,0(a5)
20406004:	0017e713          	ori	a4,a5,1
20406008:	fe842783          	lw	a5,-24(s0)
2040600c:	c398                	sw	a4,0(a5)
2040600e:	a82d                	j	20406048 <configure_pll+0x10a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:285
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
20406010:	fe842783          	lw	a5,-24(s0)
20406014:	439c                	lw	a5,0(a5)
20406016:	eff7f713          	andi	a4,a5,-257
2040601a:	fe842783          	lw	a5,-24(s0)
2040601e:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:287

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20406020:	fe842783          	lw	a5,-24(s0)
20406024:	439c                	lw	a5,0(a5)
20406026:	fc07f713          	andi	a4,a5,-64
2040602a:	fe842783          	lw	a5,-24(s0)
2040602e:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:288
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
20406030:	fe842783          	lw	a5,-24(s0)
20406034:	4398                	lw	a4,0(a5)
20406036:	fe442783          	lw	a5,-28(s0)
2040603a:	4fdc                	lw	a5,28(a5)
2040603c:	03f7f793          	andi	a5,a5,63
20406040:	8f5d                	or	a4,a4,a5
20406042:	fe842783          	lw	a5,-24(s0)
20406046:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20406048:	fec42783          	lw	a5,-20(s0)
2040604c:	4398                	lw	a4,0(a5)
2040604e:	fffc07b7          	lui	a5,0xfffc0
20406052:	17fd                	addi	a5,a5,-1
20406054:	8f7d                	and	a4,a4,a5
20406056:	fec42783          	lw	a5,-20(s0)
2040605a:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
2040605c:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294 (discriminator 1)
2040605e:	fec42783          	lw	a5,-20(s0)
20406062:	439c                	lw	a5,0(a5)
20406064:	fe07dde3          	bgez	a5,2040605e <configure_pll+0x120>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
}
20406068:	0001                	nop
2040606a:	4472                	lw	s0,28(sp)
2040606c:	6105                	addi	sp,sp,32
2040606e:	8082                	ret

20406070 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
20406070:	715d                	addi	sp,sp,-80
20406072:	c686                	sw	ra,76(sp)
20406074:	c4a2                	sw	s0,72(sp)
20406076:	0880                	addi	s0,sp,80
20406078:	faa42e23          	sw	a0,-68(s0)
2040607c:	fab42c23          	sw	a1,-72(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:299
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20406080:	fbc42503          	lw	a0,-68(s0)
20406084:	ad5ff0ef          	jal	ra,20405b58 <__metal_driver_sifive_fe310_g000_pll_pllref>
20406088:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
2040608c:	fbc42503          	lw	a0,-68(s0)
20406090:	aafff0ef          	jal	ra,20405b3e <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20406094:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20406098:	fbc42503          	lw	a0,-68(s0)
2040609c:	b13ff0ef          	jal	ra,20405bae <__metal_driver_sifive_fe310_g000_pll_config_offset>
204060a0:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
204060a4:	fbc42503          	lw	a0,-68(s0)
204060a8:	ae1ff0ef          	jal	ra,20405b88 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
204060ac:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:303
    long base = __metal_driver_sifive_fe310_g000_prci_base();
204060b0:	b25ff0ef          	jal	ra,20405bd4 <__metal_driver_sifive_fe310_g000_prci_base>
204060b4:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
204060b8:	fdc42703          	lw	a4,-36(s0)
204060bc:	fe442783          	lw	a5,-28(s0)
204060c0:	97ba                	add	a5,a5,a4
204060c2:	fcf42c23          	sw	a5,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:306
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (base + divider_offset);
204060c6:	fdc42703          	lw	a4,-36(s0)
204060ca:	fe042783          	lw	a5,-32(s0)
204060ce:	97ba                	add	a5,a5,a4
204060d0:	fcf42a23          	sw	a5,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
204060d4:	fd842783          	lw	a5,-40(s0)
204060d8:	4398                	lw	a4,0(a5)
204060da:	67c1                	lui	a5,0x10
204060dc:	8ff9                	and	a5,a5,a4
204060de:	cb91                	beqz	a5,204060f2 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x82>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
204060e0:	fd842783          	lw	a5,-40(s0)
204060e4:	4398                	lw	a4,0(a5)
204060e6:	77c1                	lui	a5,0xffff0
204060e8:	17fd                	addi	a5,a5,-1
204060ea:	8f7d                	and	a4,a4,a5
204060ec:	fd842783          	lw	a5,-40(s0)
204060f0:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
204060f2:	fd842783          	lw	a5,-40(s0)
204060f6:	4398                	lw	a4,0(a5)
204060f8:	000207b7          	lui	a5,0x20
204060fc:	8ff9                	and	a5,a5,a4
204060fe:	c781                	beqz	a5,20406106 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x96>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 1)
20406100:	fec42783          	lw	a5,-20(s0)
20406104:	a019                	j	2040610a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x9a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 2)
20406106:	fe842783          	lw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 4)
2040610a:	853e                	mv	a0,a5
2040610c:	24f010ef          	jal	ra,20407b5a <metal_clock_get_rate_hz>
20406110:	fca42823          	sw	a0,-48(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
20406114:	fd042703          	lw	a4,-48(s0)
20406118:	87ba                	mv	a5,a4
2040611a:	0786                	slli	a5,a5,0x1
2040611c:	97ba                	add	a5,a5,a4
2040611e:	41f7d713          	srai	a4,a5,0x1f
20406122:	8b0d                	andi	a4,a4,3
20406124:	97ba                	add	a5,a5,a4
20406126:	8789                	srai	a5,a5,0x2
20406128:	873e                	mv	a4,a5
2040612a:	fb842783          	lw	a5,-72(s0)
2040612e:	02e7cb63          	blt	a5,a4,20406164 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 1)
20406132:	fd042703          	lw	a4,-48(s0)
20406136:	87ba                	mv	a5,a4
20406138:	078a                	slli	a5,a5,0x2
2040613a:	97ba                	add	a5,a5,a4
2040613c:	41f7d713          	srai	a4,a5,0x1f
20406140:	8b0d                	andi	a4,a4,3
20406142:	97ba                	add	a5,a5,a4
20406144:	8789                	srai	a5,a5,0x2
20406146:	873e                	mv	a4,a5
20406148:	fb842783          	lw	a5,-72(s0)
2040614c:	00f74c63          	blt	a4,a5,20406164 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:319
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20406150:	fd842783          	lw	a5,-40(s0)
20406154:	4398                	lw	a4,0(a5)
20406156:	000407b7          	lui	a5,0x40
2040615a:	8f5d                	or	a4,a4,a5
2040615c:	fd842783          	lw	a5,-40(s0)
20406160:	c398                	sw	a4,0(a5)
20406162:	a881                	j	204061b2 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:323
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
20406164:	fb842583          	lw	a1,-72(s0)
20406168:	fd042503          	lw	a0,-48(s0)
2040616c:	d27ff0ef          	jal	ra,20405e92 <find_closest_config>
20406170:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:324
        if(config_index != -1)
20406174:	fcc42703          	lw	a4,-52(s0)
20406178:	57fd                	li	a5,-1
2040617a:	02f70363          	beq	a4,a5,204061a0 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x130>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
2040617e:	fcc42783          	lw	a5,-52(s0)
20406182:	00579713          	slli	a4,a5,0x5
20406186:	204467b7          	lui	a5,0x20446
2040618a:	9f078793          	addi	a5,a5,-1552 # 204459f0 <pll_configs>
2040618e:	97ba                	add	a5,a5,a4
20406190:	863e                	mv	a2,a5
20406192:	fd442583          	lw	a1,-44(s0)
20406196:	fd842503          	lw	a0,-40(s0)
2040619a:	da5ff0ef          	jal	ra,20405f3e <configure_pll>
2040619e:	a811                	j	204061b2 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
204061a0:	fd842783          	lw	a5,-40(s0)
204061a4:	4398                	lw	a4,0(a5)
204061a6:	000407b7          	lui	a5,0x40
204061aa:	8f5d                	or	a4,a4,a5
204061ac:	fd842783          	lw	a5,-40(s0)
204061b0:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:336
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
204061b2:	fd842783          	lw	a5,-40(s0)
204061b6:	4398                	lw	a4,0(a5)
204061b8:	67c1                	lui	a5,0x10
204061ba:	8f5d                	or	a4,a4,a5
204061bc:	fd842783          	lw	a5,-40(s0)
204061c0:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:338

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
204061c2:	fbc42503          	lw	a0,-68(s0)
204061c6:	b4fff0ef          	jal	ra,20405d14 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
204061ca:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:339
}
204061cc:	853e                	mv	a0,a5
204061ce:	40b6                	lw	ra,76(sp)
204061d0:	4426                	lw	s0,72(sp)
204061d2:	6161                	addi	sp,sp,80
204061d4:	8082                	ret

204061d6 <use_hfxosc>:
use_hfxosc():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:344

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
204061d6:	1101                	addi	sp,sp,-32
204061d8:	ce06                	sw	ra,28(sp)
204061da:	cc22                	sw	s0,24(sp)
204061dc:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
204061de:	9e1ff0ef          	jal	ra,20405bbe <__metal_driver_sifive_fe310_g000_pll_init_rate>
204061e2:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:346
    metal_clock_set_rate_hz(
204061e6:	fec42583          	lw	a1,-20(s0)
204061ea:	800007b7          	lui	a5,0x80000
204061ee:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xffffcf04>
204061f2:	18f010ef          	jal	ra,20407b80 <metal_clock_set_rate_hz>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:349
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock, init_rate
    );
}
204061f6:	0001                	nop
204061f8:	40f2                	lw	ra,28(sp)
204061fa:	4462                	lw	s0,24(sp)
204061fc:	6105                	addi	sp,sp,32
204061fe:	8082                	ret

20406200 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:999
{
20406200:	1141                	addi	sp,sp,-16
20406202:	c622                	sw	s0,12(sp)
20406204:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1000
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20406206:	100087b7          	lui	a5,0x10008
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:1001
}
2040620a:	853e                	mv	a0,a5
2040620c:	4432                	lw	s0,12(sp)
2040620e:	0141                	addi	sp,sp,16
20406210:	8082                	ret

20406212 <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:11
#ifdef METAL_SIFIVE_FE310_G000_PRCI

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
20406212:	7179                	addi	sp,sp,-48
20406214:	d606                	sw	ra,44(sp)
20406216:	d422                	sw	s0,40(sp)
20406218:	1800                	addi	s0,sp,48
2040621a:	fca42e23          	sw	a0,-36(s0)
2040621e:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
20406222:	3ff9                	jal	20406200 <__metal_driver_sifive_fe310_g000_prci_base>
20406224:	87aa                	mv	a5,a0
20406226:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
2040622a:	fd842703          	lw	a4,-40(s0)
2040622e:	fec42783          	lw	a5,-20(s0)
20406232:	97ba                	add	a5,a5,a4
20406234:	439c                	lw	a5,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
}
20406236:	853e                	mv	a0,a5
20406238:	50b2                	lw	ra,44(sp)
2040623a:	5422                	lw	s0,40(sp)
2040623c:	6145                	addi	sp,sp,48
2040623e:	8082                	ret

20406240 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:16

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
20406240:	7179                	addi	sp,sp,-48
20406242:	d606                	sw	ra,44(sp)
20406244:	d422                	sw	s0,40(sp)
20406246:	1800                	addi	s0,sp,48
20406248:	fca42e23          	sw	a0,-36(s0)
2040624c:	fcb42c23          	sw	a1,-40(s0)
20406250:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:17
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
20406254:	3775                	jal	20406200 <__metal_driver_sifive_fe310_g000_prci_base>
20406256:	87aa                	mv	a5,a0
20406258:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:18
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
2040625c:	fd842703          	lw	a4,-40(s0)
20406260:	fec42783          	lw	a5,-20(s0)
20406264:	97ba                	add	a5,a5,a4
20406266:	873e                	mv	a4,a5
20406268:	fd442783          	lw	a5,-44(s0)
2040626c:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19
}
2040626e:	853e                	mv	a0,a5
20406270:	50b2                	lw	ra,44(sp)
20406272:	5422                	lw	s0,40(sp)
20406274:	6145                	addi	sp,sp,48
20406276:	8082                	ret

20406278 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:439
{
20406278:	1101                	addi	sp,sp,-32
2040627a:	ce22                	sw	s0,28(sp)
2040627c:	1000                	addi	s0,sp,32
2040627e:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:440
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20406282:	fec42703          	lw	a4,-20(s0)
20406286:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
2040628a:	00f71563          	bne	a4,a5,20406294 <__metal_driver_sifive_gpio0_base+0x1c>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:441
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2040628e:	100127b7          	lui	a5,0x10012
20406292:	a011                	j	20406296 <__metal_driver_sifive_gpio0_base+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:444
		return 0;
20406294:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:446
}
20406296:	853e                	mv	a0,a5
20406298:	4472                	lw	s0,28(sp)
2040629a:	6105                	addi	sp,sp,32
2040629c:	8082                	ret

2040629e <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:469
{
2040629e:	1101                	addi	sp,sp,-32
204062a0:	ce22                	sw	s0,28(sp)
204062a2:	1000                	addi	s0,sp,32
204062a4:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:470
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204062a8:	fec42703          	lw	a4,-20(s0)
204062ac:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
204062b0:	00f71763          	bne	a4,a5,204062be <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:471
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204062b4:	800007b7          	lui	a5,0x80000
204062b8:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffcb8c>
204062bc:	a011                	j	204062c0 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:474
		return 0;
204062be:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:476
}
204062c0:	853e                	mv	a0,a5
204062c2:	4472                	lw	s0,28(sp)
204062c4:	6105                	addi	sp,sp,32
204062c6:	8082                	ret

204062c8 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:479
{
204062c8:	1101                	addi	sp,sp,-32
204062ca:	ce22                	sw	s0,28(sp)
204062cc:	1000                	addi	s0,sp,32
204062ce:	fea42623          	sw	a0,-20(s0)
204062d2:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:480
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204062d6:	fec42703          	lw	a4,-20(s0)
204062da:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
204062de:	00f71763          	bne	a4,a5,204062ec <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:480 (discriminator 1)
204062e2:	fe842783          	lw	a5,-24(s0)
204062e6:	e399                	bnez	a5,204062ec <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:481
		return 7;
204062e8:	479d                	li	a5,7
204062ea:	a269                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:483
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204062ec:	fec42703          	lw	a4,-20(s0)
204062f0:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
204062f4:	00f71963          	bne	a4,a5,20406306 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:483 (discriminator 1)
204062f8:	fe842703          	lw	a4,-24(s0)
204062fc:	4785                	li	a5,1
204062fe:	00f71463          	bne	a4,a5,20406306 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:484
		return 8;
20406302:	47a1                	li	a5,8
20406304:	aa85                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:486
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20406306:	fec42703          	lw	a4,-20(s0)
2040630a:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
2040630e:	00f71963          	bne	a4,a5,20406320 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:486 (discriminator 1)
20406312:	fe842703          	lw	a4,-24(s0)
20406316:	4789                	li	a5,2
20406318:	00f71463          	bne	a4,a5,20406320 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:487
		return 9;
2040631c:	47a5                	li	a5,9
2040631e:	aa99                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:489
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20406320:	fec42703          	lw	a4,-20(s0)
20406324:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406328:	00f71963          	bne	a4,a5,2040633a <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:489 (discriminator 1)
2040632c:	fe842703          	lw	a4,-24(s0)
20406330:	478d                	li	a5,3
20406332:	00f71463          	bne	a4,a5,2040633a <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:490
		return 10;
20406336:	47a9                	li	a5,10
20406338:	aa35                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:492
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
2040633a:	fec42703          	lw	a4,-20(s0)
2040633e:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406342:	00f71963          	bne	a4,a5,20406354 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:492 (discriminator 1)
20406346:	fe842703          	lw	a4,-24(s0)
2040634a:	4791                	li	a5,4
2040634c:	00f71463          	bne	a4,a5,20406354 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:493
		return 11;
20406350:	47ad                	li	a5,11
20406352:	a20d                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:495
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20406354:	fec42703          	lw	a4,-20(s0)
20406358:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
2040635c:	00f71963          	bne	a4,a5,2040636e <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:495 (discriminator 1)
20406360:	fe842703          	lw	a4,-24(s0)
20406364:	4795                	li	a5,5
20406366:	00f71463          	bne	a4,a5,2040636e <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:496
		return 12;
2040636a:	47b1                	li	a5,12
2040636c:	a221                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:498
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
2040636e:	fec42703          	lw	a4,-20(s0)
20406372:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406376:	00f71963          	bne	a4,a5,20406388 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:498 (discriminator 1)
2040637a:	fe842703          	lw	a4,-24(s0)
2040637e:	4799                	li	a5,6
20406380:	00f71463          	bne	a4,a5,20406388 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:499
		return 13;
20406384:	47b5                	li	a5,13
20406386:	a0fd                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:501
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20406388:	fec42703          	lw	a4,-20(s0)
2040638c:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406390:	00f71963          	bne	a4,a5,204063a2 <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:501 (discriminator 1)
20406394:	fe842703          	lw	a4,-24(s0)
20406398:	479d                	li	a5,7
2040639a:	00f71463          	bne	a4,a5,204063a2 <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:502
		return 14;
2040639e:	47b9                	li	a5,14
204063a0:	a8d1                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:504
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
204063a2:	fec42703          	lw	a4,-20(s0)
204063a6:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
204063aa:	00f71963          	bne	a4,a5,204063bc <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:504 (discriminator 1)
204063ae:	fe842703          	lw	a4,-24(s0)
204063b2:	47a1                	li	a5,8
204063b4:	00f71463          	bne	a4,a5,204063bc <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:505
		return 15;
204063b8:	47bd                	li	a5,15
204063ba:	a86d                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:507
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204063bc:	fec42703          	lw	a4,-20(s0)
204063c0:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
204063c4:	00f71963          	bne	a4,a5,204063d6 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:507 (discriminator 1)
204063c8:	fe842703          	lw	a4,-24(s0)
204063cc:	47a5                	li	a5,9
204063ce:	00f71463          	bne	a4,a5,204063d6 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:508
		return 16;
204063d2:	47c1                	li	a5,16
204063d4:	a045                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:510
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204063d6:	fec42703          	lw	a4,-20(s0)
204063da:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
204063de:	00f71963          	bne	a4,a5,204063f0 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:510 (discriminator 1)
204063e2:	fe842703          	lw	a4,-24(s0)
204063e6:	47a9                	li	a5,10
204063e8:	00f71463          	bne	a4,a5,204063f0 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:511
		return 17;
204063ec:	47c5                	li	a5,17
204063ee:	a059                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:513
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204063f0:	fec42703          	lw	a4,-20(s0)
204063f4:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
204063f8:	00f71963          	bne	a4,a5,2040640a <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:513 (discriminator 1)
204063fc:	fe842703          	lw	a4,-24(s0)
20406400:	47ad                	li	a5,11
20406402:	00f71463          	bne	a4,a5,2040640a <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:514
		return 18;
20406406:	47c9                	li	a5,18
20406408:	a0b5                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:516
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
2040640a:	fec42703          	lw	a4,-20(s0)
2040640e:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406412:	00f71963          	bne	a4,a5,20406424 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:516 (discriminator 1)
20406416:	fe842703          	lw	a4,-24(s0)
2040641a:	47b1                	li	a5,12
2040641c:	00f71463          	bne	a4,a5,20406424 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:517
		return 19;
20406420:	47cd                	li	a5,19
20406422:	a889                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:519
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20406424:	fec42703          	lw	a4,-20(s0)
20406428:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
2040642c:	00f71963          	bne	a4,a5,2040643e <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:519 (discriminator 1)
20406430:	fe842703          	lw	a4,-24(s0)
20406434:	47b5                	li	a5,13
20406436:	00f71463          	bne	a4,a5,2040643e <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:520
		return 20;
2040643a:	47d1                	li	a5,20
2040643c:	a825                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:522
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
2040643e:	fec42703          	lw	a4,-20(s0)
20406442:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406446:	00f71963          	bne	a4,a5,20406458 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:522 (discriminator 1)
2040644a:	fe842703          	lw	a4,-24(s0)
2040644e:	47b9                	li	a5,14
20406450:	00f71463          	bne	a4,a5,20406458 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:523
		return 21;
20406454:	47d5                	li	a5,21
20406456:	a839                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:525
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20406458:	fec42703          	lw	a4,-20(s0)
2040645c:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406460:	00f71963          	bne	a4,a5,20406472 <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:525 (discriminator 1)
20406464:	fe842703          	lw	a4,-24(s0)
20406468:	47bd                	li	a5,15
2040646a:	00f71463          	bne	a4,a5,20406472 <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:526
		return 22;
2040646e:	47d9                	li	a5,22
20406470:	a011                	j	20406474 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:529
		return 0;
20406472:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:531
}
20406474:	853e                	mv	a0,a5
20406476:	4472                	lw	s0,28(sp)
20406478:	6105                	addi	sp,sp,32
2040647a:	8082                	ret

2040647c <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
2040647c:	7179                	addi	sp,sp,-48
2040647e:	d606                	sw	ra,44(sp)
20406480:	d422                	sw	s0,40(sp)
20406482:	1800                	addi	s0,sp,48
20406484:	fca42e23          	sw	a0,-36(s0)
20406488:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040648c:	fdc42503          	lw	a0,-36(s0)
20406490:	de9ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
20406494:	87aa                	mv	a5,a0
20406496:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
2040649a:	fec42783          	lw	a5,-20(s0)
2040649e:	0791                	addi	a5,a5,4
204064a0:	4398                	lw	a4,0(a5)
204064a2:	fd842783          	lw	a5,-40(s0)
204064a6:	fec42683          	lw	a3,-20(s0)
204064aa:	0691                	addi	a3,a3,4
204064ac:	8fd9                	or	a5,a5,a4
204064ae:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204064b0:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204064b2:	853e                	mv	a0,a5
204064b4:	50b2                	lw	ra,44(sp)
204064b6:	5422                	lw	s0,40(sp)
204064b8:	6145                	addi	sp,sp,48
204064ba:	8082                	ret

204064bc <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204064bc:	7179                	addi	sp,sp,-48
204064be:	d606                	sw	ra,44(sp)
204064c0:	d422                	sw	s0,40(sp)
204064c2:	1800                	addi	s0,sp,48
204064c4:	fca42e23          	sw	a0,-36(s0)
204064c8:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204064cc:	fdc42503          	lw	a0,-36(s0)
204064d0:	da9ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
204064d4:	87aa                	mv	a5,a0
204064d6:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204064da:	fec42783          	lw	a5,-20(s0)
204064de:	0791                	addi	a5,a5,4
204064e0:	439c                	lw	a5,0(a5)
204064e2:	fd842703          	lw	a4,-40(s0)
204064e6:	fff74713          	not	a4,a4
204064ea:	86ba                	mv	a3,a4
204064ec:	fec42703          	lw	a4,-20(s0)
204064f0:	0711                	addi	a4,a4,4
204064f2:	8ff5                	and	a5,a5,a3
204064f4:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
204064f6:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
204064f8:	853e                	mv	a0,a5
204064fa:	50b2                	lw	ra,44(sp)
204064fc:	5422                	lw	s0,40(sp)
204064fe:	6145                	addi	sp,sp,48
20406500:	8082                	ret

20406502 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20406502:	7179                	addi	sp,sp,-48
20406504:	d606                	sw	ra,44(sp)
20406506:	d422                	sw	s0,40(sp)
20406508:	1800                	addi	s0,sp,48
2040650a:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040650e:	fdc42503          	lw	a0,-36(s0)
20406512:	d67ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
20406516:	87aa                	mv	a5,a0
20406518:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
2040651c:	fec42783          	lw	a5,-20(s0)
20406520:	439c                	lw	a5,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20406522:	853e                	mv	a0,a5
20406524:	50b2                	lw	ra,44(sp)
20406526:	5422                	lw	s0,40(sp)
20406528:	6145                	addi	sp,sp,48
2040652a:	8082                	ret

2040652c <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
2040652c:	7179                	addi	sp,sp,-48
2040652e:	d606                	sw	ra,44(sp)
20406530:	d422                	sw	s0,40(sp)
20406532:	1800                	addi	s0,sp,48
20406534:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406538:	fdc42503          	lw	a0,-36(s0)
2040653c:	d3dff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
20406540:	87aa                	mv	a5,a0
20406542:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20406546:	fec42783          	lw	a5,-20(s0)
2040654a:	07b1                	addi	a5,a5,12
2040654c:	439c                	lw	a5,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
2040654e:	853e                	mv	a0,a5
20406550:	50b2                	lw	ra,44(sp)
20406552:	5422                	lw	s0,40(sp)
20406554:	6145                	addi	sp,sp,48
20406556:	8082                	ret

20406558 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20406558:	7179                	addi	sp,sp,-48
2040655a:	d606                	sw	ra,44(sp)
2040655c:	d422                	sw	s0,40(sp)
2040655e:	1800                	addi	s0,sp,48
20406560:	fca42e23          	sw	a0,-36(s0)
20406564:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406568:	fdc42503          	lw	a0,-36(s0)
2040656c:	d0dff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
20406570:	87aa                	mv	a5,a0
20406572:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20406576:	fec42783          	lw	a5,-20(s0)
2040657a:	07a1                	addi	a5,a5,8
2040657c:	439c                	lw	a5,0(a5)
2040657e:	fd842703          	lw	a4,-40(s0)
20406582:	fff74713          	not	a4,a4
20406586:	86ba                	mv	a3,a4
20406588:	fec42703          	lw	a4,-20(s0)
2040658c:	0721                	addi	a4,a4,8
2040658e:	8ff5                	and	a5,a5,a3
20406590:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20406592:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20406594:	853e                	mv	a0,a5
20406596:	50b2                	lw	ra,44(sp)
20406598:	5422                	lw	s0,40(sp)
2040659a:	6145                	addi	sp,sp,48
2040659c:	8082                	ret

2040659e <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
2040659e:	7179                	addi	sp,sp,-48
204065a0:	d606                	sw	ra,44(sp)
204065a2:	d422                	sw	s0,40(sp)
204065a4:	1800                	addi	s0,sp,48
204065a6:	fca42e23          	sw	a0,-36(s0)
204065aa:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204065ae:	fdc42503          	lw	a0,-36(s0)
204065b2:	cc7ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
204065b6:	87aa                	mv	a5,a0
204065b8:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204065bc:	fec42783          	lw	a5,-20(s0)
204065c0:	07a1                	addi	a5,a5,8
204065c2:	4398                	lw	a4,0(a5)
204065c4:	fd842783          	lw	a5,-40(s0)
204065c8:	fec42683          	lw	a3,-20(s0)
204065cc:	06a1                	addi	a3,a3,8
204065ce:	8fd9                	or	a5,a5,a4
204065d0:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204065d2:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204065d4:	853e                	mv	a0,a5
204065d6:	50b2                	lw	ra,44(sp)
204065d8:	5422                	lw	s0,40(sp)
204065da:	6145                	addi	sp,sp,48
204065dc:	8082                	ret

204065de <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204065de:	7179                	addi	sp,sp,-48
204065e0:	d606                	sw	ra,44(sp)
204065e2:	d422                	sw	s0,40(sp)
204065e4:	1800                	addi	s0,sp,48
204065e6:	fca42e23          	sw	a0,-36(s0)
204065ea:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204065ee:	fdc42503          	lw	a0,-36(s0)
204065f2:	c87ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
204065f6:	87aa                	mv	a5,a0
204065f8:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
204065fc:	fec42783          	lw	a5,-20(s0)
20406600:	07b1                	addi	a5,a5,12
20406602:	4398                	lw	a4,0(a5)
20406604:	fd842783          	lw	a5,-40(s0)
20406608:	fec42683          	lw	a3,-20(s0)
2040660c:	06b1                	addi	a3,a3,12
2040660e:	8fd9                	or	a5,a5,a4
20406610:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20406612:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20406614:	853e                	mv	a0,a5
20406616:	50b2                	lw	ra,44(sp)
20406618:	5422                	lw	s0,40(sp)
2040661a:	6145                	addi	sp,sp,48
2040661c:	8082                	ret

2040661e <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
2040661e:	7179                	addi	sp,sp,-48
20406620:	d606                	sw	ra,44(sp)
20406622:	d422                	sw	s0,40(sp)
20406624:	1800                	addi	s0,sp,48
20406626:	fca42e23          	sw	a0,-36(s0)
2040662a:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040662e:	fdc42503          	lw	a0,-36(s0)
20406632:	c47ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
20406636:	87aa                	mv	a5,a0
20406638:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
2040663c:	fec42783          	lw	a5,-20(s0)
20406640:	07b1                	addi	a5,a5,12
20406642:	439c                	lw	a5,0(a5)
20406644:	fd842703          	lw	a4,-40(s0)
20406648:	fff74713          	not	a4,a4
2040664c:	86ba                	mv	a3,a4
2040664e:	fec42703          	lw	a4,-20(s0)
20406652:	0731                	addi	a4,a4,12
20406654:	8ff5                	and	a5,a5,a3
20406656:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20406658:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2040665a:	853e                	mv	a0,a5
2040665c:	50b2                	lw	ra,44(sp)
2040665e:	5422                	lw	s0,40(sp)
20406660:	6145                	addi	sp,sp,48
20406662:	8082                	ret

20406664 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20406664:	7179                	addi	sp,sp,-48
20406666:	d606                	sw	ra,44(sp)
20406668:	d422                	sw	s0,40(sp)
2040666a:	1800                	addi	s0,sp,48
2040666c:	fca42e23          	sw	a0,-36(s0)
20406670:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406674:	fdc42503          	lw	a0,-36(s0)
20406678:	c01ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
2040667c:	87aa                	mv	a5,a0
2040667e:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20406682:	fec42783          	lw	a5,-20(s0)
20406686:	07b1                	addi	a5,a5,12
20406688:	4398                	lw	a4,0(a5)
2040668a:	fd842783          	lw	a5,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040668e:	fec42683          	lw	a3,-20(s0)
20406692:	06b1                	addi	a3,a3,12
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20406694:	8fb9                	xor	a5,a5,a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20406696:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20406698:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040669a:	853e                	mv	a0,a5
2040669c:	50b2                	lw	ra,44(sp)
2040669e:	5422                	lw	s0,40(sp)
204066a0:	6145                	addi	sp,sp,48
204066a2:	8082                	ret

204066a4 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
204066a4:	7179                	addi	sp,sp,-48
204066a6:	d606                	sw	ra,44(sp)
204066a8:	d422                	sw	s0,40(sp)
204066aa:	1800                	addi	s0,sp,48
204066ac:	fca42e23          	sw	a0,-36(s0)
204066b0:	fcb42c23          	sw	a1,-40(s0)
204066b4:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204066b8:	fdc42503          	lw	a0,-36(s0)
204066bc:	bbdff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
204066c0:	87aa                	mv	a5,a0
204066c2:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204066c6:	fec42783          	lw	a5,-20(s0)
204066ca:	03c78793          	addi	a5,a5,60
204066ce:	439c                	lw	a5,0(a5)
204066d0:	fd842703          	lw	a4,-40(s0)
204066d4:	fff74713          	not	a4,a4
204066d8:	86ba                	mv	a3,a4
204066da:	fec42703          	lw	a4,-20(s0)
204066de:	03c70713          	addi	a4,a4,60
204066e2:	8ff5                	and	a5,a5,a3
204066e4:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
204066e6:	fec42783          	lw	a5,-20(s0)
204066ea:	03878793          	addi	a5,a5,56
204066ee:	4398                	lw	a4,0(a5)
204066f0:	fd442783          	lw	a5,-44(s0)
204066f4:	fec42683          	lw	a3,-20(s0)
204066f8:	03868693          	addi	a3,a3,56 # 4000038 <__stack_size+0x3ffd838>
204066fc:	8fd9                	or	a5,a5,a4
204066fe:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20406700:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20406702:	853e                	mv	a0,a5
20406704:	50b2                	lw	ra,44(sp)
20406706:	5422                	lw	s0,40(sp)
20406708:	6145                	addi	sp,sp,48
2040670a:	8082                	ret

2040670c <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
2040670c:	7179                	addi	sp,sp,-48
2040670e:	d606                	sw	ra,44(sp)
20406710:	d422                	sw	s0,40(sp)
20406712:	1800                	addi	s0,sp,48
20406714:	fca42e23          	sw	a0,-36(s0)
20406718:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040671c:	fdc42503          	lw	a0,-36(s0)
20406720:	b59ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
20406724:	87aa                	mv	a5,a0
20406726:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2040672a:	fec42783          	lw	a5,-20(s0)
2040672e:	03878793          	addi	a5,a5,56
20406732:	439c                	lw	a5,0(a5)
20406734:	fd842703          	lw	a4,-40(s0)
20406738:	fff74713          	not	a4,a4
2040673c:	86ba                	mv	a3,a4
2040673e:	fec42703          	lw	a4,-20(s0)
20406742:	03870713          	addi	a4,a4,56
20406746:	8ff5                	and	a5,a5,a3
20406748:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
2040674a:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
2040674c:	853e                	mv	a0,a5
2040674e:	50b2                	lw	ra,44(sp)
20406750:	5422                	lw	s0,40(sp)
20406752:	6145                	addi	sp,sp,48
20406754:	8082                	ret

20406756 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20406756:	7179                	addi	sp,sp,-48
20406758:	d606                	sw	ra,44(sp)
2040675a:	d422                	sw	s0,40(sp)
2040675c:	1800                	addi	s0,sp,48
2040675e:	fca42e23          	sw	a0,-36(s0)
20406762:	fcb42c23          	sw	a1,-40(s0)
20406766:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040676a:	fdc42503          	lw	a0,-36(s0)
2040676e:	b0bff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
20406772:	87aa                	mv	a5,a0
20406774:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20406778:	fd442703          	lw	a4,-44(s0)
2040677c:	479d                	li	a5,7
2040677e:	1ce7e963          	bltu	a5,a4,20406950 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20406782:	fd442783          	lw	a5,-44(s0)
20406786:	00279713          	slli	a4,a5,0x2
2040678a:	204467b7          	lui	a5,0x20446
2040678e:	27c78793          	addi	a5,a5,636 # 2044627c <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
20406792:	97ba                	add	a5,a5,a4
20406794:	439c                	lw	a5,0(a5)
20406796:	8782                	jr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20406798:	fec42783          	lw	a5,-20(s0)
2040679c:	07e1                	addi	a5,a5,24
2040679e:	439c                	lw	a5,0(a5)
204067a0:	fd842703          	lw	a4,-40(s0)
204067a4:	fff74713          	not	a4,a4
204067a8:	86ba                	mv	a3,a4
204067aa:	fec42703          	lw	a4,-20(s0)
204067ae:	0761                	addi	a4,a4,24
204067b0:	8ff5                	and	a5,a5,a3
204067b2:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204067b4:	fec42783          	lw	a5,-20(s0)
204067b8:	02078793          	addi	a5,a5,32
204067bc:	439c                	lw	a5,0(a5)
204067be:	fd842703          	lw	a4,-40(s0)
204067c2:	fff74713          	not	a4,a4
204067c6:	86ba                	mv	a3,a4
204067c8:	fec42703          	lw	a4,-20(s0)
204067cc:	02070713          	addi	a4,a4,32
204067d0:	8ff5                	and	a5,a5,a3
204067d2:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204067d4:	fec42783          	lw	a5,-20(s0)
204067d8:	02878793          	addi	a5,a5,40
204067dc:	439c                	lw	a5,0(a5)
204067de:	fd842703          	lw	a4,-40(s0)
204067e2:	fff74713          	not	a4,a4
204067e6:	86ba                	mv	a3,a4
204067e8:	fec42703          	lw	a4,-20(s0)
204067ec:	02870713          	addi	a4,a4,40
204067f0:	8ff5                	and	a5,a5,a3
204067f2:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
204067f4:	fec42783          	lw	a5,-20(s0)
204067f8:	03078793          	addi	a5,a5,48
204067fc:	439c                	lw	a5,0(a5)
204067fe:	fd842703          	lw	a4,-40(s0)
20406802:	fff74713          	not	a4,a4
20406806:	86ba                	mv	a3,a4
20406808:	fec42703          	lw	a4,-20(s0)
2040680c:	03070713          	addi	a4,a4,48
20406810:	8ff5                	and	a5,a5,a3
20406812:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20406814:	aa35                	j	20406950 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20406816:	fec42783          	lw	a5,-20(s0)
2040681a:	07e1                	addi	a5,a5,24
2040681c:	4398                	lw	a4,0(a5)
2040681e:	fd842783          	lw	a5,-40(s0)
20406822:	fec42683          	lw	a3,-20(s0)
20406826:	06e1                	addi	a3,a3,24
20406828:	8fd9                	or	a5,a5,a4
2040682a:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
2040682c:	a215                	j	20406950 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
2040682e:	fec42783          	lw	a5,-20(s0)
20406832:	02078793          	addi	a5,a5,32
20406836:	4398                	lw	a4,0(a5)
20406838:	fd842783          	lw	a5,-40(s0)
2040683c:	fec42683          	lw	a3,-20(s0)
20406840:	02068693          	addi	a3,a3,32
20406844:	8fd9                	or	a5,a5,a4
20406846:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20406848:	a221                	j	20406950 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040684a:	fec42783          	lw	a5,-20(s0)
2040684e:	07e1                	addi	a5,a5,24
20406850:	4398                	lw	a4,0(a5)
20406852:	fd842783          	lw	a5,-40(s0)
20406856:	fec42683          	lw	a3,-20(s0)
2040685a:	06e1                	addi	a3,a3,24
2040685c:	8fd9                	or	a5,a5,a4
2040685e:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20406860:	fec42783          	lw	a5,-20(s0)
20406864:	02078793          	addi	a5,a5,32
20406868:	4398                	lw	a4,0(a5)
2040686a:	fd842783          	lw	a5,-40(s0)
2040686e:	fec42683          	lw	a3,-20(s0)
20406872:	02068693          	addi	a3,a3,32
20406876:	8fd9                	or	a5,a5,a4
20406878:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
2040687a:	a8d9                	j	20406950 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040687c:	fec42783          	lw	a5,-20(s0)
20406880:	02878793          	addi	a5,a5,40
20406884:	4398                	lw	a4,0(a5)
20406886:	fd842783          	lw	a5,-40(s0)
2040688a:	fec42683          	lw	a3,-20(s0)
2040688e:	02868693          	addi	a3,a3,40
20406892:	8fd9                	or	a5,a5,a4
20406894:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20406896:	a86d                	j	20406950 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20406898:	fec42783          	lw	a5,-20(s0)
2040689c:	03078793          	addi	a5,a5,48
204068a0:	4398                	lw	a4,0(a5)
204068a2:	fd842783          	lw	a5,-40(s0)
204068a6:	fec42683          	lw	a3,-20(s0)
204068aa:	03068693          	addi	a3,a3,48
204068ae:	8fd9                	or	a5,a5,a4
204068b0:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
204068b2:	a879                	j	20406950 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204068b4:	fec42783          	lw	a5,-20(s0)
204068b8:	02878793          	addi	a5,a5,40
204068bc:	4398                	lw	a4,0(a5)
204068be:	fd842783          	lw	a5,-40(s0)
204068c2:	fec42683          	lw	a3,-20(s0)
204068c6:	02868693          	addi	a3,a3,40
204068ca:	8fd9                	or	a5,a5,a4
204068cc:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204068ce:	fec42783          	lw	a5,-20(s0)
204068d2:	03078793          	addi	a5,a5,48
204068d6:	4398                	lw	a4,0(a5)
204068d8:	fd842783          	lw	a5,-40(s0)
204068dc:	fec42683          	lw	a3,-20(s0)
204068e0:	03068693          	addi	a3,a3,48
204068e4:	8fd9                	or	a5,a5,a4
204068e6:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
204068e8:	a0a5                	j	20406950 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204068ea:	fec42783          	lw	a5,-20(s0)
204068ee:	07e1                	addi	a5,a5,24
204068f0:	4398                	lw	a4,0(a5)
204068f2:	fd842783          	lw	a5,-40(s0)
204068f6:	fec42683          	lw	a3,-20(s0)
204068fa:	06e1                	addi	a3,a3,24
204068fc:	8fd9                	or	a5,a5,a4
204068fe:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20406900:	fec42783          	lw	a5,-20(s0)
20406904:	02078793          	addi	a5,a5,32
20406908:	4398                	lw	a4,0(a5)
2040690a:	fd842783          	lw	a5,-40(s0)
2040690e:	fec42683          	lw	a3,-20(s0)
20406912:	02068693          	addi	a3,a3,32
20406916:	8fd9                	or	a5,a5,a4
20406918:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040691a:	fec42783          	lw	a5,-20(s0)
2040691e:	02878793          	addi	a5,a5,40
20406922:	4398                	lw	a4,0(a5)
20406924:	fd842783          	lw	a5,-40(s0)
20406928:	fec42683          	lw	a3,-20(s0)
2040692c:	02868693          	addi	a3,a3,40
20406930:	8fd9                	or	a5,a5,a4
20406932:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20406934:	fec42783          	lw	a5,-20(s0)
20406938:	03078793          	addi	a5,a5,48
2040693c:	4398                	lw	a4,0(a5)
2040693e:	fd842783          	lw	a5,-40(s0)
20406942:	fec42683          	lw	a3,-20(s0)
20406946:	03068693          	addi	a3,a3,48
2040694a:	8fd9                	or	a5,a5,a4
2040694c:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
2040694e:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20406950:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20406952:	853e                	mv	a0,a5
20406954:	50b2                	lw	ra,44(sp)
20406956:	5422                	lw	s0,40(sp)
20406958:	6145                	addi	sp,sp,48
2040695a:	8082                	ret

2040695c <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2040695c:	7179                	addi	sp,sp,-48
2040695e:	d606                	sw	ra,44(sp)
20406960:	d422                	sw	s0,40(sp)
20406962:	1800                	addi	s0,sp,48
20406964:	fca42e23          	sw	a0,-36(s0)
20406968:	fcb42c23          	sw	a1,-40(s0)
2040696c:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20406970:	fdc42503          	lw	a0,-36(s0)
20406974:	905ff0ef          	jal	ra,20406278 <__metal_driver_sifive_gpio0_base>
20406978:	87aa                	mv	a5,a0
2040697a:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
2040697e:	fd442703          	lw	a4,-44(s0)
20406982:	479d                	li	a5,7
20406984:	14e7ea63          	bltu	a5,a4,20406ad8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20406988:	fd442783          	lw	a5,-44(s0)
2040698c:	00279713          	slli	a4,a5,0x2
20406990:	204467b7          	lui	a5,0x20446
20406994:	29c78793          	addi	a5,a5,668 # 2044629c <__metal_driver_vtable_sifive_fe310_g000_pll+0x2c>
20406998:	97ba                	add	a5,a5,a4
2040699a:	439c                	lw	a5,0(a5)
2040699c:	8782                	jr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040699e:	fec42783          	lw	a5,-20(s0)
204069a2:	07f1                	addi	a5,a5,28
204069a4:	4398                	lw	a4,0(a5)
204069a6:	fd842783          	lw	a5,-40(s0)
204069aa:	fec42683          	lw	a3,-20(s0)
204069ae:	06f1                	addi	a3,a3,28
204069b0:	8fd9                	or	a5,a5,a4
204069b2:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
204069b4:	a215                	j	20406ad8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204069b6:	fec42783          	lw	a5,-20(s0)
204069ba:	02478793          	addi	a5,a5,36
204069be:	4398                	lw	a4,0(a5)
204069c0:	fd842783          	lw	a5,-40(s0)
204069c4:	fec42683          	lw	a3,-20(s0)
204069c8:	02468693          	addi	a3,a3,36
204069cc:	8fd9                	or	a5,a5,a4
204069ce:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
204069d0:	a221                	j	20406ad8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204069d2:	fec42783          	lw	a5,-20(s0)
204069d6:	07f1                	addi	a5,a5,28
204069d8:	4398                	lw	a4,0(a5)
204069da:	fd842783          	lw	a5,-40(s0)
204069de:	fec42683          	lw	a3,-20(s0)
204069e2:	06f1                	addi	a3,a3,28
204069e4:	8fd9                	or	a5,a5,a4
204069e6:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204069e8:	fec42783          	lw	a5,-20(s0)
204069ec:	02478793          	addi	a5,a5,36
204069f0:	4398                	lw	a4,0(a5)
204069f2:	fd842783          	lw	a5,-40(s0)
204069f6:	fec42683          	lw	a3,-20(s0)
204069fa:	02468693          	addi	a3,a3,36
204069fe:	8fd9                	or	a5,a5,a4
20406a00:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20406a02:	a8d9                	j	20406ad8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20406a04:	fec42783          	lw	a5,-20(s0)
20406a08:	02c78793          	addi	a5,a5,44
20406a0c:	4398                	lw	a4,0(a5)
20406a0e:	fd842783          	lw	a5,-40(s0)
20406a12:	fec42683          	lw	a3,-20(s0)
20406a16:	02c68693          	addi	a3,a3,44
20406a1a:	8fd9                	or	a5,a5,a4
20406a1c:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20406a1e:	a86d                	j	20406ad8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20406a20:	fec42783          	lw	a5,-20(s0)
20406a24:	03478793          	addi	a5,a5,52
20406a28:	4398                	lw	a4,0(a5)
20406a2a:	fd842783          	lw	a5,-40(s0)
20406a2e:	fec42683          	lw	a3,-20(s0)
20406a32:	03468693          	addi	a3,a3,52
20406a36:	8fd9                	or	a5,a5,a4
20406a38:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20406a3a:	a879                	j	20406ad8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20406a3c:	fec42783          	lw	a5,-20(s0)
20406a40:	02c78793          	addi	a5,a5,44
20406a44:	4398                	lw	a4,0(a5)
20406a46:	fd842783          	lw	a5,-40(s0)
20406a4a:	fec42683          	lw	a3,-20(s0)
20406a4e:	02c68693          	addi	a3,a3,44
20406a52:	8fd9                	or	a5,a5,a4
20406a54:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20406a56:	fec42783          	lw	a5,-20(s0)
20406a5a:	03478793          	addi	a5,a5,52
20406a5e:	4398                	lw	a4,0(a5)
20406a60:	fd842783          	lw	a5,-40(s0)
20406a64:	fec42683          	lw	a3,-20(s0)
20406a68:	03468693          	addi	a3,a3,52
20406a6c:	8fd9                	or	a5,a5,a4
20406a6e:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20406a70:	a0a5                	j	20406ad8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20406a72:	fec42783          	lw	a5,-20(s0)
20406a76:	07f1                	addi	a5,a5,28
20406a78:	4398                	lw	a4,0(a5)
20406a7a:	fd842783          	lw	a5,-40(s0)
20406a7e:	fec42683          	lw	a3,-20(s0)
20406a82:	06f1                	addi	a3,a3,28
20406a84:	8fd9                	or	a5,a5,a4
20406a86:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20406a88:	fec42783          	lw	a5,-20(s0)
20406a8c:	02478793          	addi	a5,a5,36
20406a90:	4398                	lw	a4,0(a5)
20406a92:	fd842783          	lw	a5,-40(s0)
20406a96:	fec42683          	lw	a3,-20(s0)
20406a9a:	02468693          	addi	a3,a3,36
20406a9e:	8fd9                	or	a5,a5,a4
20406aa0:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20406aa2:	fec42783          	lw	a5,-20(s0)
20406aa6:	02c78793          	addi	a5,a5,44
20406aaa:	4398                	lw	a4,0(a5)
20406aac:	fd842783          	lw	a5,-40(s0)
20406ab0:	fec42683          	lw	a3,-20(s0)
20406ab4:	02c68693          	addi	a3,a3,44
20406ab8:	8fd9                	or	a5,a5,a4
20406aba:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20406abc:	fec42783          	lw	a5,-20(s0)
20406ac0:	03478793          	addi	a5,a5,52
20406ac4:	4398                	lw	a4,0(a5)
20406ac6:	fd842783          	lw	a5,-40(s0)
20406aca:	fec42683          	lw	a3,-20(s0)
20406ace:	03468693          	addi	a3,a3,52
20406ad2:	8fd9                	or	a5,a5,a4
20406ad4:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20406ad6:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20406ad8:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20406ada:	853e                	mv	a0,a5
20406adc:	50b2                	lw	ra,44(sp)
20406ade:	5422                	lw	s0,40(sp)
20406ae0:	6145                	addi	sp,sp,48
20406ae2:	8082                	ret

20406ae4 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20406ae4:	1101                	addi	sp,sp,-32
20406ae6:	ce06                	sw	ra,28(sp)
20406ae8:	cc22                	sw	s0,24(sp)
20406aea:	1000                	addi	s0,sp,32
20406aec:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20406af0:	fec42503          	lw	a0,-20(s0)
20406af4:	faaff0ef          	jal	ra,2040629e <__metal_driver_sifive_gpio0_interrupt_parent>
20406af8:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20406afa:	853e                	mv	a0,a5
20406afc:	40f2                	lw	ra,28(sp)
20406afe:	4462                	lw	s0,24(sp)
20406b00:	6105                	addi	sp,sp,32
20406b02:	8082                	ret

20406b04 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20406b04:	7179                	addi	sp,sp,-48
20406b06:	d606                	sw	ra,44(sp)
20406b08:	d422                	sw	s0,40(sp)
20406b0a:	1800                	addi	s0,sp,48
20406b0c:	fca42e23          	sw	a0,-36(s0)
20406b10:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20406b14:	fd842583          	lw	a1,-40(s0)
20406b18:	fdc42503          	lw	a0,-36(s0)
20406b1c:	facff0ef          	jal	ra,204062c8 <__metal_driver_sifive_gpio0_interrupt_lines>
20406b20:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20406b24:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20406b28:	853e                	mv	a0,a5
20406b2a:	50b2                	lw	ra,44(sp)
20406b2c:	5422                	lw	s0,40(sp)
20406b2e:	6145                	addi	sp,sp,48
20406b30:	8082                	ret

20406b32 <__metal_driver_sifive_spi0_control_base>:
__metal_driver_sifive_spi0_control_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:645
{
20406b32:	1101                	addi	sp,sp,-32
20406b34:	ce22                	sw	s0,28(sp)
20406b36:	1000                	addi	s0,sp,32
20406b38:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:646
	if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10014000) {
20406b3c:	fec42703          	lw	a4,-20(s0)
20406b40:	800007b7          	lui	a5,0x80000
20406b44:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xffffce8c>
20406b48:	00f71563          	bne	a4,a5,20406b52 <__metal_driver_sifive_spi0_control_base+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:647
		return METAL_SIFIVE_SPI0_10014000_BASE_ADDRESS;
20406b4c:	100147b7          	lui	a5,0x10014
20406b50:	a829                	j	20406b6a <__metal_driver_sifive_spi0_control_base+0x38>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:649
	else if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10024000) {
20406b52:	fec42703          	lw	a4,-20(s0)
20406b56:	800007b7          	lui	a5,0x80000
20406b5a:	76078793          	addi	a5,a5,1888 # 80000760 <metal_segment_heap_target_end+0xffffceac>
20406b5e:	00f71563          	bne	a4,a5,20406b68 <__metal_driver_sifive_spi0_control_base+0x36>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:650
		return METAL_SIFIVE_SPI0_10024000_BASE_ADDRESS;
20406b62:	100247b7          	lui	a5,0x10024
20406b66:	a011                	j	20406b6a <__metal_driver_sifive_spi0_control_base+0x38>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:653
		return 0;
20406b68:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:655
}
20406b6a:	853e                	mv	a0,a5
20406b6c:	4472                	lw	s0,28(sp)
20406b6e:	6105                	addi	sp,sp,32
20406b70:	8082                	ret

20406b72 <__metal_driver_sifive_spi0_clock>:
__metal_driver_sifive_spi0_clock():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:671
{
20406b72:	1101                	addi	sp,sp,-32
20406b74:	ce22                	sw	s0,28(sp)
20406b76:	1000                	addi	s0,sp,32
20406b78:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:672
	if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10014000) {
20406b7c:	fec42703          	lw	a4,-20(s0)
20406b80:	800007b7          	lui	a5,0x80000
20406b84:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xffffce8c>
20406b88:	00f71763          	bne	a4,a5,20406b96 <__metal_driver_sifive_spi0_clock+0x24>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:673
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20406b8c:	800007b7          	lui	a5,0x80000
20406b90:	7b878793          	addi	a5,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xffffcf04>
20406b94:	a839                	j	20406bb2 <__metal_driver_sifive_spi0_clock+0x40>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:675
	else if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10024000) {
20406b96:	fec42703          	lw	a4,-20(s0)
20406b9a:	800007b7          	lui	a5,0x80000
20406b9e:	76078793          	addi	a5,a5,1888 # 80000760 <metal_segment_heap_target_end+0xffffceac>
20406ba2:	00f71763          	bne	a4,a5,20406bb0 <__metal_driver_sifive_spi0_clock+0x3e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:676
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20406ba6:	800007b7          	lui	a5,0x80000
20406baa:	7b878793          	addi	a5,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xffffcf04>
20406bae:	a011                	j	20406bb2 <__metal_driver_sifive_spi0_clock+0x40>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:679
		return 0;
20406bb0:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:681
}
20406bb2:	853e                	mv	a0,a5
20406bb4:	4472                	lw	s0,28(sp)
20406bb6:	6105                	addi	sp,sp,32
20406bb8:	8082                	ret

20406bba <__metal_driver_sifive_spi0_pinmux>:
__metal_driver_sifive_spi0_pinmux():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:684
{
20406bba:	1101                	addi	sp,sp,-32
20406bbc:	ce22                	sw	s0,28(sp)
20406bbe:	1000                	addi	s0,sp,32
20406bc0:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:685
	if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10014000) {
20406bc4:	fec42703          	lw	a4,-20(s0)
20406bc8:	800007b7          	lui	a5,0x80000
20406bcc:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xffffce8c>
20406bd0:	00f71563          	bne	a4,a5,20406bda <__metal_driver_sifive_spi0_pinmux+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:686
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20406bd4:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406bd8:	a829                	j	20406bf2 <__metal_driver_sifive_spi0_pinmux+0x38>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:688
	else if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10024000) {
20406bda:	fec42703          	lw	a4,-20(s0)
20406bde:	800007b7          	lui	a5,0x80000
20406be2:	76078793          	addi	a5,a5,1888 # 80000760 <metal_segment_heap_target_end+0xffffceac>
20406be6:	00f71563          	bne	a4,a5,20406bf0 <__metal_driver_sifive_spi0_pinmux+0x36>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:689
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20406bea:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
20406bee:	a011                	j	20406bf2 <__metal_driver_sifive_spi0_pinmux+0x38>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:692
		return 0;
20406bf0:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:694
}
20406bf2:	853e                	mv	a0,a5
20406bf4:	4472                	lw	s0,28(sp)
20406bf6:	6105                	addi	sp,sp,32
20406bf8:	8082                	ret

20406bfa <__metal_driver_sifive_spi0_pinmux_output_selector>:
__metal_driver_sifive_spi0_pinmux_output_selector():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:697
{
20406bfa:	1101                	addi	sp,sp,-32
20406bfc:	ce22                	sw	s0,28(sp)
20406bfe:	1000                	addi	s0,sp,32
20406c00:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:698
	if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10014000) {
20406c04:	fec42703          	lw	a4,-20(s0)
20406c08:	800007b7          	lui	a5,0x80000
20406c0c:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xffffce8c>
20406c10:	00f71463          	bne	a4,a5,20406c18 <__metal_driver_sifive_spi0_pinmux_output_selector+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:699
		return 0;
20406c14:	4781                	li	a5,0
20406c16:	a829                	j	20406c30 <__metal_driver_sifive_spi0_pinmux_output_selector+0x36>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:701
	else if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10024000) {
20406c18:	fec42703          	lw	a4,-20(s0)
20406c1c:	800007b7          	lui	a5,0x80000
20406c20:	76078793          	addi	a5,a5,1888 # 80000760 <metal_segment_heap_target_end+0xffffceac>
20406c24:	00f71563          	bne	a4,a5,20406c2e <__metal_driver_sifive_spi0_pinmux_output_selector+0x34>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:702
		return 60;
20406c28:	03c00793          	li	a5,60
20406c2c:	a011                	j	20406c30 <__metal_driver_sifive_spi0_pinmux_output_selector+0x36>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:705
		return 0;
20406c2e:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:707
}
20406c30:	853e                	mv	a0,a5
20406c32:	4472                	lw	s0,28(sp)
20406c34:	6105                	addi	sp,sp,32
20406c36:	8082                	ret

20406c38 <__metal_driver_sifive_spi0_pinmux_source_selector>:
__metal_driver_sifive_spi0_pinmux_source_selector():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:710
{
20406c38:	1101                	addi	sp,sp,-32
20406c3a:	ce22                	sw	s0,28(sp)
20406c3c:	1000                	addi	s0,sp,32
20406c3e:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:711
	if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10014000) {
20406c42:	fec42703          	lw	a4,-20(s0)
20406c46:	800007b7          	lui	a5,0x80000
20406c4a:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xffffce8c>
20406c4e:	00f71463          	bne	a4,a5,20406c56 <__metal_driver_sifive_spi0_pinmux_source_selector+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:712
		return 0;
20406c52:	4781                	li	a5,0
20406c54:	a829                	j	20406c6e <__metal_driver_sifive_spi0_pinmux_source_selector+0x36>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:714
	else if ((uintptr_t)spi == (uintptr_t)&__metal_dt_spi_10024000) {
20406c56:	fec42703          	lw	a4,-20(s0)
20406c5a:	800007b7          	lui	a5,0x80000
20406c5e:	76078793          	addi	a5,a5,1888 # 80000760 <metal_segment_heap_target_end+0xffffceac>
20406c62:	00f71563          	bne	a4,a5,20406c6c <__metal_driver_sifive_spi0_pinmux_source_selector+0x34>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:715
		return 60;
20406c66:	03c00793          	li	a5,60
20406c6a:	a011                	j	20406c6e <__metal_driver_sifive_spi0_pinmux_source_selector+0x36>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:718
		return 0;
20406c6c:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:720
}
20406c6e:	853e                	mv	a0,a5
20406c70:	4472                	lw	s0,28(sp)
20406c72:	6105                	addi	sp,sp,32
20406c74:	8082                	ret

20406c76 <configure_spi>:
configure_spi():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:54
#define METAL_SPI_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)METAL_SPI_REG(offset)))

#define METAL_SPI_RXDATA_TIMEOUT      1

static int configure_spi(struct __metal_driver_sifive_spi0 *spi, struct metal_spi_config *config)
{
20406c76:	7179                	addi	sp,sp,-48
20406c78:	d606                	sw	ra,44(sp)
20406c7a:	d422                	sw	s0,40(sp)
20406c7c:	1800                	addi	s0,sp,48
20406c7e:	fca42e23          	sw	a0,-36(s0)
20406c82:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:55
    long control_base = __metal_driver_sifive_spi0_control_base((struct metal_spi *)spi);
20406c86:	fdc42503          	lw	a0,-36(s0)
20406c8a:	ea9ff0ef          	jal	ra,20406b32 <__metal_driver_sifive_spi0_control_base>
20406c8e:	87aa                	mv	a5,a0
20406c90:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:57
    /* Set protocol */
    METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) &= ~(METAL_SPI_PROTO_MASK);
20406c94:	fec42783          	lw	a5,-20(s0)
20406c98:	04078793          	addi	a5,a5,64
20406c9c:	439c                	lw	a5,0(a5)
20406c9e:	fec42703          	lw	a4,-20(s0)
20406ca2:	04070713          	addi	a4,a4,64
20406ca6:	9bf1                	andi	a5,a5,-4
20406ca8:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:58
    switch (config->protocol) {
20406caa:	fd842783          	lw	a5,-40(s0)
20406cae:	439c                	lw	a5,0(a5)
20406cb0:	4705                	li	a4,1
20406cb2:	02e78463          	beq	a5,a4,20406cda <configure_spi+0x64>
20406cb6:	c789                	beqz	a5,20406cc0 <configure_spi+0x4a>
20406cb8:	4709                	li	a4,2
20406cba:	04e78e63          	beq	a5,a4,20406d16 <configure_spi+0xa0>
20406cbe:	a851                	j	20406d52 <configure_spi+0xdc>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:60
    case METAL_SPI_SINGLE:
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_SINGLE;
20406cc0:	fec42783          	lw	a5,-20(s0)
20406cc4:	04078793          	addi	a5,a5,64
20406cc8:	86be                	mv	a3,a5
20406cca:	fec42783          	lw	a5,-20(s0)
20406cce:	04078793          	addi	a5,a5,64
20406cd2:	873e                	mv	a4,a5
20406cd4:	429c                	lw	a5,0(a3)
20406cd6:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:61
        break;
20406cd8:	a8bd                	j	20406d56 <configure_spi+0xe0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:63
    case METAL_SPI_DUAL:
        if (config->multi_wire == MULTI_WIRE_ALL)
20406cda:	fd842783          	lw	a5,-40(s0)
20406cde:	4f9c                	lw	a5,24(a5)
20406ce0:	ef91                	bnez	a5,20406cfc <configure_spi+0x86>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:64
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_DUAL;
20406ce2:	fec42783          	lw	a5,-20(s0)
20406ce6:	04078793          	addi	a5,a5,64
20406cea:	439c                	lw	a5,0(a5)
20406cec:	fec42703          	lw	a4,-20(s0)
20406cf0:	04070713          	addi	a4,a4,64
20406cf4:	0017e793          	ori	a5,a5,1
20406cf8:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:67
        else
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_SINGLE;
        break;
20406cfa:	a8b1                	j	20406d56 <configure_spi+0xe0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:66
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_SINGLE;
20406cfc:	fec42783          	lw	a5,-20(s0)
20406d00:	04078793          	addi	a5,a5,64
20406d04:	86be                	mv	a3,a5
20406d06:	fec42783          	lw	a5,-20(s0)
20406d0a:	04078793          	addi	a5,a5,64
20406d0e:	873e                	mv	a4,a5
20406d10:	429c                	lw	a5,0(a3)
20406d12:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:67
        break;
20406d14:	a089                	j	20406d56 <configure_spi+0xe0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:69
    case METAL_SPI_QUAD:
        if (config->multi_wire == MULTI_WIRE_ALL)
20406d16:	fd842783          	lw	a5,-40(s0)
20406d1a:	4f9c                	lw	a5,24(a5)
20406d1c:	ef91                	bnez	a5,20406d38 <configure_spi+0xc2>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:70
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_QUAD;
20406d1e:	fec42783          	lw	a5,-20(s0)
20406d22:	04078793          	addi	a5,a5,64
20406d26:	439c                	lw	a5,0(a5)
20406d28:	fec42703          	lw	a4,-20(s0)
20406d2c:	04070713          	addi	a4,a4,64
20406d30:	0027e793          	ori	a5,a5,2
20406d34:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:73
        else
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_SINGLE;
        break;
20406d36:	a005                	j	20406d56 <configure_spi+0xe0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:72
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_SINGLE;
20406d38:	fec42783          	lw	a5,-20(s0)
20406d3c:	04078793          	addi	a5,a5,64
20406d40:	86be                	mv	a3,a5
20406d42:	fec42783          	lw	a5,-20(s0)
20406d46:	04078793          	addi	a5,a5,64
20406d4a:	873e                	mv	a4,a5
20406d4c:	429c                	lw	a5,0(a3)
20406d4e:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:73
        break;
20406d50:	a019                	j	20406d56 <configure_spi+0xe0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:76
    default:
        /* Unsupported value */
        return -1;
20406d52:	57fd                	li	a5,-1
20406d54:	a295                	j	20406eb8 <configure_spi+0x242>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:80
    }

    /* Set Polarity */
    if(config->polarity) {
20406d56:	fd842783          	lw	a5,-40(s0)
20406d5a:	0047c783          	lbu	a5,4(a5)
20406d5e:	8b85                	andi	a5,a5,1
20406d60:	0ff7f793          	andi	a5,a5,255
20406d64:	cf81                	beqz	a5,20406d7c <configure_spi+0x106>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:81
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_SCKMODE) |= (1 << METAL_SPI_SCKMODE_PHA_SHIFT);
20406d66:	fec42783          	lw	a5,-20(s0)
20406d6a:	0791                	addi	a5,a5,4
20406d6c:	439c                	lw	a5,0(a5)
20406d6e:	fec42703          	lw	a4,-20(s0)
20406d72:	0711                	addi	a4,a4,4
20406d74:	0017e793          	ori	a5,a5,1
20406d78:	c31c                	sw	a5,0(a4)
20406d7a:	a811                	j	20406d8e <configure_spi+0x118>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:83
    } else {
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_SCKMODE) &= ~(1 << METAL_SPI_SCKMODE_PHA_SHIFT);
20406d7c:	fec42783          	lw	a5,-20(s0)
20406d80:	0791                	addi	a5,a5,4
20406d82:	439c                	lw	a5,0(a5)
20406d84:	fec42703          	lw	a4,-20(s0)
20406d88:	0711                	addi	a4,a4,4
20406d8a:	9bf9                	andi	a5,a5,-2
20406d8c:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:87
    }

    /* Set Phase */
    if(config->phase) {
20406d8e:	fd842783          	lw	a5,-40(s0)
20406d92:	0047c783          	lbu	a5,4(a5)
20406d96:	8b89                	andi	a5,a5,2
20406d98:	0ff7f793          	andi	a5,a5,255
20406d9c:	cf81                	beqz	a5,20406db4 <configure_spi+0x13e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:88
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_SCKMODE) |= (1 << METAL_SPI_SCKMODE_POL_SHIFT);
20406d9e:	fec42783          	lw	a5,-20(s0)
20406da2:	0791                	addi	a5,a5,4
20406da4:	439c                	lw	a5,0(a5)
20406da6:	fec42703          	lw	a4,-20(s0)
20406daa:	0711                	addi	a4,a4,4
20406dac:	0027e793          	ori	a5,a5,2
20406db0:	c31c                	sw	a5,0(a4)
20406db2:	a811                	j	20406dc6 <configure_spi+0x150>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:90
    } else {
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_SCKMODE) &= ~(1 << METAL_SPI_SCKMODE_POL_SHIFT);
20406db4:	fec42783          	lw	a5,-20(s0)
20406db8:	0791                	addi	a5,a5,4
20406dba:	439c                	lw	a5,0(a5)
20406dbc:	fec42703          	lw	a4,-20(s0)
20406dc0:	0711                	addi	a4,a4,4
20406dc2:	9bf5                	andi	a5,a5,-3
20406dc4:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:94
    }

    /* Set Endianness */
    if(config->little_endian) {
20406dc6:	fd842783          	lw	a5,-40(s0)
20406dca:	0047c783          	lbu	a5,4(a5)
20406dce:	8b91                	andi	a5,a5,4
20406dd0:	0ff7f793          	andi	a5,a5,255
20406dd4:	cf91                	beqz	a5,20406df0 <configure_spi+0x17a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:95
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_ENDIAN_LSB;
20406dd6:	fec42783          	lw	a5,-20(s0)
20406dda:	04078793          	addi	a5,a5,64
20406dde:	439c                	lw	a5,0(a5)
20406de0:	fec42703          	lw	a4,-20(s0)
20406de4:	04070713          	addi	a4,a4,64
20406de8:	0047e793          	ori	a5,a5,4
20406dec:	c31c                	sw	a5,0(a4)
20406dee:	a821                	j	20406e06 <configure_spi+0x190>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:97
    } else {
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) &= ~(METAL_SPI_ENDIAN_LSB);
20406df0:	fec42783          	lw	a5,-20(s0)
20406df4:	04078793          	addi	a5,a5,64
20406df8:	439c                	lw	a5,0(a5)
20406dfa:	fec42703          	lw	a4,-20(s0)
20406dfe:	04070713          	addi	a4,a4,64
20406e02:	9bed                	andi	a5,a5,-5
20406e04:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:101
    }

    /* Always populate receive FIFO */
    METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) &= ~(METAL_SPI_DISABLE_RX);
20406e06:	fec42783          	lw	a5,-20(s0)
20406e0a:	04078793          	addi	a5,a5,64
20406e0e:	439c                	lw	a5,0(a5)
20406e10:	fec42703          	lw	a4,-20(s0)
20406e14:	04070713          	addi	a4,a4,64
20406e18:	9bdd                	andi	a5,a5,-9
20406e1a:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:104

    /* Set CS Active */
    if(config->cs_active_high) {
20406e1c:	fd842783          	lw	a5,-40(s0)
20406e20:	0047c783          	lbu	a5,4(a5)
20406e24:	8ba1                	andi	a5,a5,8
20406e26:	0ff7f793          	andi	a5,a5,255
20406e2a:	c799                	beqz	a5,20406e38 <configure_spi+0x1c2>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:105
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSDEF) = 0;
20406e2c:	fec42783          	lw	a5,-20(s0)
20406e30:	07d1                	addi	a5,a5,20
20406e32:	0007a023          	sw	zero,0(a5)
20406e36:	a039                	j	20406e44 <configure_spi+0x1ce>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:107
    } else {
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSDEF) = 1;
20406e38:	fec42783          	lw	a5,-20(s0)
20406e3c:	07d1                	addi	a5,a5,20
20406e3e:	873e                	mv	a4,a5
20406e40:	4785                	li	a5,1
20406e42:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:111
    }

    /* Set frame length */
    if((METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) & METAL_SPI_FRAME_LEN_MASK) != (8 << METAL_SPI_FRAME_LEN_SHIFT)) {
20406e44:	fec42783          	lw	a5,-20(s0)
20406e48:	04078793          	addi	a5,a5,64
20406e4c:	4398                	lw	a4,0(a5)
20406e4e:	000f07b7          	lui	a5,0xf0
20406e52:	8f7d                	and	a4,a4,a5
20406e54:	000807b7          	lui	a5,0x80
20406e58:	02f70f63          	beq	a4,a5,20406e96 <configure_spi+0x220>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:112
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) &= ~(METAL_SPI_FRAME_LEN_MASK);
20406e5c:	fec42783          	lw	a5,-20(s0)
20406e60:	04078793          	addi	a5,a5,64 # 80040 <__stack_size+0x7d840>
20406e64:	4398                	lw	a4,0(a5)
20406e66:	fec42783          	lw	a5,-20(s0)
20406e6a:	04078793          	addi	a5,a5,64
20406e6e:	86be                	mv	a3,a5
20406e70:	fff107b7          	lui	a5,0xfff10
20406e74:	17fd                	addi	a5,a5,-1
20406e76:	8ff9                	and	a5,a5,a4
20406e78:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:113
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= (8 << METAL_SPI_FRAME_LEN_SHIFT);
20406e7a:	fec42783          	lw	a5,-20(s0)
20406e7e:	04078793          	addi	a5,a5,64 # fff10040 <metal_segment_heap_target_end+0x7ff0c78c>
20406e82:	4398                	lw	a4,0(a5)
20406e84:	fec42783          	lw	a5,-20(s0)
20406e88:	04078793          	addi	a5,a5,64
20406e8c:	86be                	mv	a3,a5
20406e8e:	000807b7          	lui	a5,0x80
20406e92:	8fd9                	or	a5,a5,a4
20406e94:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:117
    }

    /* Set CS line */
    METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSID) = 1 << (config->csid);
20406e96:	fd842783          	lw	a5,-40(s0)
20406e9a:	479c                	lw	a5,8(a5)
20406e9c:	4705                	li	a4,1
20406e9e:	00f71733          	sll	a4,a4,a5
20406ea2:	fec42783          	lw	a5,-20(s0)
20406ea6:	07c1                	addi	a5,a5,16
20406ea8:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:126
     * to the chip at all because it assumes the chip is in memory-mapped mode. 
     * I have to compile the code with this line commented and launch gdb,
     * reset cores, reset $pc, set *((int *) 0x20004060) = 0, (set the flash
     * interface control register to programmable I/O mode) and then continue
     * Alternative, comment out the "flash" line in openocd.cfg */
    METAL_SPI_REGW(METAL_SIFIVE_SPI0_FCTRL) = METAL_SPI_CONTROL_IO;
20406eaa:	fec42783          	lw	a5,-20(s0)
20406eae:	06078793          	addi	a5,a5,96 # 80060 <__stack_size+0x7d860>
20406eb2:	0007a023          	sw	zero,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:128

    return 0;
20406eb6:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:129
}
20406eb8:	853e                	mv	a0,a5
20406eba:	50b2                	lw	ra,44(sp)
20406ebc:	5422                	lw	s0,40(sp)
20406ebe:	6145                	addi	sp,sp,48
20406ec0:	8082                	ret

20406ec2 <spi_mode_switch>:
spi_mode_switch():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:133

static void spi_mode_switch(struct __metal_driver_sifive_spi0 *spi,
                            struct metal_spi_config *config,
                            unsigned int trans_stage) {
20406ec2:	7179                	addi	sp,sp,-48
20406ec4:	d606                	sw	ra,44(sp)
20406ec6:	d422                	sw	s0,40(sp)
20406ec8:	1800                	addi	s0,sp,48
20406eca:	fca42e23          	sw	a0,-36(s0)
20406ece:	fcb42c23          	sw	a1,-40(s0)
20406ed2:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:135
    long control_base =
        __metal_driver_sifive_spi0_control_base((struct metal_spi *)spi);
20406ed6:	fdc42503          	lw	a0,-36(s0)
20406eda:	c59ff0ef          	jal	ra,20406b32 <__metal_driver_sifive_spi0_control_base>
20406ede:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:134
    long control_base =
20406ee0:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:137

    if (config->multi_wire == trans_stage) {
20406ee4:	fd842783          	lw	a5,-40(s0)
20406ee8:	4f9c                	lw	a5,24(a5)
20406eea:	fd442703          	lw	a4,-44(s0)
20406eee:	06f71163          	bne	a4,a5,20406f50 <spi_mode_switch+0x8e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:138
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) &= ~(METAL_SPI_PROTO_MASK);
20406ef2:	fec42783          	lw	a5,-20(s0)
20406ef6:	04078793          	addi	a5,a5,64
20406efa:	439c                	lw	a5,0(a5)
20406efc:	fec42703          	lw	a4,-20(s0)
20406f00:	04070713          	addi	a4,a4,64
20406f04:	9bf1                	andi	a5,a5,-4
20406f06:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:139
        switch (config->protocol) {
20406f08:	fd842783          	lw	a5,-40(s0)
20406f0c:	439c                	lw	a5,0(a5)
20406f0e:	4705                	li	a4,1
20406f10:	00e78663          	beq	a5,a4,20406f1c <spi_mode_switch+0x5a>
20406f14:	4709                	li	a4,2
20406f16:	02e78063          	beq	a5,a4,20406f36 <spi_mode_switch+0x74>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:148
        case METAL_SPI_QUAD:
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_QUAD;
            break;
        default:
            /* Unsupported value */
            return;
20406f1a:	a81d                	j	20406f50 <spi_mode_switch+0x8e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:141
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_DUAL;
20406f1c:	fec42783          	lw	a5,-20(s0)
20406f20:	04078793          	addi	a5,a5,64
20406f24:	439c                	lw	a5,0(a5)
20406f26:	fec42703          	lw	a4,-20(s0)
20406f2a:	04070713          	addi	a4,a4,64
20406f2e:	0017e793          	ori	a5,a5,1
20406f32:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:142
            break;
20406f34:	a831                	j	20406f50 <spi_mode_switch+0x8e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:144
            METAL_SPI_REGW(METAL_SIFIVE_SPI0_FMT) |= METAL_SPI_PROTO_QUAD;
20406f36:	fec42783          	lw	a5,-20(s0)
20406f3a:	04078793          	addi	a5,a5,64
20406f3e:	439c                	lw	a5,0(a5)
20406f40:	fec42703          	lw	a4,-20(s0)
20406f44:	04070713          	addi	a4,a4,64
20406f48:	0027e793          	ori	a5,a5,2
20406f4c:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:145
            break;
20406f4e:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:151
        }
    }
}
20406f50:	50b2                	lw	ra,44(sp)
20406f52:	5422                	lw	s0,40(sp)
20406f54:	6145                	addi	sp,sp,48
20406f56:	8082                	ret

20406f58 <__metal_driver_sifive_spi0_transfer>:
__metal_driver_sifive_spi0_transfer():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:158
int __metal_driver_sifive_spi0_transfer(struct metal_spi *gspi,
                                      struct metal_spi_config *config,
                                      size_t len,
                                      char *tx_buf,
                                      char *rx_buf)
{
20406f58:	715d                	addi	sp,sp,-80
20406f5a:	c686                	sw	ra,76(sp)
20406f5c:	c4a2                	sw	s0,72(sp)
20406f5e:	0880                	addi	s0,sp,80
20406f60:	fca42623          	sw	a0,-52(s0)
20406f64:	fcb42423          	sw	a1,-56(s0)
20406f68:	fcc42223          	sw	a2,-60(s0)
20406f6c:	fcd42023          	sw	a3,-64(s0)
20406f70:	fae42e23          	sw	a4,-68(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:159
    struct __metal_driver_sifive_spi0 *spi = (void *)gspi;
20406f74:	fcc42783          	lw	a5,-52(s0)
20406f78:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:160
    long control_base = __metal_driver_sifive_spi0_control_base(gspi);
20406f7c:	fcc42503          	lw	a0,-52(s0)
20406f80:	bb3ff0ef          	jal	ra,20406b32 <__metal_driver_sifive_spi0_control_base>
20406f84:	87aa                	mv	a5,a0
20406f86:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:161
    int rc = 0;
20406f8a:	fe042023          	sw	zero,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:162
    size_t i = 0;
20406f8e:	fe042623          	sw	zero,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:164

    rc = configure_spi(spi, config);
20406f92:	fc842583          	lw	a1,-56(s0)
20406f96:	fe842503          	lw	a0,-24(s0)
20406f9a:	cddff0ef          	jal	ra,20406c76 <configure_spi>
20406f9e:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:165
    if(rc != 0) {
20406fa2:	fe042783          	lw	a5,-32(s0)
20406fa6:	c781                	beqz	a5,20406fae <__metal_driver_sifive_spi0_transfer+0x56>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:166
        return rc;
20406fa8:	fe042783          	lw	a5,-32(s0)
20406fac:	a901                	j	204073bc <__metal_driver_sifive_spi0_transfer+0x464>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:172
    }

    /* Hold the chip select line for all len transferred */
    //METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSMODE) &= ~(METAL_SPI_CSMODE_MASK);
    //METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSMODE) |= METAL_SPI_CSMODE_HOLD;
    METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSDEF) = 0;
20406fae:	fe442783          	lw	a5,-28(s0)
20406fb2:	07d1                	addi	a5,a5,20
20406fb4:	0007a023          	sw	zero,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:179
    unsigned long rxdata;
    
    /* Declare time_t variables to break out of infinite while loop */
    time_t endwait;

    for (i = 0; i < config->cmd_num; i++) {
20406fb8:	fe042623          	sw	zero,-20(s0)
20406fbc:	a0cd                	j	2040709e <__metal_driver_sifive_spi0_transfer+0x146>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:181

        while (METAL_SPI_REGW(METAL_SIFIVE_SPI0_TXDATA) & METAL_SPI_TXDATA_FULL)
20406fbe:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:181 (discriminator 1)
20406fc0:	fe442783          	lw	a5,-28(s0)
20406fc4:	04878793          	addi	a5,a5,72
20406fc8:	439c                	lw	a5,0(a5)
20406fca:	fe07cbe3          	bltz	a5,20406fc0 <__metal_driver_sifive_spi0_transfer+0x68>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:184
            ;

        if (tx_buf) {
20406fce:	fc042783          	lw	a5,-64(s0)
20406fd2:	cf99                	beqz	a5,20406ff0 <__metal_driver_sifive_spi0_transfer+0x98>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:185
            METAL_SPI_REGB(METAL_SIFIVE_SPI0_TXDATA) = tx_buf[i];
20406fd4:	fc042703          	lw	a4,-64(s0)
20406fd8:	fec42783          	lw	a5,-20(s0)
20406fdc:	97ba                	add	a5,a5,a4
20406fde:	fe442703          	lw	a4,-28(s0)
20406fe2:	04870713          	addi	a4,a4,72
20406fe6:	0007c783          	lbu	a5,0(a5)
20406fea:	00f70023          	sb	a5,0(a4)
20406fee:	a039                	j	20406ffc <__metal_driver_sifive_spi0_transfer+0xa4>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:187
        } else {
            METAL_SPI_REGB(METAL_SIFIVE_SPI0_TXDATA) = 0;
20406ff0:	fe442783          	lw	a5,-28(s0)
20406ff4:	04878793          	addi	a5,a5,72
20406ff8:	00078023          	sb	zero,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:190
        }

        endwait = metal_time() + METAL_SPI_RXDATA_TIMEOUT;
20406ffc:	0a4010ef          	jal	ra,204080a0 <metal_time>
20407000:	86aa                	mv	a3,a0
20407002:	872e                	mv	a4,a1
20407004:	4585                	li	a1,1
20407006:	4601                	li	a2,0
20407008:	00b687b3          	add	a5,a3,a1
2040700c:	853e                	mv	a0,a5
2040700e:	00d53533          	sltu	a0,a0,a3
20407012:	00c70833          	add	a6,a4,a2
20407016:	01050733          	add	a4,a0,a6
2040701a:	883a                	mv	a6,a4
2040701c:	fcf42c23          	sw	a5,-40(s0)
20407020:	fd042e23          	sw	a6,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:192

        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI0_RXDATA)) &
20407024:	a83d                	j	20407062 <__metal_driver_sifive_spi0_transfer+0x10a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:194
               METAL_SPI_RXDATA_EMPTY) {
            if (metal_time() > endwait) {
20407026:	07a010ef          	jal	ra,204080a0 <metal_time>
2040702a:	87aa                	mv	a5,a0
2040702c:	882e                	mv	a6,a1
2040702e:	fdc42703          	lw	a4,-36(s0)
20407032:	86c2                	mv	a3,a6
20407034:	00d74c63          	blt	a4,a3,2040704c <__metal_driver_sifive_spi0_transfer+0xf4>
20407038:	fdc42703          	lw	a4,-36(s0)
2040703c:	86c2                	mv	a3,a6
2040703e:	02d71263          	bne	a4,a3,20407062 <__metal_driver_sifive_spi0_transfer+0x10a>
20407042:	fd842703          	lw	a4,-40(s0)
20407046:	00f76363          	bltu	a4,a5,2040704c <__metal_driver_sifive_spi0_transfer+0xf4>
2040704a:	a821                	j	20407062 <__metal_driver_sifive_spi0_transfer+0x10a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:195
                METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSMODE) &=
2040704c:	fe442783          	lw	a5,-28(s0)
20407050:	07e1                	addi	a5,a5,24
20407052:	439c                	lw	a5,0(a5)
20407054:	fe442703          	lw	a4,-28(s0)
20407058:	0761                	addi	a4,a4,24
2040705a:	9bf1                	andi	a5,a5,-4
2040705c:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:198
                    ~(METAL_SPI_CSMODE_MASK);

                return 1;
2040705e:	4785                	li	a5,1
20407060:	aeb1                	j	204073bc <__metal_driver_sifive_spi0_transfer+0x464>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:192
        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI0_RXDATA)) &
20407062:	fe442783          	lw	a5,-28(s0)
20407066:	04c78793          	addi	a5,a5,76
2040706a:	439c                	lw	a5,0(a5)
2040706c:	fcf42a23          	sw	a5,-44(s0)
20407070:	fd442783          	lw	a5,-44(s0)
20407074:	fa07c9e3          	bltz	a5,20407026 <__metal_driver_sifive_spi0_transfer+0xce>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:202
            }
        }

        if (rx_buf) {
20407078:	fbc42783          	lw	a5,-68(s0)
2040707c:	cf81                	beqz	a5,20407094 <__metal_driver_sifive_spi0_transfer+0x13c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:203
            rx_buf[i] = (char)(rxdata & METAL_SPI_TXRXDATA_MASK);
2040707e:	fbc42703          	lw	a4,-68(s0)
20407082:	fec42783          	lw	a5,-20(s0)
20407086:	97ba                	add	a5,a5,a4
20407088:	fd442703          	lw	a4,-44(s0)
2040708c:	0ff77713          	andi	a4,a4,255
20407090:	00e78023          	sb	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:179 (discriminator 2)
    for (i = 0; i < config->cmd_num; i++) {
20407094:	fec42783          	lw	a5,-20(s0)
20407098:	0785                	addi	a5,a5,1
2040709a:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:179 (discriminator 1)
2040709e:	fc842783          	lw	a5,-56(s0)
204070a2:	47dc                	lw	a5,12(a5)
204070a4:	fec42703          	lw	a4,-20(s0)
204070a8:	f0f76be3          	bltu	a4,a5,20406fbe <__metal_driver_sifive_spi0_transfer+0x66>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:208
        }
    }

    /* switch to Dual/Quad mode */
    spi_mode_switch(spi, config, MULTI_WIRE_ADDR_DATA);
204070ac:	4609                	li	a2,2
204070ae:	fc842583          	lw	a1,-56(s0)
204070b2:	fe842503          	lw	a0,-24(s0)
204070b6:	e0dff0ef          	jal	ra,20406ec2 <spi_mode_switch>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:211

    /* Send Addr data */
    for (; i < (config->cmd_num + config->addr_num); i++) {
204070ba:	a0cd                	j	2040719c <__metal_driver_sifive_spi0_transfer+0x244>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:213

        while (METAL_SPI_REGW(METAL_SIFIVE_SPI0_TXDATA) & METAL_SPI_TXDATA_FULL)
204070bc:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:213 (discriminator 1)
204070be:	fe442783          	lw	a5,-28(s0)
204070c2:	04878793          	addi	a5,a5,72
204070c6:	439c                	lw	a5,0(a5)
204070c8:	fe07cbe3          	bltz	a5,204070be <__metal_driver_sifive_spi0_transfer+0x166>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:216
            ;

        if (tx_buf) {
204070cc:	fc042783          	lw	a5,-64(s0)
204070d0:	cf99                	beqz	a5,204070ee <__metal_driver_sifive_spi0_transfer+0x196>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:217
            METAL_SPI_REGB(METAL_SIFIVE_SPI0_TXDATA) = tx_buf[i];
204070d2:	fc042703          	lw	a4,-64(s0)
204070d6:	fec42783          	lw	a5,-20(s0)
204070da:	97ba                	add	a5,a5,a4
204070dc:	fe442703          	lw	a4,-28(s0)
204070e0:	04870713          	addi	a4,a4,72
204070e4:	0007c783          	lbu	a5,0(a5)
204070e8:	00f70023          	sb	a5,0(a4)
204070ec:	a039                	j	204070fa <__metal_driver_sifive_spi0_transfer+0x1a2>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:219
        } else {
            METAL_SPI_REGB(METAL_SIFIVE_SPI0_TXDATA) = 0;
204070ee:	fe442783          	lw	a5,-28(s0)
204070f2:	04878793          	addi	a5,a5,72
204070f6:	00078023          	sb	zero,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:222
        }

        endwait = metal_time() + METAL_SPI_RXDATA_TIMEOUT;
204070fa:	7a7000ef          	jal	ra,204080a0 <metal_time>
204070fe:	86aa                	mv	a3,a0
20407100:	872e                	mv	a4,a1
20407102:	4585                	li	a1,1
20407104:	4601                	li	a2,0
20407106:	00b687b3          	add	a5,a3,a1
2040710a:	853e                	mv	a0,a5
2040710c:	00d53533          	sltu	a0,a0,a3
20407110:	00c70833          	add	a6,a4,a2
20407114:	01050733          	add	a4,a0,a6
20407118:	883a                	mv	a6,a4
2040711a:	fcf42c23          	sw	a5,-40(s0)
2040711e:	fd042e23          	sw	a6,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:224

        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI0_RXDATA)) &
20407122:	a83d                	j	20407160 <__metal_driver_sifive_spi0_transfer+0x208>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:226
               METAL_SPI_RXDATA_EMPTY) {
            if (metal_time() > endwait) {
20407124:	77d000ef          	jal	ra,204080a0 <metal_time>
20407128:	87aa                	mv	a5,a0
2040712a:	882e                	mv	a6,a1
2040712c:	fdc42703          	lw	a4,-36(s0)
20407130:	86c2                	mv	a3,a6
20407132:	00d74c63          	blt	a4,a3,2040714a <__metal_driver_sifive_spi0_transfer+0x1f2>
20407136:	fdc42703          	lw	a4,-36(s0)
2040713a:	86c2                	mv	a3,a6
2040713c:	02d71263          	bne	a4,a3,20407160 <__metal_driver_sifive_spi0_transfer+0x208>
20407140:	fd842703          	lw	a4,-40(s0)
20407144:	00f76363          	bltu	a4,a5,2040714a <__metal_driver_sifive_spi0_transfer+0x1f2>
20407148:	a821                	j	20407160 <__metal_driver_sifive_spi0_transfer+0x208>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:227
                METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSMODE) &=
2040714a:	fe442783          	lw	a5,-28(s0)
2040714e:	07e1                	addi	a5,a5,24
20407150:	439c                	lw	a5,0(a5)
20407152:	fe442703          	lw	a4,-28(s0)
20407156:	0761                	addi	a4,a4,24
20407158:	9bf1                	andi	a5,a5,-4
2040715a:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:230
                    ~(METAL_SPI_CSMODE_MASK);

                return 1;
2040715c:	4785                	li	a5,1
2040715e:	acb9                	j	204073bc <__metal_driver_sifive_spi0_transfer+0x464>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:224
        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI0_RXDATA)) &
20407160:	fe442783          	lw	a5,-28(s0)
20407164:	04c78793          	addi	a5,a5,76
20407168:	439c                	lw	a5,0(a5)
2040716a:	fcf42a23          	sw	a5,-44(s0)
2040716e:	fd442783          	lw	a5,-44(s0)
20407172:	fa07c9e3          	bltz	a5,20407124 <__metal_driver_sifive_spi0_transfer+0x1cc>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:234
            }
        }

        if (rx_buf) {
20407176:	fbc42783          	lw	a5,-68(s0)
2040717a:	cf81                	beqz	a5,20407192 <__metal_driver_sifive_spi0_transfer+0x23a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:235
            rx_buf[i] = (char)(rxdata & METAL_SPI_TXRXDATA_MASK);
2040717c:	fbc42703          	lw	a4,-68(s0)
20407180:	fec42783          	lw	a5,-20(s0)
20407184:	97ba                	add	a5,a5,a4
20407186:	fd442703          	lw	a4,-44(s0)
2040718a:	0ff77713          	andi	a4,a4,255
2040718e:	00e78023          	sb	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:211
    for (; i < (config->cmd_num + config->addr_num); i++) {
20407192:	fec42783          	lw	a5,-20(s0)
20407196:	0785                	addi	a5,a5,1
20407198:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:211 (discriminator 1)
2040719c:	fc842783          	lw	a5,-56(s0)
204071a0:	47d8                	lw	a4,12(a5)
204071a2:	fc842783          	lw	a5,-56(s0)
204071a6:	4b9c                	lw	a5,16(a5)
204071a8:	97ba                	add	a5,a5,a4
204071aa:	fec42703          	lw	a4,-20(s0)
204071ae:	f0f767e3          	bltu	a4,a5,204070bc <__metal_driver_sifive_spi0_transfer+0x164>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:240
        }
    }

    /* Send Dummy data */
    for (; i < (config->cmd_num + config->addr_num + config->dummy_num); i++) {
204071b2:	a0cd                	j	20407294 <__metal_driver_sifive_spi0_transfer+0x33c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:242

        while (METAL_SPI_REGW(METAL_SIFIVE_SPI0_TXDATA) & METAL_SPI_TXDATA_FULL)
204071b4:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:242 (discriminator 1)
204071b6:	fe442783          	lw	a5,-28(s0)
204071ba:	04878793          	addi	a5,a5,72
204071be:	439c                	lw	a5,0(a5)
204071c0:	fe07cbe3          	bltz	a5,204071b6 <__metal_driver_sifive_spi0_transfer+0x25e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:245
            ;

        if (tx_buf) {
204071c4:	fc042783          	lw	a5,-64(s0)
204071c8:	cf99                	beqz	a5,204071e6 <__metal_driver_sifive_spi0_transfer+0x28e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:246
            METAL_SPI_REGB(METAL_SIFIVE_SPI0_TXDATA) = tx_buf[i];
204071ca:	fc042703          	lw	a4,-64(s0)
204071ce:	fec42783          	lw	a5,-20(s0)
204071d2:	97ba                	add	a5,a5,a4
204071d4:	fe442703          	lw	a4,-28(s0)
204071d8:	04870713          	addi	a4,a4,72
204071dc:	0007c783          	lbu	a5,0(a5)
204071e0:	00f70023          	sb	a5,0(a4)
204071e4:	a039                	j	204071f2 <__metal_driver_sifive_spi0_transfer+0x29a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:248
        } else {
            METAL_SPI_REGB(METAL_SIFIVE_SPI0_TXDATA) = 0;
204071e6:	fe442783          	lw	a5,-28(s0)
204071ea:	04878793          	addi	a5,a5,72
204071ee:	00078023          	sb	zero,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:251
        }

        endwait = metal_time() + METAL_SPI_RXDATA_TIMEOUT;
204071f2:	6af000ef          	jal	ra,204080a0 <metal_time>
204071f6:	86aa                	mv	a3,a0
204071f8:	872e                	mv	a4,a1
204071fa:	4585                	li	a1,1
204071fc:	4601                	li	a2,0
204071fe:	00b687b3          	add	a5,a3,a1
20407202:	853e                	mv	a0,a5
20407204:	00d53533          	sltu	a0,a0,a3
20407208:	00c70833          	add	a6,a4,a2
2040720c:	01050733          	add	a4,a0,a6
20407210:	883a                	mv	a6,a4
20407212:	fcf42c23          	sw	a5,-40(s0)
20407216:	fd042e23          	sw	a6,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:253

        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI0_RXDATA)) &
2040721a:	a83d                	j	20407258 <__metal_driver_sifive_spi0_transfer+0x300>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:255
               METAL_SPI_RXDATA_EMPTY) {
            if (metal_time() > endwait) {
2040721c:	685000ef          	jal	ra,204080a0 <metal_time>
20407220:	87aa                	mv	a5,a0
20407222:	882e                	mv	a6,a1
20407224:	fdc42703          	lw	a4,-36(s0)
20407228:	86c2                	mv	a3,a6
2040722a:	00d74c63          	blt	a4,a3,20407242 <__metal_driver_sifive_spi0_transfer+0x2ea>
2040722e:	fdc42703          	lw	a4,-36(s0)
20407232:	86c2                	mv	a3,a6
20407234:	02d71263          	bne	a4,a3,20407258 <__metal_driver_sifive_spi0_transfer+0x300>
20407238:	fd842703          	lw	a4,-40(s0)
2040723c:	00f76363          	bltu	a4,a5,20407242 <__metal_driver_sifive_spi0_transfer+0x2ea>
20407240:	a821                	j	20407258 <__metal_driver_sifive_spi0_transfer+0x300>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:256
                METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSMODE) &=
20407242:	fe442783          	lw	a5,-28(s0)
20407246:	07e1                	addi	a5,a5,24
20407248:	439c                	lw	a5,0(a5)
2040724a:	fe442703          	lw	a4,-28(s0)
2040724e:	0761                	addi	a4,a4,24
20407250:	9bf1                	andi	a5,a5,-4
20407252:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:258
                    ~(METAL_SPI_CSMODE_MASK);
                return 1;
20407254:	4785                	li	a5,1
20407256:	a29d                	j	204073bc <__metal_driver_sifive_spi0_transfer+0x464>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:253
        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI0_RXDATA)) &
20407258:	fe442783          	lw	a5,-28(s0)
2040725c:	04c78793          	addi	a5,a5,76
20407260:	439c                	lw	a5,0(a5)
20407262:	fcf42a23          	sw	a5,-44(s0)
20407266:	fd442783          	lw	a5,-44(s0)
2040726a:	fa07c9e3          	bltz	a5,2040721c <__metal_driver_sifive_spi0_transfer+0x2c4>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:261
            }
        }
        if (rx_buf) {
2040726e:	fbc42783          	lw	a5,-68(s0)
20407272:	cf81                	beqz	a5,2040728a <__metal_driver_sifive_spi0_transfer+0x332>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:262
            rx_buf[i] = (char)(rxdata & METAL_SPI_TXRXDATA_MASK);
20407274:	fbc42703          	lw	a4,-68(s0)
20407278:	fec42783          	lw	a5,-20(s0)
2040727c:	97ba                	add	a5,a5,a4
2040727e:	fd442703          	lw	a4,-44(s0)
20407282:	0ff77713          	andi	a4,a4,255
20407286:	00e78023          	sb	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:240
    for (; i < (config->cmd_num + config->addr_num + config->dummy_num); i++) {
2040728a:	fec42783          	lw	a5,-20(s0)
2040728e:	0785                	addi	a5,a5,1
20407290:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:240 (discriminator 1)
20407294:	fc842783          	lw	a5,-56(s0)
20407298:	47d8                	lw	a4,12(a5)
2040729a:	fc842783          	lw	a5,-56(s0)
2040729e:	4b9c                	lw	a5,16(a5)
204072a0:	973e                	add	a4,a4,a5
204072a2:	fc842783          	lw	a5,-56(s0)
204072a6:	4bdc                	lw	a5,20(a5)
204072a8:	97ba                	add	a5,a5,a4
204072aa:	fec42703          	lw	a4,-20(s0)
204072ae:	f0f763e3          	bltu	a4,a5,204071b4 <__metal_driver_sifive_spi0_transfer+0x25c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:267
        }
    }

    /* switch to Dual/Quad mode */
    spi_mode_switch(spi, config, MULTI_WIRE_DATA_ONLY);
204072b2:	4605                	li	a2,1
204072b4:	fc842583          	lw	a1,-56(s0)
204072b8:	fe842503          	lw	a0,-24(s0)
204072bc:	c07ff0ef          	jal	ra,20406ec2 <spi_mode_switch>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:269

    for (; i < len; i++) {
204072c0:	a0cd                	j	204073a2 <__metal_driver_sifive_spi0_transfer+0x44a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:273
        /* Master send bytes to the slave */

        /* Wait for TXFIFO to not be full */
        while (METAL_SPI_REGW(METAL_SIFIVE_SPI0_TXDATA) & METAL_SPI_TXDATA_FULL);
204072c2:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:273 (discriminator 1)
204072c4:	fe442783          	lw	a5,-28(s0)
204072c8:	04878793          	addi	a5,a5,72
204072cc:	439c                	lw	a5,0(a5)
204072ce:	fe07cbe3          	bltz	a5,204072c4 <__metal_driver_sifive_spi0_transfer+0x36c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:276
    
        /* Transfer byte by modifying the least significant byte in the TXDATA register */
        if (tx_buf) {
204072d2:	fc042783          	lw	a5,-64(s0)
204072d6:	cf99                	beqz	a5,204072f4 <__metal_driver_sifive_spi0_transfer+0x39c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:277
            METAL_SPI_REGB(METAL_SIFIVE_SPI0_TXDATA) = tx_buf[i];
204072d8:	fc042703          	lw	a4,-64(s0)
204072dc:	fec42783          	lw	a5,-20(s0)
204072e0:	97ba                	add	a5,a5,a4
204072e2:	fe442703          	lw	a4,-28(s0)
204072e6:	04870713          	addi	a4,a4,72
204072ea:	0007c783          	lbu	a5,0(a5)
204072ee:	00f70023          	sb	a5,0(a4)
204072f2:	a039                	j	20407300 <__metal_driver_sifive_spi0_transfer+0x3a8>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:280
        } else {
            /* Transfer a 0 byte if the sending buffer is NULL */
            METAL_SPI_REGB(METAL_SIFIVE_SPI0_TXDATA) = 0;
204072f4:	fe442783          	lw	a5,-28(s0)
204072f8:	04878793          	addi	a5,a5,72
204072fc:	00078023          	sb	zero,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:288
        /* Master receives bytes from the RX FIFO */

        /* Wait for RXFIFO to not be empty, but break the nested loops if timeout
         * this timeout method  needs refining, preferably taking into account 
         * the device specs */
        endwait = metal_time() + METAL_SPI_RXDATA_TIMEOUT;
20407300:	5a1000ef          	jal	ra,204080a0 <metal_time>
20407304:	86aa                	mv	a3,a0
20407306:	872e                	mv	a4,a1
20407308:	4585                	li	a1,1
2040730a:	4601                	li	a2,0
2040730c:	00b687b3          	add	a5,a3,a1
20407310:	853e                	mv	a0,a5
20407312:	00d53533          	sltu	a0,a0,a3
20407316:	00c70833          	add	a6,a4,a2
2040731a:	01050733          	add	a4,a0,a6
2040731e:	883a                	mv	a6,a4
20407320:	fcf42c23          	sw	a5,-40(s0)
20407324:	fd042e23          	sw	a6,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:290

        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI0_RXDATA)) & METAL_SPI_RXDATA_EMPTY) {
20407328:	a83d                	j	20407366 <__metal_driver_sifive_spi0_transfer+0x40e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:291
            if (metal_time() > endwait) {
2040732a:	577000ef          	jal	ra,204080a0 <metal_time>
2040732e:	87aa                	mv	a5,a0
20407330:	882e                	mv	a6,a1
20407332:	fdc42703          	lw	a4,-36(s0)
20407336:	86c2                	mv	a3,a6
20407338:	00d74c63          	blt	a4,a3,20407350 <__metal_driver_sifive_spi0_transfer+0x3f8>
2040733c:	fdc42703          	lw	a4,-36(s0)
20407340:	86c2                	mv	a3,a6
20407342:	02d71263          	bne	a4,a3,20407366 <__metal_driver_sifive_spi0_transfer+0x40e>
20407346:	fd842703          	lw	a4,-40(s0)
2040734a:	00f76363          	bltu	a4,a5,20407350 <__metal_driver_sifive_spi0_transfer+0x3f8>
2040734e:	a821                	j	20407366 <__metal_driver_sifive_spi0_transfer+0x40e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:293
                /* If timeout, deassert the CS */
                METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSMODE) &= ~(METAL_SPI_CSMODE_MASK);
20407350:	fe442783          	lw	a5,-28(s0)
20407354:	07e1                	addi	a5,a5,24
20407356:	439c                	lw	a5,0(a5)
20407358:	fe442703          	lw	a4,-28(s0)
2040735c:	0761                	addi	a4,a4,24
2040735e:	9bf1                	andi	a5,a5,-4
20407360:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:296

                /* If timeout, return error code 1 immediately */
                return 1;
20407362:	4785                	li	a5,1
20407364:	a8a1                	j	204073bc <__metal_driver_sifive_spi0_transfer+0x464>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:290
        while ((rxdata = METAL_SPI_REGW(METAL_SIFIVE_SPI0_RXDATA)) & METAL_SPI_RXDATA_EMPTY) {
20407366:	fe442783          	lw	a5,-28(s0)
2040736a:	04c78793          	addi	a5,a5,76
2040736e:	439c                	lw	a5,0(a5)
20407370:	fcf42a23          	sw	a5,-44(s0)
20407374:	fd442783          	lw	a5,-44(s0)
20407378:	fa07c9e3          	bltz	a5,2040732a <__metal_driver_sifive_spi0_transfer+0x3d2>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:301
            }
        }

        /* Only store the dequeued byte if the receive_buffer is not NULL */
        if (rx_buf) {
2040737c:	fbc42783          	lw	a5,-68(s0)
20407380:	cf81                	beqz	a5,20407398 <__metal_driver_sifive_spi0_transfer+0x440>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:302
            rx_buf[i] = (char) (rxdata & METAL_SPI_TXRXDATA_MASK);
20407382:	fbc42703          	lw	a4,-68(s0)
20407386:	fec42783          	lw	a5,-20(s0)
2040738a:	97ba                	add	a5,a5,a4
2040738c:	fd442703          	lw	a4,-44(s0)
20407390:	0ff77713          	andi	a4,a4,255
20407394:	00e78023          	sb	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:269
    for (; i < len; i++) {
20407398:	fec42783          	lw	a5,-20(s0)
2040739c:	0785                	addi	a5,a5,1
2040739e:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:269 (discriminator 1)
204073a2:	fec42703          	lw	a4,-20(s0)
204073a6:	fc442783          	lw	a5,-60(s0)
204073aa:	f0f76ce3          	bltu	a4,a5,204072c2 <__metal_driver_sifive_spi0_transfer+0x36a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:312
     * The reason that CS pin is not deasserted after transmitting out the byte buffer is timing.
     * The code on the host side likely executes faster than the ability of FIFO to send out bytes.
     * After the host iterates through the array, fifo is likely not cleared yet. If host deasserts
     * the CS pin immediately, the following bytes in the output FIFO will not be sent consecutively. 
     * There needs to be a better way to handle this. */
    METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSDEF) = 1;
204073ae:	fe442783          	lw	a5,-28(s0)
204073b2:	07d1                	addi	a5,a5,20
204073b4:	873e                	mv	a4,a5
204073b6:	4785                	li	a5,1
204073b8:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:315
    //METAL_SPI_REGW(METAL_SIFIVE_SPI0_CSMODE) &= ~(METAL_SPI_CSMODE_MASK);

    return 0;
204073ba:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:316
}
204073bc:	853e                	mv	a0,a5
204073be:	40b6                	lw	ra,76(sp)
204073c0:	4426                	lw	s0,72(sp)
204073c2:	6161                	addi	sp,sp,80
204073c4:	8082                	ret

204073c6 <__metal_driver_sifive_spi0_get_baud_rate>:
__metal_driver_sifive_spi0_get_baud_rate():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:319

int __metal_driver_sifive_spi0_get_baud_rate(struct metal_spi *gspi)
{
204073c6:	7179                	addi	sp,sp,-48
204073c8:	d622                	sw	s0,44(sp)
204073ca:	1800                	addi	s0,sp,48
204073cc:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:320
    struct __metal_driver_sifive_spi0 *spi = (void *)gspi;
204073d0:	fdc42783          	lw	a5,-36(s0)
204073d4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:321
    return spi->baud_rate;
204073d8:	fec42783          	lw	a5,-20(s0)
204073dc:	43dc                	lw	a5,4(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:322
}
204073de:	853e                	mv	a0,a5
204073e0:	5432                	lw	s0,44(sp)
204073e2:	6145                	addi	sp,sp,48
204073e4:	8082                	ret

204073e6 <__metal_driver_sifive_spi0_set_baud_rate>:
__metal_driver_sifive_spi0_set_baud_rate():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:325

int __metal_driver_sifive_spi0_set_baud_rate(struct metal_spi *gspi, int baud_rate)
{
204073e6:	7139                	addi	sp,sp,-64
204073e8:	de06                	sw	ra,60(sp)
204073ea:	dc22                	sw	s0,56(sp)
204073ec:	0080                	addi	s0,sp,64
204073ee:	fca42623          	sw	a0,-52(s0)
204073f2:	fcb42423          	sw	a1,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:326
    long control_base = __metal_driver_sifive_spi0_control_base(gspi);
204073f6:	fcc42503          	lw	a0,-52(s0)
204073fa:	f38ff0ef          	jal	ra,20406b32 <__metal_driver_sifive_spi0_control_base>
204073fe:	87aa                	mv	a5,a0
20407400:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:327
    struct metal_clock *clock = __metal_driver_sifive_spi0_clock(gspi);
20407404:	fcc42503          	lw	a0,-52(s0)
20407408:	f6aff0ef          	jal	ra,20406b72 <__metal_driver_sifive_spi0_clock>
2040740c:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:328
    struct __metal_driver_sifive_spi0 *spi = (void *)gspi;
20407410:	fcc42783          	lw	a5,-52(s0)
20407414:	fef42223          	sw	a5,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:330

    spi->baud_rate = baud_rate;
20407418:	fc842703          	lw	a4,-56(s0)
2040741c:	fe442783          	lw	a5,-28(s0)
20407420:	c3d8                	sw	a4,4(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:332

    if (clock != NULL) {
20407422:	fe842783          	lw	a5,-24(s0)
20407426:	cfb9                	beqz	a5,20407484 <__metal_driver_sifive_spi0_set_baud_rate+0x9e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:333
        long clock_rate = clock->vtable->get_rate_hz(clock);
20407428:	fe842783          	lw	a5,-24(s0)
2040742c:	439c                	lw	a5,0(a5)
2040742e:	439c                	lw	a5,0(a5)
20407430:	fe842503          	lw	a0,-24(s0)
20407434:	9782                	jalr	a5
20407436:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:336

        /* Calculate divider */
        long div = (clock_rate / (2 * baud_rate)) - 1;
2040743a:	fc842783          	lw	a5,-56(s0)
2040743e:	0786                	slli	a5,a5,0x1
20407440:	fe042703          	lw	a4,-32(s0)
20407444:	02f747b3          	div	a5,a4,a5
20407448:	17fd                	addi	a5,a5,-1
2040744a:	fcf42e23          	sw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:338

        if(div > METAL_SPI_SCKDIV_MASK) {
2040744e:	fdc42703          	lw	a4,-36(s0)
20407452:	6785                	lui	a5,0x1
20407454:	00f74463          	blt	a4,a5,2040745c <__metal_driver_sifive_spi0_set_baud_rate+0x76>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:341
            /* The requested baud rate is lower than we can support at
             * the current clock rate */
            return -1;
20407458:	57fd                	li	a5,-1
2040745a:	a035                	j	20407486 <__metal_driver_sifive_spi0_set_baud_rate+0xa0>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:345
        }

        /* Set divider */
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_SCKDIV) &= ~METAL_SPI_SCKDIV_MASK;
2040745c:	fec42783          	lw	a5,-20(s0)
20407460:	4394                	lw	a3,0(a5)
20407462:	fec42783          	lw	a5,-20(s0)
20407466:	777d                	lui	a4,0xfffff
20407468:	8f75                	and	a4,a4,a3
2040746a:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:346
        METAL_SPI_REGW(METAL_SIFIVE_SPI0_SCKDIV) |= (div & METAL_SPI_SCKDIV_MASK);
2040746c:	fec42783          	lw	a5,-20(s0)
20407470:	4394                	lw	a3,0(a5)
20407472:	fdc42703          	lw	a4,-36(s0)
20407476:	6785                	lui	a5,0x1
20407478:	17fd                	addi	a5,a5,-1
2040747a:	8f7d                	and	a4,a4,a5
2040747c:	fec42783          	lw	a5,-20(s0)
20407480:	8f55                	or	a4,a4,a3
20407482:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:349
    }

    return 0;
20407484:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:350
}
20407486:	853e                	mv	a0,a5
20407488:	50f2                	lw	ra,60(sp)
2040748a:	5462                	lw	s0,56(sp)
2040748c:	6121                	addi	sp,sp,64
2040748e:	8082                	ret

20407490 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:353

static void pre_rate_change_callback_func(void *priv)
{
20407490:	7179                	addi	sp,sp,-48
20407492:	d606                	sw	ra,44(sp)
20407494:	d422                	sw	s0,40(sp)
20407496:	1800                	addi	s0,sp,48
20407498:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:354
    long control_base = __metal_driver_sifive_spi0_control_base((struct metal_spi *)priv);
2040749c:	fdc42503          	lw	a0,-36(s0)
204074a0:	e92ff0ef          	jal	ra,20406b32 <__metal_driver_sifive_spi0_control_base>
204074a4:	87aa                	mv	a5,a0
204074a6:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:358

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending (indicating an empty TXFIFO) */
    METAL_SPI_REGW(METAL_SIFIVE_SPI0_TXMARK) &= ~(METAL_SPI_TXMARK_MASK);
204074aa:	fec42783          	lw	a5,-20(s0)
204074ae:	05078793          	addi	a5,a5,80 # 1050 <__heap_size+0x850>
204074b2:	439c                	lw	a5,0(a5)
204074b4:	fec42703          	lw	a4,-20(s0)
204074b8:	05070713          	addi	a4,a4,80 # fffff050 <metal_segment_heap_target_end+0x7fffb79c>
204074bc:	9be1                	andi	a5,a5,-8
204074be:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:359
    METAL_SPI_REGW(METAL_SIFIVE_SPI0_TXMARK) |= (METAL_SPI_TXMARK_MASK & 1);
204074c0:	fec42783          	lw	a5,-20(s0)
204074c4:	05078793          	addi	a5,a5,80
204074c8:	439c                	lw	a5,0(a5)
204074ca:	fec42703          	lw	a4,-20(s0)
204074ce:	05070713          	addi	a4,a4,80
204074d2:	0017e793          	ori	a5,a5,1
204074d6:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:361

    while((METAL_SPI_REGW(METAL_SIFIVE_SPI0_IP) & METAL_SPI_TXWM) == 0) ;
204074d8:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:361 (discriminator 1)
204074da:	fec42783          	lw	a5,-20(s0)
204074de:	07478793          	addi	a5,a5,116
204074e2:	439c                	lw	a5,0(a5)
204074e4:	8b85                	andi	a5,a5,1
204074e6:	dbf5                	beqz	a5,204074da <pre_rate_change_callback_func+0x4a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:362
}
204074e8:	0001                	nop
204074ea:	50b2                	lw	ra,44(sp)
204074ec:	5422                	lw	s0,40(sp)
204074ee:	6145                	addi	sp,sp,48
204074f0:	8082                	ret

204074f2 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:365

static void post_rate_change_callback_func(void *priv)
{
204074f2:	7179                	addi	sp,sp,-48
204074f4:	d606                	sw	ra,44(sp)
204074f6:	d422                	sw	s0,40(sp)
204074f8:	1800                	addi	s0,sp,48
204074fa:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:366
    struct __metal_driver_sifive_spi0 *spi = priv;
204074fe:	fdc42783          	lw	a5,-36(s0)
20407502:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:367
    metal_spi_set_baud_rate(&spi->spi, spi->baud_rate);
20407506:	fec42703          	lw	a4,-20(s0)
2040750a:	fec42783          	lw	a5,-20(s0)
2040750e:	43dc                	lw	a5,4(a5)
20407510:	85be                	mv	a1,a5
20407512:	853a                	mv	a0,a4
20407514:	247000ef          	jal	ra,20407f5a <metal_spi_set_baud_rate>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:368
}
20407518:	0001                	nop
2040751a:	50b2                	lw	ra,44(sp)
2040751c:	5422                	lw	s0,40(sp)
2040751e:	6145                	addi	sp,sp,48
20407520:	8082                	ret

20407522 <__metal_driver_sifive_spi0_init>:
__metal_driver_sifive_spi0_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:371

void __metal_driver_sifive_spi0_init(struct metal_spi *gspi, int baud_rate)
{
20407522:	7139                	addi	sp,sp,-64
20407524:	de06                	sw	ra,60(sp)
20407526:	dc22                	sw	s0,56(sp)
20407528:	0080                	addi	s0,sp,64
2040752a:	fca42623          	sw	a0,-52(s0)
2040752e:	fcb42423          	sw	a1,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:372
    struct __metal_driver_sifive_spi0 *spi = (void *)(gspi);
20407532:	fcc42783          	lw	a5,-52(s0)
20407536:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:373
    struct metal_clock *clock = __metal_driver_sifive_spi0_clock(gspi);
2040753a:	fcc42503          	lw	a0,-52(s0)
2040753e:	e34ff0ef          	jal	ra,20406b72 <__metal_driver_sifive_spi0_clock>
20407542:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:374
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_spi0_pinmux(gspi);
20407546:	fcc42503          	lw	a0,-52(s0)
2040754a:	e70ff0ef          	jal	ra,20406bba <__metal_driver_sifive_spi0_pinmux>
2040754e:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:376

    if(clock != NULL) {
20407552:	fe842783          	lw	a5,-24(s0)
20407556:	c7b9                	beqz	a5,204075a4 <__metal_driver_sifive_spi0_init+0x82>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:377
        spi->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20407558:	fec42783          	lw	a5,-20(s0)
2040755c:	20407737          	lui	a4,0x20407
20407560:	49070713          	addi	a4,a4,1168 # 20407490 <pre_rate_change_callback_func>
20407564:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:378
        spi->pre_rate_change_callback.priv = spi;
20407566:	fec42783          	lw	a5,-20(s0)
2040756a:	fec42703          	lw	a4,-20(s0)
2040756e:	c7d8                	sw	a4,12(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:379
        metal_clock_register_pre_rate_change_callback(clock, &(spi->pre_rate_change_callback));
20407570:	fec42783          	lw	a5,-20(s0)
20407574:	07a1                	addi	a5,a5,8
20407576:	85be                	mv	a1,a5
20407578:	fe842503          	lw	a0,-24(s0)
2040757c:	2d81                	jal	20407bcc <metal_clock_register_pre_rate_change_callback>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:381

        spi->post_rate_change_callback.callback = &post_rate_change_callback_func;
2040757e:	fec42783          	lw	a5,-20(s0)
20407582:	20407737          	lui	a4,0x20407
20407586:	4f270713          	addi	a4,a4,1266 # 204074f2 <post_rate_change_callback_func>
2040758a:	cbd8                	sw	a4,20(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:382
        spi->post_rate_change_callback.priv = spi;
2040758c:	fec42783          	lw	a5,-20(s0)
20407590:	fec42703          	lw	a4,-20(s0)
20407594:	cf98                	sw	a4,24(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:383
        metal_clock_register_post_rate_change_callback(clock, &(spi->post_rate_change_callback));
20407596:	fec42783          	lw	a5,-20(s0)
2040759a:	07d1                	addi	a5,a5,20
2040759c:	85be                	mv	a1,a5
2040759e:	fe842503          	lw	a0,-24(s0)
204075a2:	2db1                	jal	20407bfe <metal_clock_register_post_rate_change_callback>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:386
    }

    metal_spi_set_baud_rate(&(spi->spi), baud_rate);
204075a4:	fec42783          	lw	a5,-20(s0)
204075a8:	fc842583          	lw	a1,-56(s0)
204075ac:	853e                	mv	a0,a5
204075ae:	1ad000ef          	jal	ra,20407f5a <metal_spi_set_baud_rate>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:388

    if (pinmux != NULL) {
204075b2:	fe442783          	lw	a5,-28(s0)
204075b6:	cb95                	beqz	a5,204075ea <__metal_driver_sifive_spi0_init+0xc8>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:389
        long pinmux_output_selector = __metal_driver_sifive_spi0_pinmux_output_selector(gspi);
204075b8:	fcc42503          	lw	a0,-52(s0)
204075bc:	e3eff0ef          	jal	ra,20406bfa <__metal_driver_sifive_spi0_pinmux_output_selector>
204075c0:	87aa                	mv	a5,a0
204075c2:	fef42023          	sw	a5,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:390
        long pinmux_source_selector = __metal_driver_sifive_spi0_pinmux_source_selector(gspi);
204075c6:	fcc42503          	lw	a0,-52(s0)
204075ca:	e6eff0ef          	jal	ra,20406c38 <__metal_driver_sifive_spi0_pinmux_source_selector>
204075ce:	87aa                	mv	a5,a0
204075d0:	fcf42e23          	sw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:391
        pinmux->gpio.vtable->enable_io(
204075d4:	fe442783          	lw	a5,-28(s0)
204075d8:	439c                	lw	a5,0(a5)
204075da:	53dc                	lw	a5,36(a5)
204075dc:	fdc42603          	lw	a2,-36(s0)
204075e0:	fe042583          	lw	a1,-32(s0)
204075e4:	fe442503          	lw	a0,-28(s0)
204075e8:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_spi0.c:397
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
204075ea:	0001                	nop
204075ec:	50f2                	lw	ra,60(sp)
204075ee:	5462                	lw	s0,56(sp)
204075f0:	6121                	addi	sp,sp,64
204075f2:	8082                	ret

204075f4 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:731
{
204075f4:	1101                	addi	sp,sp,-32
204075f6:	ce22                	sw	s0,28(sp)
204075f8:	1000                	addi	s0,sp,32
204075fa:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:732
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204075fe:	fec42703          	lw	a4,-20(s0)
20407602:	800007b7          	lui	a5,0x80000
20407606:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
2040760a:	00f71563          	bne	a4,a5,20407614 <__metal_driver_sifive_uart0_control_base+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:733
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
2040760e:	100137b7          	lui	a5,0x10013
20407612:	a011                	j	20407616 <__metal_driver_sifive_uart0_control_base+0x22>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:736
		return 0;
20407614:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:738
}
20407616:	853e                	mv	a0,a5
20407618:	4472                	lw	s0,28(sp)
2040761a:	6105                	addi	sp,sp,32
2040761c:	8082                	ret

2040761e <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:761
{
2040761e:	1101                	addi	sp,sp,-32
20407620:	ce22                	sw	s0,28(sp)
20407622:	1000                	addi	s0,sp,32
20407624:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:762
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20407628:	fec42703          	lw	a4,-20(s0)
2040762c:	800007b7          	lui	a5,0x80000
20407630:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
20407634:	00f71763          	bne	a4,a5,20407642 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:763
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20407638:	800007b7          	lui	a5,0x80000
2040763c:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffcb8c>
20407640:	a011                	j	20407644 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:766
		return 0;
20407642:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:768
}
20407644:	853e                	mv	a0,a5
20407646:	4472                	lw	s0,28(sp)
20407648:	6105                	addi	sp,sp,32
2040764a:	8082                	ret

2040764c <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:771
{
2040764c:	1101                	addi	sp,sp,-32
2040764e:	ce22                	sw	s0,28(sp)
20407650:	1000                	addi	s0,sp,32
20407652:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:772
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20407656:	fec42703          	lw	a4,-20(s0)
2040765a:	800007b7          	lui	a5,0x80000
2040765e:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
20407662:	00f71463          	bne	a4,a5,2040766a <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:773
		return 5;
20407666:	4795                	li	a5,5
20407668:	a011                	j	2040766c <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:776
		return 0;
2040766a:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:778
}
2040766c:	853e                	mv	a0,a5
2040766e:	4472                	lw	s0,28(sp)
20407670:	6105                	addi	sp,sp,32
20407672:	8082                	ret

20407674 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:781
{
20407674:	1101                	addi	sp,sp,-32
20407676:	ce22                	sw	s0,28(sp)
20407678:	1000                	addi	s0,sp,32
2040767a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:782
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040767e:	fec42703          	lw	a4,-20(s0)
20407682:	800007b7          	lui	a5,0x80000
20407686:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
2040768a:	00f71763          	bne	a4,a5,20407698 <__metal_driver_sifive_uart0_clock+0x24>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:783
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
2040768e:	800007b7          	lui	a5,0x80000
20407692:	7b878793          	addi	a5,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xffffcf04>
20407696:	a011                	j	2040769a <__metal_driver_sifive_uart0_clock+0x26>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:786
		return 0;
20407698:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:788
}
2040769a:	853e                	mv	a0,a5
2040769c:	4472                	lw	s0,28(sp)
2040769e:	6105                	addi	sp,sp,32
204076a0:	8082                	ret

204076a2 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:791
{
204076a2:	1101                	addi	sp,sp,-32
204076a4:	ce22                	sw	s0,28(sp)
204076a6:	1000                	addi	s0,sp,32
204076a8:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:792
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204076ac:	fec42703          	lw	a4,-20(s0)
204076b0:	800007b7          	lui	a5,0x80000
204076b4:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
204076b8:	00f71563          	bne	a4,a5,204076c2 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:793
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
204076bc:	82418793          	addi	a5,gp,-2012 # 800007ec <__metal_dt_gpio_10012000>
204076c0:	a011                	j	204076c4 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:796
		return 0;
204076c2:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:798
}
204076c4:	853e                	mv	a0,a5
204076c6:	4472                	lw	s0,28(sp)
204076c8:	6105                	addi	sp,sp,32
204076ca:	8082                	ret

204076cc <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:801
{
204076cc:	1101                	addi	sp,sp,-32
204076ce:	ce22                	sw	s0,28(sp)
204076d0:	1000                	addi	s0,sp,32
204076d2:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:802
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204076d6:	fec42703          	lw	a4,-20(s0)
204076da:	800007b7          	lui	a5,0x80000
204076de:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
204076e2:	00f71563          	bne	a4,a5,204076ec <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:803
		return 196608;
204076e6:	000307b7          	lui	a5,0x30
204076ea:	a011                	j	204076ee <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:806
		return 0;
204076ec:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:808
}
204076ee:	853e                	mv	a0,a5
204076f0:	4472                	lw	s0,28(sp)
204076f2:	6105                	addi	sp,sp,32
204076f4:	8082                	ret

204076f6 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:811
{
204076f6:	1101                	addi	sp,sp,-32
204076f8:	ce22                	sw	s0,28(sp)
204076fa:	1000                	addi	s0,sp,32
204076fc:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:812
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20407700:	fec42703          	lw	a4,-20(s0)
20407704:	800007b7          	lui	a5,0x80000
20407708:	78078793          	addi	a5,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
2040770c:	00f71563          	bne	a4,a5,20407716 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:813
		return 196608;
20407710:	000307b7          	lui	a5,0x30
20407714:	a011                	j	20407718 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:816
		return 0;
20407716:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:818
}
20407718:	853e                	mv	a0,a5
2040771a:	4472                	lw	s0,28(sp)
2040771c:	6105                	addi	sp,sp,32
2040771e:	8082                	ret

20407720 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20407720:	1101                	addi	sp,sp,-32
20407722:	ce06                	sw	ra,28(sp)
20407724:	cc22                	sw	s0,24(sp)
20407726:	1000                	addi	s0,sp,32
20407728:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
2040772c:	fec42503          	lw	a0,-20(s0)
20407730:	eefff0ef          	jal	ra,2040761e <__metal_driver_sifive_uart0_interrupt_parent>
20407734:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20407736:	853e                	mv	a0,a5
20407738:	40f2                	lw	ra,28(sp)
2040773a:	4462                	lw	s0,24(sp)
2040773c:	6105                	addi	sp,sp,32
2040773e:	8082                	ret

20407740 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20407740:	1101                	addi	sp,sp,-32
20407742:	ce06                	sw	ra,28(sp)
20407744:	cc22                	sw	s0,24(sp)
20407746:	1000                	addi	s0,sp,32
20407748:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
2040774c:	fec42503          	lw	a0,-20(s0)
20407750:	efdff0ef          	jal	ra,2040764c <__metal_driver_sifive_uart0_interrupt_line>
20407754:	87aa                	mv	a5,a0
20407756:	02078793          	addi	a5,a5,32 # 30020 <__stack_size+0x2d820>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
2040775a:	853e                	mv	a0,a5
2040775c:	40f2                	lw	ra,28(sp)
2040775e:	4462                	lw	s0,24(sp)
20407760:	6105                	addi	sp,sp,32
20407762:	8082                	ret

20407764 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20407764:	7179                	addi	sp,sp,-48
20407766:	d606                	sw	ra,44(sp)
20407768:	d422                	sw	s0,40(sp)
2040776a:	1800                	addi	s0,sp,48
2040776c:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20407770:	fdc42503          	lw	a0,-36(s0)
20407774:	e81ff0ef          	jal	ra,204075f4 <__metal_driver_sifive_uart0_control_base>
20407778:	87aa                	mv	a5,a0
2040777a:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
2040777e:	fec42783          	lw	a5,-20(s0)
20407782:	439c                	lw	a5,0(a5)
20407784:	fff7c793          	not	a5,a5
20407788:	83fd                	srli	a5,a5,0x1f
2040778a:	0ff7f793          	andi	a5,a5,255
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
2040778e:	853e                	mv	a0,a5
20407790:	50b2                	lw	ra,44(sp)
20407792:	5422                	lw	s0,40(sp)
20407794:	6145                	addi	sp,sp,48
20407796:	8082                	ret

20407798 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20407798:	7179                	addi	sp,sp,-48
2040779a:	d606                	sw	ra,44(sp)
2040779c:	d422                	sw	s0,40(sp)
2040779e:	1800                	addi	s0,sp,48
204077a0:	fca42e23          	sw	a0,-36(s0)
204077a4:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204077a8:	fdc42503          	lw	a0,-36(s0)
204077ac:	e49ff0ef          	jal	ra,204075f4 <__metal_driver_sifive_uart0_control_base>
204077b0:	87aa                	mv	a5,a0
204077b2:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
204077b6:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
204077b8:	fdc42503          	lw	a0,-36(s0)
204077bc:	fa9ff0ef          	jal	ra,20407764 <__metal_driver_sifive_uart0_txready>
204077c0:	87aa                	mv	a5,a0
204077c2:	dbfd                	beqz	a5,204077b8 <__metal_driver_sifive_uart0_putc+0x20>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
204077c4:	fec42783          	lw	a5,-20(s0)
204077c8:	fd842703          	lw	a4,-40(s0)
204077cc:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
204077ce:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
204077d0:	853e                	mv	a0,a5
204077d2:	50b2                	lw	ra,44(sp)
204077d4:	5422                	lw	s0,40(sp)
204077d6:	6145                	addi	sp,sp,48
204077d8:	8082                	ret

204077da <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
204077da:	7179                	addi	sp,sp,-48
204077dc:	d606                	sw	ra,44(sp)
204077de:	d422                	sw	s0,40(sp)
204077e0:	1800                	addi	s0,sp,48
204077e2:	fca42e23          	sw	a0,-36(s0)
204077e6:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204077ea:	fdc42503          	lw	a0,-36(s0)
204077ee:	e07ff0ef          	jal	ra,204075f4 <__metal_driver_sifive_uart0_control_base>
204077f2:	87aa                	mv	a5,a0
204077f4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
204077f8:	fec42783          	lw	a5,-20(s0)
204077fc:	0791                	addi	a5,a5,4
204077fe:	439c                	lw	a5,0(a5)
20407800:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20407804:	fe842783          	lw	a5,-24(s0)
20407808:	0007d763          	bgez	a5,20407816 <__metal_driver_sifive_uart0_getc+0x3c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
2040780c:	fd842783          	lw	a5,-40(s0)
20407810:	577d                	li	a4,-1
20407812:	c398                	sw	a4,0(a5)
20407814:	a801                	j	20407824 <__metal_driver_sifive_uart0_getc+0x4a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20407816:	fe842783          	lw	a5,-24(s0)
2040781a:	0ff7f713          	andi	a4,a5,255
2040781e:	fd842783          	lw	a5,-40(s0)
20407822:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20407824:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20407826:	853e                	mv	a0,a5
20407828:	50b2                	lw	ra,44(sp)
2040782a:	5422                	lw	s0,40(sp)
2040782c:	6145                	addi	sp,sp,48
2040782e:	8082                	ret

20407830 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20407830:	7179                	addi	sp,sp,-48
20407832:	d622                	sw	s0,44(sp)
20407834:	1800                	addi	s0,sp,48
20407836:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
2040783a:	fdc42783          	lw	a5,-36(s0)
2040783e:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20407842:	fec42783          	lw	a5,-20(s0)
20407846:	43dc                	lw	a5,4(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20407848:	853e                	mv	a0,a5
2040784a:	5432                	lw	s0,44(sp)
2040784c:	6145                	addi	sp,sp,48
2040784e:	8082                	ret

20407850 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20407850:	7179                	addi	sp,sp,-48
20407852:	d606                	sw	ra,44(sp)
20407854:	d422                	sw	s0,40(sp)
20407856:	1800                	addi	s0,sp,48
20407858:	fca42e23          	sw	a0,-36(s0)
2040785c:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20407860:	fdc42783          	lw	a5,-36(s0)
20407864:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20407868:	fdc42503          	lw	a0,-36(s0)
2040786c:	d89ff0ef          	jal	ra,204075f4 <__metal_driver_sifive_uart0_control_base>
20407870:	87aa                	mv	a5,a0
20407872:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20407876:	fdc42503          	lw	a0,-36(s0)
2040787a:	dfbff0ef          	jal	ra,20407674 <__metal_driver_sifive_uart0_clock>
2040787e:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20407882:	fd842703          	lw	a4,-40(s0)
20407886:	fec42783          	lw	a5,-20(s0)
2040788a:	c3d8                	sw	a4,4(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
2040788c:	fe442783          	lw	a5,-28(s0)
20407890:	cbb1                	beqz	a5,204078e4 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20407892:	fe442783          	lw	a5,-28(s0)
20407896:	439c                	lw	a5,0(a5)
20407898:	439c                	lw	a5,0(a5)
2040789a:	fe442503          	lw	a0,-28(s0)
2040789e:	9782                	jalr	a5
204078a0:	fea42023          	sw	a0,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
204078a4:	fe042703          	lw	a4,-32(s0)
204078a8:	fd842783          	lw	a5,-40(s0)
204078ac:	02f747b3          	div	a5,a4,a5
204078b0:	fff78713          	addi	a4,a5,-1
204078b4:	fe842783          	lw	a5,-24(s0)
204078b8:	07e1                	addi	a5,a5,24
204078ba:	c398                	sw	a4,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
204078bc:	fe842783          	lw	a5,-24(s0)
204078c0:	07a1                	addi	a5,a5,8
204078c2:	439c                	lw	a5,0(a5)
204078c4:	fe842703          	lw	a4,-24(s0)
204078c8:	0721                	addi	a4,a4,8
204078ca:	0017e793          	ori	a5,a5,1
204078ce:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
204078d0:	fe842783          	lw	a5,-24(s0)
204078d4:	07b1                	addi	a5,a5,12
204078d6:	439c                	lw	a5,0(a5)
204078d8:	fe842703          	lw	a4,-24(s0)
204078dc:	0731                	addi	a4,a4,12
204078de:	0017e793          	ori	a5,a5,1
204078e2:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
204078e4:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
204078e6:	853e                	mv	a0,a5
204078e8:	50b2                	lw	ra,44(sp)
204078ea:	5422                	lw	s0,40(sp)
204078ec:	6145                	addi	sp,sp,48
204078ee:	8082                	ret

204078f0 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
204078f0:	7139                	addi	sp,sp,-64
204078f2:	de06                	sw	ra,60(sp)
204078f4:	dc22                	sw	s0,56(sp)
204078f6:	0080                	addi	s0,sp,64
204078f8:	fca42623          	sw	a0,-52(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
204078fc:	fcc42783          	lw	a5,-52(s0)
20407900:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20407904:	fcc42503          	lw	a0,-52(s0)
20407908:	cedff0ef          	jal	ra,204075f4 <__metal_driver_sifive_uart0_control_base>
2040790c:	87aa                	mv	a5,a0
2040790e:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20407912:	fcc42503          	lw	a0,-52(s0)
20407916:	d5fff0ef          	jal	ra,20407674 <__metal_driver_sifive_uart0_clock>
2040791a:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
2040791e:	fe842783          	lw	a5,-24(s0)
20407922:	07a1                	addi	a5,a5,8
20407924:	4398                	lw	a4,0(a5)
20407926:	fe842783          	lw	a5,-24(s0)
2040792a:	07a1                	addi	a5,a5,8
2040792c:	86be                	mv	a3,a5
2040792e:	fff907b7          	lui	a5,0xfff90
20407932:	17fd                	addi	a5,a5,-1
20407934:	8ff9                	and	a5,a5,a4
20407936:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20407938:	fe842783          	lw	a5,-24(s0)
2040793c:	07a1                	addi	a5,a5,8
2040793e:	4398                	lw	a4,0(a5)
20407940:	fe842783          	lw	a5,-24(s0)
20407944:	07a1                	addi	a5,a5,8
20407946:	86be                	mv	a3,a5
20407948:	67c1                	lui	a5,0x10
2040794a:	8fd9                	or	a5,a5,a4
2040794c:	c29c                	sw	a5,0(a3)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
2040794e:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20407950:	fe842783          	lw	a5,-24(s0)
20407954:	07d1                	addi	a5,a5,20
20407956:	439c                	lw	a5,0(a5)
20407958:	8b85                	andi	a5,a5,1
2040795a:	dbfd                	beqz	a5,20407950 <pre_rate_change_callback_func+0x60>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040795c:	fe842783          	lw	a5,-24(s0)
20407960:	07a1                	addi	a5,a5,8
20407962:	439c                	lw	a5,0(a5)
20407964:	8b89                	andi	a5,a5,2
20407966:	c399                	beqz	a5,2040796c <pre_rate_change_callback_func+0x7c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20407968:	47a5                	li	a5,9
2040796a:	a011                	j	2040796e <pre_rate_change_callback_func+0x7e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
2040796c:	47a9                	li	a5,10
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
2040796e:	fef42023          	sw	a5,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20407972:	fe442783          	lw	a5,-28(s0)
20407976:	439c                	lw	a5,0(a5)
20407978:	439c                	lw	a5,0(a5)
2040797a:	fe442503          	lw	a0,-28(s0)
2040797e:	9782                	jalr	a5
20407980:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20407984:	fe042703          	lw	a4,-32(s0)
20407988:	fdc42783          	lw	a5,-36(s0)
2040798c:	02f707b3          	mul	a5,a4,a5
20407990:	873e                	mv	a4,a5
20407992:	fec42783          	lw	a5,-20(s0)
20407996:	43dc                	lw	a5,4(a5)
20407998:	02f757b3          	divu	a5,a4,a5
2040799c:	fcf42c23          	sw	a5,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
204079a0:	fc042a23          	sw	zero,-44(s0)
204079a4:	a039                	j	204079b2 <pre_rate_change_callback_func+0xc2>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
204079a6:	0001                	nop
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
204079a8:	fd442783          	lw	a5,-44(s0)
204079ac:	0785                	addi	a5,a5,1
204079ae:	fcf42a23          	sw	a5,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
204079b2:	fd442783          	lw	a5,-44(s0)
204079b6:	fd842703          	lw	a4,-40(s0)
204079ba:	fee7c6e3          	blt	a5,a4,204079a6 <pre_rate_change_callback_func+0xb6>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
204079be:	0001                	nop
204079c0:	50f2                	lw	ra,60(sp)
204079c2:	5462                	lw	s0,56(sp)
204079c4:	6121                	addi	sp,sp,64
204079c6:	8082                	ret

204079c8 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
204079c8:	7179                	addi	sp,sp,-48
204079ca:	d606                	sw	ra,44(sp)
204079cc:	d422                	sw	s0,40(sp)
204079ce:	1800                	addi	s0,sp,48
204079d0:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
204079d4:	fdc42783          	lw	a5,-36(s0)
204079d8:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
204079dc:	fec42703          	lw	a4,-20(s0)
204079e0:	fec42783          	lw	a5,-20(s0)
204079e4:	43dc                	lw	a5,4(a5)
204079e6:	85be                	mv	a1,a5
204079e8:	853a                	mv	a0,a4
204079ea:	27a9                	jal	20408134 <metal_uart_set_baud_rate>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
204079ec:	0001                	nop
204079ee:	50b2                	lw	ra,44(sp)
204079f0:	5422                	lw	s0,40(sp)
204079f2:	6145                	addi	sp,sp,48
204079f4:	8082                	ret

204079f6 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
204079f6:	7139                	addi	sp,sp,-64
204079f8:	de06                	sw	ra,60(sp)
204079fa:	dc22                	sw	s0,56(sp)
204079fc:	0080                	addi	s0,sp,64
204079fe:	fca42623          	sw	a0,-52(s0)
20407a02:	fcb42423          	sw	a1,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20407a06:	fcc42783          	lw	a5,-52(s0)
20407a0a:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20407a0e:	fcc42503          	lw	a0,-52(s0)
20407a12:	c63ff0ef          	jal	ra,20407674 <__metal_driver_sifive_uart0_clock>
20407a16:	fea42423          	sw	a0,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20407a1a:	fcc42503          	lw	a0,-52(s0)
20407a1e:	c85ff0ef          	jal	ra,204076a2 <__metal_driver_sifive_uart0_pinmux>
20407a22:	fea42223          	sw	a0,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20407a26:	fe842783          	lw	a5,-24(s0)
20407a2a:	c7b9                	beqz	a5,20407a78 <__metal_driver_sifive_uart0_init+0x82>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20407a2c:	fec42783          	lw	a5,-20(s0)
20407a30:	20408737          	lui	a4,0x20408
20407a34:	8f070713          	addi	a4,a4,-1808 # 204078f0 <pre_rate_change_callback_func>
20407a38:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20407a3a:	fec42783          	lw	a5,-20(s0)
20407a3e:	fcc42703          	lw	a4,-52(s0)
20407a42:	c7d8                	sw	a4,12(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20407a44:	fec42783          	lw	a5,-20(s0)
20407a48:	07a1                	addi	a5,a5,8
20407a4a:	85be                	mv	a1,a5
20407a4c:	fe842503          	lw	a0,-24(s0)
20407a50:	2ab5                	jal	20407bcc <metal_clock_register_pre_rate_change_callback>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20407a52:	fec42783          	lw	a5,-20(s0)
20407a56:	20408737          	lui	a4,0x20408
20407a5a:	9c870713          	addi	a4,a4,-1592 # 204079c8 <post_rate_change_callback_func>
20407a5e:	cbd8                	sw	a4,20(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20407a60:	fec42783          	lw	a5,-20(s0)
20407a64:	fcc42703          	lw	a4,-52(s0)
20407a68:	cf98                	sw	a4,24(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20407a6a:	fec42783          	lw	a5,-20(s0)
20407a6e:	07d1                	addi	a5,a5,20
20407a70:	85be                	mv	a1,a5
20407a72:	fe842503          	lw	a0,-24(s0)
20407a76:	2261                	jal	20407bfe <metal_clock_register_post_rate_change_callback>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20407a78:	fec42783          	lw	a5,-20(s0)
20407a7c:	fc842583          	lw	a1,-56(s0)
20407a80:	853e                	mv	a0,a5
20407a82:	2d4d                	jal	20408134 <metal_uart_set_baud_rate>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20407a84:	fe442783          	lw	a5,-28(s0)
20407a88:	cb95                	beqz	a5,20407abc <__metal_driver_sifive_uart0_init+0xc6>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20407a8a:	fcc42503          	lw	a0,-52(s0)
20407a8e:	c3fff0ef          	jal	ra,204076cc <__metal_driver_sifive_uart0_pinmux_output_selector>
20407a92:	87aa                	mv	a5,a0
20407a94:	fef42023          	sw	a5,-32(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20407a98:	fcc42503          	lw	a0,-52(s0)
20407a9c:	c5bff0ef          	jal	ra,204076f6 <__metal_driver_sifive_uart0_pinmux_source_selector>
20407aa0:	87aa                	mv	a5,a0
20407aa2:	fcf42e23          	sw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20407aa6:	fe442783          	lw	a5,-28(s0)
20407aaa:	439c                	lw	a5,0(a5)
20407aac:	53dc                	lw	a5,36(a5)
20407aae:	fdc42603          	lw	a2,-36(s0)
20407ab2:	fe042583          	lw	a1,-32(s0)
20407ab6:	fe442503          	lw	a0,-28(s0)
20407aba:	9782                	jalr	a5
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20407abc:	0001                	nop
20407abe:	50f2                	lw	ra,60(sp)
20407ac0:	5462                	lw	s0,56(sp)
20407ac2:	6121                	addi	sp,sp,64
20407ac4:	8082                	ret

20407ac6 <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:48
typedef struct _metal_clock_callback_t metal_clock_callback;

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void _metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
20407ac6:	7179                	addi	sp,sp,-48
20407ac8:	d606                	sw	ra,44(sp)
20407aca:	d422                	sw	s0,40(sp)
20407acc:	1800                	addi	s0,sp,48
20407ace:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:49
    const metal_clock_callback *current = list;
20407ad2:	fdc42783          	lw	a5,-36(s0)
20407ad6:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:50
    while (current) {
20407ada:	a831                	j	20407af6 <_metal_clock_call_all_callbacks+0x30>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:51
        current->callback(current->priv);
20407adc:	fec42783          	lw	a5,-20(s0)
20407ae0:	4398                	lw	a4,0(a5)
20407ae2:	fec42783          	lw	a5,-20(s0)
20407ae6:	43dc                	lw	a5,4(a5)
20407ae8:	853e                	mv	a0,a5
20407aea:	9702                	jalr	a4
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:52
        current = current->_next;
20407aec:	fec42783          	lw	a5,-20(s0)
20407af0:	479c                	lw	a5,8(a5)
20407af2:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:50
    while (current) {
20407af6:	fec42783          	lw	a5,-20(s0)
20407afa:	f3ed                	bnez	a5,20407adc <_metal_clock_call_all_callbacks+0x16>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:54
    }
}
20407afc:	0001                	nop
20407afe:	50b2                	lw	ra,44(sp)
20407b00:	5422                	lw	s0,40(sp)
20407b02:	6145                	addi	sp,sp,48
20407b04:	8082                	ret

20407b06 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:59

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20407b06:	7179                	addi	sp,sp,-48
20407b08:	d622                	sw	s0,44(sp)
20407b0a:	1800                	addi	s0,sp,48
20407b0c:	fca42e23          	sw	a0,-36(s0)
20407b10:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20407b14:	fd842783          	lw	a5,-40(s0)
20407b18:	0007a423          	sw	zero,8(a5) # 10008 <__stack_size+0xd808>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20407b1c:	fdc42783          	lw	a5,-36(s0)
20407b20:	e781                	bnez	a5,20407b28 <_metal_clock_append_to_callbacks+0x22>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20407b22:	fd842783          	lw	a5,-40(s0)
20407b26:	a035                	j	20407b52 <_metal_clock_append_to_callbacks+0x4c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20407b28:	fdc42783          	lw	a5,-36(s0)
20407b2c:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20407b30:	a031                	j	20407b3c <_metal_clock_append_to_callbacks+0x36>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20407b32:	fec42783          	lw	a5,-20(s0)
20407b36:	479c                	lw	a5,8(a5)
20407b38:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20407b3c:	fec42783          	lw	a5,-20(s0)
20407b40:	479c                	lw	a5,8(a5)
20407b42:	fbe5                	bnez	a5,20407b32 <_metal_clock_append_to_callbacks+0x2c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20407b44:	fec42783          	lw	a5,-20(s0)
20407b48:	fd842703          	lw	a4,-40(s0)
20407b4c:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20407b4e:	fdc42783          	lw	a5,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20407b52:	853e                	mv	a0,a5
20407b54:	5432                	lw	s0,44(sp)
20407b56:	6145                	addi	sp,sp,48
20407b58:	8082                	ret

20407b5a <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:105
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
20407b5a:	1101                	addi	sp,sp,-32
20407b5c:	ce06                	sw	ra,28(sp)
20407b5e:	cc22                	sw	s0,24(sp)
20407b60:	1000                	addi	s0,sp,32
20407b62:	fea42623          	sw	a0,-20(s0)
20407b66:	fec42783          	lw	a5,-20(s0)
20407b6a:	439c                	lw	a5,0(a5)
20407b6c:	439c                	lw	a5,0(a5)
20407b6e:	fec42503          	lw	a0,-20(s0)
20407b72:	9782                	jalr	a5
20407b74:	87aa                	mv	a5,a0
20407b76:	853e                	mv	a0,a5
20407b78:	40f2                	lw	ra,28(sp)
20407b7a:	4462                	lw	s0,24(sp)
20407b7c:	6105                	addi	sp,sp,32
20407b7e:	8082                	ret

20407b80 <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:122
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
20407b80:	7179                	addi	sp,sp,-48
20407b82:	d606                	sw	ra,44(sp)
20407b84:	d422                	sw	s0,40(sp)
20407b86:	1800                	addi	s0,sp,48
20407b88:	fca42e23          	sw	a0,-36(s0)
20407b8c:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:123
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
20407b90:	fdc42783          	lw	a5,-36(s0)
20407b94:	43dc                	lw	a5,4(a5)
20407b96:	853e                	mv	a0,a5
20407b98:	f2fff0ef          	jal	ra,20407ac6 <_metal_clock_call_all_callbacks>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:125

    long out = clk->vtable->set_rate_hz(clk, hz);
20407b9c:	fdc42783          	lw	a5,-36(s0)
20407ba0:	439c                	lw	a5,0(a5)
20407ba2:	43dc                	lw	a5,4(a5)
20407ba4:	fd842583          	lw	a1,-40(s0)
20407ba8:	fdc42503          	lw	a0,-36(s0)
20407bac:	9782                	jalr	a5
20407bae:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:127

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
20407bb2:	fdc42783          	lw	a5,-36(s0)
20407bb6:	479c                	lw	a5,8(a5)
20407bb8:	853e                	mv	a0,a5
20407bba:	f0dff0ef          	jal	ra,20407ac6 <_metal_clock_call_all_callbacks>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:129

    return out;
20407bbe:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:130
}
20407bc2:	853e                	mv	a0,a5
20407bc4:	50b2                	lw	ra,44(sp)
20407bc6:	5422                	lw	s0,40(sp)
20407bc8:	6145                	addi	sp,sp,48
20407bca:	8082                	ret

20407bcc <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20407bcc:	1101                	addi	sp,sp,-32
20407bce:	ce06                	sw	ra,28(sp)
20407bd0:	cc22                	sw	s0,24(sp)
20407bd2:	1000                	addi	s0,sp,32
20407bd4:	fea42623          	sw	a0,-20(s0)
20407bd8:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20407bdc:	fec42783          	lw	a5,-20(s0)
20407be0:	43dc                	lw	a5,4(a5)
20407be2:	fe842583          	lw	a1,-24(s0)
20407be6:	853e                	mv	a0,a5
20407be8:	f1fff0ef          	jal	ra,20407b06 <_metal_clock_append_to_callbacks>
20407bec:	872a                	mv	a4,a0
20407bee:	fec42783          	lw	a5,-20(s0)
20407bf2:	c3d8                	sw	a4,4(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20407bf4:	0001                	nop
20407bf6:	40f2                	lw	ra,28(sp)
20407bf8:	4462                	lw	s0,24(sp)
20407bfa:	6105                	addi	sp,sp,32
20407bfc:	8082                	ret

20407bfe <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20407bfe:	1101                	addi	sp,sp,-32
20407c00:	ce06                	sw	ra,28(sp)
20407c02:	cc22                	sw	s0,24(sp)
20407c04:	1000                	addi	s0,sp,32
20407c06:	fea42623          	sw	a0,-20(s0)
20407c0a:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20407c0e:	fec42783          	lw	a5,-20(s0)
20407c12:	479c                	lw	a5,8(a5)
20407c14:	fe842583          	lw	a1,-24(s0)
20407c18:	853e                	mv	a0,a5
20407c1a:	eedff0ef          	jal	ra,20407b06 <_metal_clock_append_to_callbacks>
20407c1e:	872a                	mv	a4,a0
20407c20:	fec42783          	lw	a5,-20(s0)
20407c24:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20407c26:	0001                	nop
20407c28:	40f2                	lw	ra,28(sp)
20407c2a:	4462                	lw	s0,24(sp)
20407c2c:	6105                	addi	sp,sp,32
20407c2e:	8082                	ret

20407c30 <metal_cpu_get_timer>:
metal_cpu_get_timer():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/cpu.h:72
 *
 * @param cpu The CPU device handle
 * @return The value of the CPU cycle count timer
 */
__inline__ unsigned long long metal_cpu_get_timer(struct metal_cpu *cpu)
{ return cpu->vtable->mcycle_get(cpu); }
20407c30:	1101                	addi	sp,sp,-32
20407c32:	ce06                	sw	ra,28(sp)
20407c34:	cc22                	sw	s0,24(sp)
20407c36:	1000                	addi	s0,sp,32
20407c38:	fea42623          	sw	a0,-20(s0)
20407c3c:	fec42783          	lw	a5,-20(s0)
20407c40:	439c                	lw	a5,0(a5)
20407c42:	439c                	lw	a5,0(a5)
20407c44:	fec42503          	lw	a0,-20(s0)
20407c48:	9782                	jalr	a5
20407c4a:	87aa                	mv	a5,a0
20407c4c:	882e                	mv	a6,a1
20407c4e:	853e                	mv	a0,a5
20407c50:	85c2                	mv	a1,a6
20407c52:	40f2                	lw	ra,28(sp)
20407c54:	4462                	lw	s0,24(sp)
20407c56:	6105                	addi	sp,sp,32
20407c58:	8082                	ret

20407c5a <metal_cpu_get_timebase>:
metal_cpu_get_timebase():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/cpu.h:82
 *
 * @param cpu The CPU device handle
 * @return The value of the cycle count timer timebase
 */
__inline__ unsigned long long metal_cpu_get_timebase(struct metal_cpu *cpu)
{ return cpu->vtable->timebase_get(cpu); }
20407c5a:	1101                	addi	sp,sp,-32
20407c5c:	ce06                	sw	ra,28(sp)
20407c5e:	cc22                	sw	s0,24(sp)
20407c60:	1000                	addi	s0,sp,32
20407c62:	fea42623          	sw	a0,-20(s0)
20407c66:	fec42783          	lw	a5,-20(s0)
20407c6a:	439c                	lw	a5,0(a5)
20407c6c:	43dc                	lw	a5,4(a5)
20407c6e:	fec42503          	lw	a0,-20(s0)
20407c72:	9782                	jalr	a5
20407c74:	87aa                	mv	a5,a0
20407c76:	882e                	mv	a6,a1
20407c78:	853e                	mv	a0,a5
20407c7a:	85c2                	mv	a1,a6
20407c7c:	40f2                	lw	ra,28(sp)
20407c7e:	4462                	lw	s0,24(sp)
20407c80:	6105                	addi	sp,sp,32
20407c82:	8082                	ret

20407c84 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20407c84:	1101                	addi	sp,sp,-32
20407c86:	ce06                	sw	ra,28(sp)
20407c88:	cc22                	sw	s0,24(sp)
20407c8a:	1000                	addi	s0,sp,32
20407c8c:	fea42623          	sw	a0,-20(s0)
20407c90:	fec42783          	lw	a5,-20(s0)
20407c94:	439c                	lw	a5,0(a5)
20407c96:	57dc                	lw	a5,44(a5)
20407c98:	fec42503          	lw	a0,-20(s0)
20407c9c:	9782                	jalr	a5
20407c9e:	87aa                	mv	a5,a0
20407ca0:	853e                	mv	a0,a5
20407ca2:	40f2                	lw	ra,28(sp)
20407ca4:	4462                	lw	s0,24(sp)
20407ca6:	6105                	addi	sp,sp,32
20407ca8:	8082                	ret

20407caa <metal_cpu_get>:
metal_cpu_get():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20407caa:	1101                	addi	sp,sp,-32
20407cac:	ce22                	sw	s0,28(sp)
20407cae:	1000                	addi	s0,sp,32
20407cb0:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20407cb4:	fec42783          	lw	a5,-20(s0)
20407cb8:	eb99                	bnez	a5,20407cce <metal_cpu_get+0x24>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20407cba:	800007b7          	lui	a5,0x80000
20407cbe:	fec42703          	lw	a4,-20(s0)
20407cc2:	070a                	slli	a4,a4,0x2
20407cc4:	7c878793          	addi	a5,a5,1992 # 800007c8 <metal_segment_heap_target_end+0xffffcf14>
20407cc8:	97ba                	add	a5,a5,a4
20407cca:	439c                	lw	a5,0(a5)
20407ccc:	a011                	j	20407cd0 <metal_cpu_get+0x26>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20407cce:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20407cd0:	853e                	mv	a0,a5
20407cd2:	4472                	lw	s0,28(sp)
20407cd4:	6105                	addi	sp,sp,32
20407cd6:	8082                	ret

20407cd8 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20407cd8:	1101                	addi	sp,sp,-32
20407cda:	ce22                	sw	s0,28(sp)
20407cdc:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20407cde:	f14027f3          	csrr	a5,mhartid
20407ce2:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20407ce6:	fec42783          	lw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20407cea:	853e                	mv	a0,a5
20407cec:	4472                	lw	s0,28(sp)
20407cee:	6105                	addi	sp,sp,32
20407cf0:	8082                	ret

20407cf2 <metal_gpio_enable_input>:
metal_gpio_enable_input():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:65
 * @brief enable input on a pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the input is successfully enabled
 */
__inline__ int metal_gpio_enable_input(struct metal_gpio *gpio, int pin) {
20407cf2:	1101                	addi	sp,sp,-32
20407cf4:	ce06                	sw	ra,28(sp)
20407cf6:	cc22                	sw	s0,24(sp)
20407cf8:	1000                	addi	s0,sp,32
20407cfa:	fea42623          	sw	a0,-20(s0)
20407cfe:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:66
    if(!gpio) {
20407d02:	fec42783          	lw	a5,-20(s0)
20407d06:	e399                	bnez	a5,20407d0c <metal_gpio_enable_input+0x1a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:67
	return 1;
20407d08:	4785                	li	a5,1
20407d0a:	a839                	j	20407d28 <metal_gpio_enable_input+0x36>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:70
    }

    return gpio->vtable->enable_input(gpio, (1 << pin));
20407d0c:	fec42783          	lw	a5,-20(s0)
20407d10:	439c                	lw	a5,0(a5)
20407d12:	43d4                	lw	a3,4(a5)
20407d14:	fe842783          	lw	a5,-24(s0)
20407d18:	4705                	li	a4,1
20407d1a:	00f717b3          	sll	a5,a4,a5
20407d1e:	85be                	mv	a1,a5
20407d20:	fec42503          	lw	a0,-20(s0)
20407d24:	9682                	jalr	a3
20407d26:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:71
}
20407d28:	853e                	mv	a0,a5
20407d2a:	40f2                	lw	ra,28(sp)
20407d2c:	4462                	lw	s0,24(sp)
20407d2e:	6105                	addi	sp,sp,32
20407d30:	8082                	ret

20407d32 <metal_gpio_disable_input>:
metal_gpio_disable_input():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:79
 * @brief Disable input on a pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the input is successfully disabled
 */
__inline__ int metal_gpio_disable_input(struct metal_gpio *gpio, int pin) {
20407d32:	1101                	addi	sp,sp,-32
20407d34:	ce06                	sw	ra,28(sp)
20407d36:	cc22                	sw	s0,24(sp)
20407d38:	1000                	addi	s0,sp,32
20407d3a:	fea42623          	sw	a0,-20(s0)
20407d3e:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:80
    if(!gpio) {
20407d42:	fec42783          	lw	a5,-20(s0)
20407d46:	e399                	bnez	a5,20407d4c <metal_gpio_disable_input+0x1a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:81
	return 1;
20407d48:	4785                	li	a5,1
20407d4a:	a839                	j	20407d68 <metal_gpio_disable_input+0x36>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:84
    }

    return gpio->vtable->disable_input(gpio, (1 << pin));
20407d4c:	fec42783          	lw	a5,-20(s0)
20407d50:	439c                	lw	a5,0(a5)
20407d52:	4394                	lw	a3,0(a5)
20407d54:	fe842783          	lw	a5,-24(s0)
20407d58:	4705                	li	a4,1
20407d5a:	00f717b3          	sll	a5,a4,a5
20407d5e:	85be                	mv	a1,a5
20407d60:	fec42503          	lw	a0,-20(s0)
20407d64:	9682                	jalr	a3
20407d66:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:85
}
20407d68:	853e                	mv	a0,a5
20407d6a:	40f2                	lw	ra,28(sp)
20407d6c:	4462                	lw	s0,24(sp)
20407d6e:	6105                	addi	sp,sp,32
20407d70:	8082                	ret

20407d72 <metal_gpio_enable_output>:
metal_gpio_enable_output():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:93
 * @brief Enable output on a pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the output is successfully enabled
 */
__inline__ int metal_gpio_enable_output(struct metal_gpio *gpio, int pin) {
20407d72:	1101                	addi	sp,sp,-32
20407d74:	ce06                	sw	ra,28(sp)
20407d76:	cc22                	sw	s0,24(sp)
20407d78:	1000                	addi	s0,sp,32
20407d7a:	fea42623          	sw	a0,-20(s0)
20407d7e:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:94
    if(!gpio) {
20407d82:	fec42783          	lw	a5,-20(s0)
20407d86:	e399                	bnez	a5,20407d8c <metal_gpio_enable_output+0x1a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:95
	return 1;
20407d88:	4785                	li	a5,1
20407d8a:	a839                	j	20407da8 <metal_gpio_enable_output+0x36>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:98
    }

    return gpio->vtable->enable_output(gpio, (1 << pin));
20407d8c:	fec42783          	lw	a5,-20(s0)
20407d90:	439c                	lw	a5,0(a5)
20407d92:	4bd4                	lw	a3,20(a5)
20407d94:	fe842783          	lw	a5,-24(s0)
20407d98:	4705                	li	a4,1
20407d9a:	00f717b3          	sll	a5,a4,a5
20407d9e:	85be                	mv	a1,a5
20407da0:	fec42503          	lw	a0,-20(s0)
20407da4:	9682                	jalr	a3
20407da6:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:99
}
20407da8:	853e                	mv	a0,a5
20407daa:	40f2                	lw	ra,28(sp)
20407dac:	4462                	lw	s0,24(sp)
20407dae:	6105                	addi	sp,sp,32
20407db0:	8082                	ret

20407db2 <metal_gpio_disable_output>:
metal_gpio_disable_output():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:107
 * @brief Disable output on a pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return 0 if the output is successfully disabled
 */
__inline__ int metal_gpio_disable_output(struct metal_gpio *gpio, int pin) {
20407db2:	1101                	addi	sp,sp,-32
20407db4:	ce06                	sw	ra,28(sp)
20407db6:	cc22                	sw	s0,24(sp)
20407db8:	1000                	addi	s0,sp,32
20407dba:	fea42623          	sw	a0,-20(s0)
20407dbe:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:108
    if(!gpio) {
20407dc2:	fec42783          	lw	a5,-20(s0)
20407dc6:	e399                	bnez	a5,20407dcc <metal_gpio_disable_output+0x1a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:109
	return 1;
20407dc8:	4785                	li	a5,1
20407dca:	a839                	j	20407de8 <metal_gpio_disable_output+0x36>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:112
    }

    return gpio->vtable->disable_output(gpio, (1 << pin));
20407dcc:	fec42783          	lw	a5,-20(s0)
20407dd0:	439c                	lw	a5,0(a5)
20407dd2:	4b94                	lw	a3,16(a5)
20407dd4:	fe842783          	lw	a5,-24(s0)
20407dd8:	4705                	li	a4,1
20407dda:	00f717b3          	sll	a5,a4,a5
20407dde:	85be                	mv	a1,a5
20407de0:	fec42503          	lw	a0,-20(s0)
20407de4:	9682                	jalr	a3
20407de6:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:113
}
20407de8:	853e                	mv	a0,a5
20407dea:	40f2                	lw	ra,28(sp)
20407dec:	4462                	lw	s0,24(sp)
20407dee:	6105                	addi	sp,sp,32
20407df0:	8082                	ret

20407df2 <metal_gpio_set_pin>:
metal_gpio_set_pin():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:122
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @param value The value to set the pin to
 * @return 0 if the output is successfully set
 */
__inline__ int metal_gpio_set_pin(struct metal_gpio *gpio, int pin, int value) {
20407df2:	1101                	addi	sp,sp,-32
20407df4:	ce06                	sw	ra,28(sp)
20407df6:	cc22                	sw	s0,24(sp)
20407df8:	1000                	addi	s0,sp,32
20407dfa:	fea42623          	sw	a0,-20(s0)
20407dfe:	feb42423          	sw	a1,-24(s0)
20407e02:	fec42223          	sw	a2,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:123
    if(!gpio) {
20407e06:	fec42783          	lw	a5,-20(s0)
20407e0a:	e399                	bnez	a5,20407e10 <metal_gpio_set_pin+0x1e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:124
	return 1;
20407e0c:	4785                	li	a5,1
20407e0e:	a089                	j	20407e50 <metal_gpio_set_pin+0x5e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:127
    }

    if(value == 0) {
20407e10:	fe442783          	lw	a5,-28(s0)
20407e14:	e385                	bnez	a5,20407e34 <metal_gpio_set_pin+0x42>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:128
	return gpio->vtable->output_clear(gpio, (1 << pin));
20407e16:	fec42783          	lw	a5,-20(s0)
20407e1a:	439c                	lw	a5,0(a5)
20407e1c:	4fd4                	lw	a3,28(a5)
20407e1e:	fe842783          	lw	a5,-24(s0)
20407e22:	4705                	li	a4,1
20407e24:	00f717b3          	sll	a5,a4,a5
20407e28:	85be                	mv	a1,a5
20407e2a:	fec42503          	lw	a0,-20(s0)
20407e2e:	9682                	jalr	a3
20407e30:	87aa                	mv	a5,a0
20407e32:	a839                	j	20407e50 <metal_gpio_set_pin+0x5e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:130
    } else {
	return gpio->vtable->output_set(gpio, (1 << pin));
20407e34:	fec42783          	lw	a5,-20(s0)
20407e38:	439c                	lw	a5,0(a5)
20407e3a:	4f94                	lw	a3,24(a5)
20407e3c:	fe842783          	lw	a5,-24(s0)
20407e40:	4705                	li	a4,1
20407e42:	00f717b3          	sll	a5,a4,a5
20407e46:	85be                	mv	a1,a5
20407e48:	fec42503          	lw	a0,-20(s0)
20407e4c:	9682                	jalr	a3
20407e4e:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:132
    }
}
20407e50:	853e                	mv	a0,a5
20407e52:	40f2                	lw	ra,28(sp)
20407e54:	4462                	lw	s0,24(sp)
20407e56:	6105                	addi	sp,sp,32
20407e58:	8082                	ret

20407e5a <metal_gpio_get_input_pin>:
metal_gpio_get_input_pin():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:140
 * @brief Get the value of the GPIO pin
 * @param gpio The handle for the GPIO interface
 * @param pin The pin number indexed from 0
 * @return The value of the GPIO pin
 */
__inline__ int metal_gpio_get_input_pin(struct metal_gpio *gpio, int pin) {
20407e5a:	7179                	addi	sp,sp,-48
20407e5c:	d606                	sw	ra,44(sp)
20407e5e:	d422                	sw	s0,40(sp)
20407e60:	1800                	addi	s0,sp,48
20407e62:	fca42e23          	sw	a0,-36(s0)
20407e66:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:141
    if(!gpio) {
20407e6a:	fdc42783          	lw	a5,-36(s0)
20407e6e:	e399                	bnez	a5,20407e74 <metal_gpio_get_input_pin+0x1a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:142
	return 0;
20407e70:	4781                	li	a5,0
20407e72:	a035                	j	20407e9e <metal_gpio_get_input_pin+0x44>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:145
    }

    long value = gpio->vtable->input(gpio);
20407e74:	fdc42783          	lw	a5,-36(s0)
20407e78:	439c                	lw	a5,0(a5)
20407e7a:	479c                	lw	a5,8(a5)
20407e7c:	fdc42503          	lw	a0,-36(s0)
20407e80:	9782                	jalr	a5
20407e82:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:147

    if(value & (1 << pin)) {
20407e86:	fd842783          	lw	a5,-40(s0)
20407e8a:	4705                	li	a4,1
20407e8c:	00f71733          	sll	a4,a4,a5
20407e90:	fec42783          	lw	a5,-20(s0)
20407e94:	8ff9                	and	a5,a5,a4
20407e96:	c399                	beqz	a5,20407e9c <metal_gpio_get_input_pin+0x42>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:148
	    return 1;
20407e98:	4785                	li	a5,1
20407e9a:	a011                	j	20407e9e <metal_gpio_get_input_pin+0x44>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:150
    } else {
	    return 0;
20407e9c:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/gpio.h:152
    }
}
20407e9e:	853e                	mv	a0,a5
20407ea0:	50b2                	lw	ra,44(sp)
20407ea2:	5422                	lw	s0,40(sp)
20407ea4:	6145                	addi	sp,sp,48
20407ea6:	8082                	ret

20407ea8 <metal_gpio_get_device>:
metal_gpio_get_device():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/gpio.c:24
extern __inline__ int metal_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin);
extern __inline__ int metal_gpio_config_interrupt(struct metal_gpio *gpio, int pin, int intr_type);
extern __inline__ int metal_gpio_clear_interrupt(struct metal_gpio *gpio, int pin, int intr_type);

struct metal_gpio *metal_gpio_get_device(unsigned int device_num)
{
20407ea8:	1101                	addi	sp,sp,-32
20407eaa:	ce22                	sw	s0,28(sp)
20407eac:	1000                	addi	s0,sp,32
20407eae:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/gpio.c:25
    if(device_num > __MEE_DT_MAX_GPIOS) {
20407eb2:	fec42703          	lw	a4,-20(s0)
20407eb6:	4785                	li	a5,1
20407eb8:	00e7f463          	bgeu	a5,a4,20407ec0 <metal_gpio_get_device+0x18>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/gpio.c:26
	return NULL;
20407ebc:	4781                	li	a5,0
20407ebe:	a811                	j	20407ed2 <metal_gpio_get_device+0x2a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/gpio.c:29
    }

    return (struct metal_gpio *) __metal_gpio_table[device_num];
20407ec0:	800007b7          	lui	a5,0x80000
20407ec4:	fec42703          	lw	a4,-20(s0)
20407ec8:	070a                	slli	a4,a4,0x2
20407eca:	7cc78793          	addi	a5,a5,1996 # 800007cc <metal_segment_heap_target_end+0xffffcf18>
20407ece:	97ba                	add	a5,a5,a4
20407ed0:	439c                	lw	a5,0(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/gpio.c:30
}
20407ed2:	853e                	mv	a0,a5
20407ed4:	4472                	lw	s0,28(sp)
20407ed6:	6105                	addi	sp,sp,32
20407ed8:	8082                	ret

20407eda <metal_shutdown>:
metal_shutdown():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20407eda:	1101                	addi	sp,sp,-32
20407edc:	ce22                	sw	s0,28(sp)
20407ede:	1000                	addi	s0,sp,32
20407ee0:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20407ee4:	0001                	nop
20407ee6:	bffd                	j	20407ee4 <metal_shutdown+0xa>

20407ee8 <metal_spi_init>:
metal_spi_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/spi.h:63

/*! @brief Initialize a SPI device with a certain baud rate
 * @param spi The handle for the SPI device to initialize
 * @param baud_rate The baud rate to set the SPI device to
 */
__inline__ void metal_spi_init(struct metal_spi *spi, int baud_rate) { spi->vtable->init(spi, baud_rate); }
20407ee8:	1101                	addi	sp,sp,-32
20407eea:	ce06                	sw	ra,28(sp)
20407eec:	cc22                	sw	s0,24(sp)
20407eee:	1000                	addi	s0,sp,32
20407ef0:	fea42623          	sw	a0,-20(s0)
20407ef4:	feb42423          	sw	a1,-24(s0)
20407ef8:	fec42783          	lw	a5,-20(s0)
20407efc:	439c                	lw	a5,0(a5)
20407efe:	439c                	lw	a5,0(a5)
20407f00:	fe842583          	lw	a1,-24(s0)
20407f04:	fec42503          	lw	a0,-20(s0)
20407f08:	9782                	jalr	a5
20407f0a:	0001                	nop
20407f0c:	40f2                	lw	ra,28(sp)
20407f0e:	4462                	lw	s0,24(sp)
20407f10:	6105                	addi	sp,sp,32
20407f12:	8082                	ret

20407f14 <metal_spi_transfer>:
metal_spi_transfer():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/spi.h:73
 * @param len The number of bytes to transfer
 * @param tx_buf The buffer to send over the SPI bus. Must be len bytes long. If NULL, the SPI will transfer the value 0.
 * @param rx_buf The buffer to receive data into. Must be len bytes long. If NULL, the SPI will ignore received bytes.
 * @return 0 if the transfer succeeds
 */
__inline__ int metal_spi_transfer(struct metal_spi *spi, struct metal_spi_config *config, size_t len, char *tx_buf, char *rx_buf) {
20407f14:	7179                	addi	sp,sp,-48
20407f16:	d606                	sw	ra,44(sp)
20407f18:	d422                	sw	s0,40(sp)
20407f1a:	1800                	addi	s0,sp,48
20407f1c:	fea42623          	sw	a0,-20(s0)
20407f20:	feb42423          	sw	a1,-24(s0)
20407f24:	fec42223          	sw	a2,-28(s0)
20407f28:	fed42023          	sw	a3,-32(s0)
20407f2c:	fce42e23          	sw	a4,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/spi.h:74
    return spi->vtable->transfer(spi, config, len, tx_buf, rx_buf);
20407f30:	fec42783          	lw	a5,-20(s0)
20407f34:	439c                	lw	a5,0(a5)
20407f36:	43dc                	lw	a5,4(a5)
20407f38:	fdc42703          	lw	a4,-36(s0)
20407f3c:	fe042683          	lw	a3,-32(s0)
20407f40:	fe442603          	lw	a2,-28(s0)
20407f44:	fe842583          	lw	a1,-24(s0)
20407f48:	fec42503          	lw	a0,-20(s0)
20407f4c:	9782                	jalr	a5
20407f4e:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/spi.h:75
}
20407f50:	853e                	mv	a0,a5
20407f52:	50b2                	lw	ra,44(sp)
20407f54:	5422                	lw	s0,40(sp)
20407f56:	6145                	addi	sp,sp,48
20407f58:	8082                	ret

20407f5a <metal_spi_set_baud_rate>:
metal_spi_set_baud_rate():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/spi.h:88
/*! @brief Set the current baud rate of the SPI device
 * @param spi The handle for the SPI device
 * @param baud_rate The desired baud rate of the SPI device
 * @return 0 if the baud rate is successfully changed
 */
__inline__ int metal_spi_set_baud_rate(struct metal_spi *spi, int baud_rate) { return spi->vtable->set_baud_rate(spi, baud_rate); }
20407f5a:	1101                	addi	sp,sp,-32
20407f5c:	ce06                	sw	ra,28(sp)
20407f5e:	cc22                	sw	s0,24(sp)
20407f60:	1000                	addi	s0,sp,32
20407f62:	fea42623          	sw	a0,-20(s0)
20407f66:	feb42423          	sw	a1,-24(s0)
20407f6a:	fec42783          	lw	a5,-20(s0)
20407f6e:	439c                	lw	a5,0(a5)
20407f70:	47dc                	lw	a5,12(a5)
20407f72:	fe842583          	lw	a1,-24(s0)
20407f76:	fec42503          	lw	a0,-20(s0)
20407f7a:	9782                	jalr	a5
20407f7c:	87aa                	mv	a5,a0
20407f7e:	853e                	mv	a0,a5
20407f80:	40f2                	lw	ra,28(sp)
20407f82:	4462                	lw	s0,24(sp)
20407f84:	6105                	addi	sp,sp,32
20407f86:	8082                	ret

20407f88 <metal_spi_get_device>:
metal_spi_get_device():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/spi.c:13
extern __inline__ int metal_spi_transfer(struct metal_spi *spi, struct metal_spi_config *config, size_t len, char *tx_buf, char *rx_buf);
extern __inline__ int metal_spi_get_baud_rate(struct metal_spi *spi);
extern __inline__ int metal_spi_set_baud_rate(struct metal_spi *spi, int baud_rate);

struct metal_spi *metal_spi_get_device(unsigned int device_num)
{
20407f88:	1101                	addi	sp,sp,-32
20407f8a:	ce22                	sw	s0,28(sp)
20407f8c:	1000                	addi	s0,sp,32
20407f8e:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/spi.c:15
#if __METAL_DT_MAX_SPIS > 0
    if (device_num < __METAL_DT_MAX_SPIS) {
20407f92:	fec42703          	lw	a4,-20(s0)
20407f96:	4785                	li	a5,1
20407f98:	00e7ec63          	bltu	a5,a4,20407fb0 <metal_spi_get_device+0x28>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/spi.c:16
        return (struct metal_spi *) __metal_spi_table[device_num];
20407f9c:	800007b7          	lui	a5,0x80000
20407fa0:	7d078713          	addi	a4,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffcf1c>
20407fa4:	fec42783          	lw	a5,-20(s0)
20407fa8:	078a                	slli	a5,a5,0x2
20407faa:	97ba                	add	a5,a5,a4
20407fac:	439c                	lw	a5,0(a5)
20407fae:	a011                	j	20407fb2 <metal_spi_get_device+0x2a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/spi.c:20
    }
#endif

    return NULL;
20407fb0:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/spi.c:21
}
20407fb2:	853e                	mv	a0,a5
20407fb4:	4472                	lw	s0,28(sp)
20407fb6:	6105                	addi	sp,sp,32
20407fb8:	8082                	ret

20407fba <metal_gettimeofday>:
metal_gettimeofday():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:8

#include <metal/time.h>
#include <metal/timer.h>

int metal_gettimeofday(struct timeval *tp, void *tzp)
{
20407fba:	7139                	addi	sp,sp,-64
20407fbc:	de06                	sw	ra,60(sp)
20407fbe:	dc22                	sw	s0,56(sp)
20407fc0:	da4a                	sw	s2,52(sp)
20407fc2:	d84e                	sw	s3,48(sp)
20407fc4:	0080                	addi	s0,sp,64
20407fc6:	fca42623          	sw	a0,-52(s0)
20407fca:	fcb42423          	sw	a1,-56(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:11
    int rv;
    unsigned long long mcc, timebase;
    if (rv = metal_timer_get_cyclecount(0, &mcc)) {
20407fce:	fe040793          	addi	a5,s0,-32
20407fd2:	85be                	mv	a1,a5
20407fd4:	4501                	li	a0,0
20407fd6:	2cc1                	jal	204082a6 <metal_timer_get_cyclecount>
20407fd8:	fea42623          	sw	a0,-20(s0)
20407fdc:	fec42783          	lw	a5,-20(s0)
20407fe0:	c399                	beqz	a5,20407fe6 <metal_gettimeofday+0x2c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:12
        return -1;
20407fe2:	57fd                	li	a5,-1
20407fe4:	a07d                	j	20408092 <metal_gettimeofday+0xd8>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:14
    }
    if (rv = metal_timer_get_timebase_frequency(0, &timebase)) {
20407fe6:	fd840793          	addi	a5,s0,-40
20407fea:	85be                	mv	a1,a5
20407fec:	4501                	li	a0,0
20407fee:	2609                	jal	204082f0 <metal_timer_get_timebase_frequency>
20407ff0:	fea42623          	sw	a0,-20(s0)
20407ff4:	fec42783          	lw	a5,-20(s0)
20407ff8:	c399                	beqz	a5,20407ffe <metal_gettimeofday+0x44>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:15
        return -1;
20407ffa:	57fd                	li	a5,-1
20407ffc:	a859                	j	20408092 <metal_gettimeofday+0xd8>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:17
    }
    tp->tv_sec = mcc / timebase;
20407ffe:	fe042783          	lw	a5,-32(s0)
20408002:	fe442803          	lw	a6,-28(s0)
20408006:	fd842683          	lw	a3,-40(s0)
2040800a:	fdc42703          	lw	a4,-36(s0)
2040800e:	8636                	mv	a2,a3
20408010:	86ba                	mv	a3,a4
20408012:	853e                	mv	a0,a5
20408014:	85c2                	mv	a1,a6
20408016:	25dd                	jal	204086fc <__udivdi3>
20408018:	87aa                	mv	a5,a0
2040801a:	882e                	mv	a6,a1
2040801c:	fcc42703          	lw	a4,-52(s0)
20408020:	c31c                	sw	a5,0(a4)
20408022:	01072223          	sw	a6,4(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:18
    tp->tv_usec = mcc % timebase * 1000000 / timebase;
20408026:	fe042783          	lw	a5,-32(s0)
2040802a:	fe442803          	lw	a6,-28(s0)
2040802e:	fd842683          	lw	a3,-40(s0)
20408032:	fdc42703          	lw	a4,-36(s0)
20408036:	8636                	mv	a2,a3
20408038:	86ba                	mv	a3,a4
2040803a:	853e                	mv	a0,a5
2040803c:	85c2                	mv	a1,a6
2040803e:	21d000ef          	jal	ra,20408a5a <__umoddi3>
20408042:	87aa                	mv	a5,a0
20408044:	882e                	mv	a6,a1
20408046:	000f4737          	lui	a4,0xf4
2040804a:	24070713          	addi	a4,a4,576 # f4240 <__stack_size+0xf1a40>
2040804e:	02e806b3          	mul	a3,a6,a4
20408052:	4701                	li	a4,0
20408054:	02e78733          	mul	a4,a5,a4
20408058:	96ba                	add	a3,a3,a4
2040805a:	000f4737          	lui	a4,0xf4
2040805e:	24070713          	addi	a4,a4,576 # f4240 <__stack_size+0xf1a40>
20408062:	02e78633          	mul	a2,a5,a4
20408066:	02e7b9b3          	mulhu	s3,a5,a4
2040806a:	8932                	mv	s2,a2
2040806c:	013687b3          	add	a5,a3,s3
20408070:	89be                	mv	s3,a5
20408072:	fd842783          	lw	a5,-40(s0)
20408076:	fdc42803          	lw	a6,-36(s0)
2040807a:	863e                	mv	a2,a5
2040807c:	86c2                	mv	a3,a6
2040807e:	854a                	mv	a0,s2
20408080:	85ce                	mv	a1,s3
20408082:	2dad                	jal	204086fc <__udivdi3>
20408084:	87aa                	mv	a5,a0
20408086:	882e                	mv	a6,a1
20408088:	873e                	mv	a4,a5
2040808a:	fcc42783          	lw	a5,-52(s0)
2040808e:	c798                	sw	a4,8(a5)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:19
    return 0;
20408090:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:20 (discriminator 1)
}
20408092:	853e                	mv	a0,a5
20408094:	50f2                	lw	ra,60(sp)
20408096:	5462                	lw	s0,56(sp)
20408098:	5952                	lw	s2,52(sp)
2040809a:	59c2                	lw	s3,48(sp)
2040809c:	6121                	addi	sp,sp,64
2040809e:	8082                	ret

204080a0 <metal_time>:
metal_time():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:23

time_t metal_time (void)
{
204080a0:	1101                	addi	sp,sp,-32
204080a2:	ce06                	sw	ra,28(sp)
204080a4:	cc22                	sw	s0,24(sp)
204080a6:	1000                	addi	s0,sp,32
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:26
    struct timeval now;

    if (metal_gettimeofday(&now, NULL) < 0)
204080a8:	fe040793          	addi	a5,s0,-32
204080ac:	4581                	li	a1,0
204080ae:	853e                	mv	a0,a5
204080b0:	f0bff0ef          	jal	ra,20407fba <metal_gettimeofday>
204080b4:	87aa                	mv	a5,a0
204080b6:	0007d863          	bgez	a5,204080c6 <metal_time+0x26>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:27
      now.tv_sec = (time_t) -1;
204080ba:	57fd                	li	a5,-1
204080bc:	587d                	li	a6,-1
204080be:	fef42023          	sw	a5,-32(s0)
204080c2:	ff042223          	sw	a6,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:29

  return now.tv_sec;
204080c6:	fe042783          	lw	a5,-32(s0)
204080ca:	fe442803          	lw	a6,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/time.c:30
}
204080ce:	853e                	mv	a0,a5
204080d0:	85c2                	mv	a1,a6
204080d2:	40f2                	lw	ra,28(sp)
204080d4:	4462                	lw	s0,24(sp)
204080d6:	6105                	addi	sp,sp,32
204080d8:	8082                	ret

204080da <metal_uart_init>:
metal_uart_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
204080da:	1101                	addi	sp,sp,-32
204080dc:	ce06                	sw	ra,28(sp)
204080de:	cc22                	sw	s0,24(sp)
204080e0:	1000                	addi	s0,sp,32
204080e2:	fea42623          	sw	a0,-20(s0)
204080e6:	feb42423          	sw	a1,-24(s0)
204080ea:	fec42783          	lw	a5,-20(s0)
204080ee:	439c                	lw	a5,0(a5)
204080f0:	439c                	lw	a5,0(a5)
204080f2:	fe842583          	lw	a1,-24(s0)
204080f6:	fec42503          	lw	a0,-20(s0)
204080fa:	9782                	jalr	a5
204080fc:	0001                	nop
204080fe:	40f2                	lw	ra,28(sp)
20408100:	4462                	lw	s0,24(sp)
20408102:	6105                	addi	sp,sp,32
20408104:	8082                	ret

20408106 <metal_uart_putc>:
metal_uart_putc():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20408106:	1101                	addi	sp,sp,-32
20408108:	ce06                	sw	ra,28(sp)
2040810a:	cc22                	sw	s0,24(sp)
2040810c:	1000                	addi	s0,sp,32
2040810e:	fea42623          	sw	a0,-20(s0)
20408112:	feb42423          	sw	a1,-24(s0)
20408116:	fec42783          	lw	a5,-20(s0)
2040811a:	439c                	lw	a5,0(a5)
2040811c:	43dc                	lw	a5,4(a5)
2040811e:	fe842583          	lw	a1,-24(s0)
20408122:	fec42503          	lw	a0,-20(s0)
20408126:	9782                	jalr	a5
20408128:	87aa                	mv	a5,a0
2040812a:	853e                	mv	a0,a5
2040812c:	40f2                	lw	ra,28(sp)
2040812e:	4462                	lw	s0,24(sp)
20408130:	6105                	addi	sp,sp,32
20408132:	8082                	ret

20408134 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20408134:	1101                	addi	sp,sp,-32
20408136:	ce06                	sw	ra,28(sp)
20408138:	cc22                	sw	s0,24(sp)
2040813a:	1000                	addi	s0,sp,32
2040813c:	fea42623          	sw	a0,-20(s0)
20408140:	feb42423          	sw	a1,-24(s0)
20408144:	fec42783          	lw	a5,-20(s0)
20408148:	439c                	lw	a5,0(a5)
2040814a:	4bdc                	lw	a5,20(a5)
2040814c:	fe842583          	lw	a1,-24(s0)
20408150:	fec42503          	lw	a0,-20(s0)
20408154:	9782                	jalr	a5
20408156:	87aa                	mv	a5,a0
20408158:	853e                	mv	a0,a5
2040815a:	40f2                	lw	ra,28(sp)
2040815c:	4462                	lw	s0,24(sp)
2040815e:	6105                	addi	sp,sp,32
20408160:	8082                	ret
	...

20408180 <__metal_vector_table>:
IRQ_0():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20408180:	ae5fb06f          	j	20403c64 <metal_interrupt_vector_handler>

20408184 <IRQ_1>:
IRQ_1():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20408184:	ae1fb06f          	j	20403c64 <metal_interrupt_vector_handler>

20408188 <IRQ_2>:
IRQ_2():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20408188:	addfb06f          	j	20403c64 <metal_interrupt_vector_handler>

2040818c <IRQ_3>:
IRQ_3():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040818c:	b07fb06f          	j	20403c92 <metal_software_interrupt_vector_handler>

20408190 <IRQ_4>:
IRQ_4():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20408190:	ad5fb06f          	j	20403c64 <metal_interrupt_vector_handler>

20408194 <IRQ_5>:
IRQ_5():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20408194:	ad1fb06f          	j	20403c64 <metal_interrupt_vector_handler>

20408198 <IRQ_6>:
IRQ_6():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20408198:	acdfb06f          	j	20403c64 <metal_interrupt_vector_handler>

2040819c <IRQ_7>:
IRQ_7():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040819c:	bf1fb06f          	j	20403d8c <metal_timer_interrupt_vector_handler>

204081a0 <IRQ_8>:
IRQ_8():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204081a0:	ac5fb06f          	j	20403c64 <metal_interrupt_vector_handler>

204081a4 <IRQ_9>:
IRQ_9():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204081a4:	ac1fb06f          	j	20403c64 <metal_interrupt_vector_handler>

204081a8 <IRQ_10>:
IRQ_10():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204081a8:	abdfb06f          	j	20403c64 <metal_interrupt_vector_handler>

204081ac <IRQ_11>:
IRQ_11():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204081ac:	ab9fb06f          	j	20403c64 <metal_interrupt_vector_handler>

204081b0 <IRQ_12>:
IRQ_12():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204081b0:	ab5fb06f          	j	20403c64 <metal_interrupt_vector_handler>

204081b4 <IRQ_13>:
IRQ_13():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204081b4:	ab1fb06f          	j	20403c64 <metal_interrupt_vector_handler>

204081b8 <IRQ_14>:
IRQ_14():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204081b8:	aadfb06f          	j	20403c64 <metal_interrupt_vector_handler>

204081bc <IRQ_15>:
IRQ_15():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204081bc:	aa9fb06f          	j	20403c64 <metal_interrupt_vector_handler>

204081c0 <IRQ_LC0>:
IRQ_LC0():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204081c0:	ebbfb06f          	j	2040407a <metal_lc0_interrupt_vector_handler>

204081c4 <IRQ_LC1>:
IRQ_LC1():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204081c4:	f4dfb06f          	j	20404110 <metal_lc1_interrupt_vector_handler>

204081c8 <IRQ_LC2>:
IRQ_LC2():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204081c8:	fdffb06f          	j	204041a6 <metal_lc2_interrupt_vector_handler>

204081cc <IRQ_LC3>:
IRQ_LC3():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204081cc:	870fc06f          	j	2040423c <metal_lc3_interrupt_vector_handler>

204081d0 <IRQ_LC4>:
IRQ_LC4():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204081d0:	902fc06f          	j	204042d2 <metal_lc4_interrupt_vector_handler>

204081d4 <IRQ_LC5>:
IRQ_LC5():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204081d4:	994fc06f          	j	20404368 <metal_lc5_interrupt_vector_handler>

204081d8 <IRQ_LC6>:
IRQ_LC6():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204081d8:	a26fc06f          	j	204043fe <metal_lc6_interrupt_vector_handler>

204081dc <IRQ_LC7>:
IRQ_LC7():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204081dc:	ab8fc06f          	j	20404494 <metal_lc7_interrupt_vector_handler>

204081e0 <IRQ_LC8>:
IRQ_LC8():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204081e0:	b4afc06f          	j	2040452a <metal_lc8_interrupt_vector_handler>

204081e4 <IRQ_LC9>:
IRQ_LC9():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204081e4:	bdcfc06f          	j	204045c0 <metal_lc9_interrupt_vector_handler>

204081e8 <IRQ_LC10>:
IRQ_LC10():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204081e8:	c6efc06f          	j	20404656 <metal_lc10_interrupt_vector_handler>

204081ec <IRQ_LC11>:
IRQ_LC11():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204081ec:	d00fc06f          	j	204046ec <metal_lc11_interrupt_vector_handler>

204081f0 <IRQ_LC12>:
IRQ_LC12():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204081f0:	d92fc06f          	j	20404782 <metal_lc12_interrupt_vector_handler>

204081f4 <IRQ_LC13>:
IRQ_LC13():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204081f4:	e24fc06f          	j	20404818 <metal_lc13_interrupt_vector_handler>

204081f8 <IRQ_LC14>:
IRQ_LC14():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204081f8:	eb6fc06f          	j	204048ae <metal_lc14_interrupt_vector_handler>

204081fc <IRQ_LC15>:
IRQ_LC15():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204081fc:	f48fc06f          	j	20404944 <metal_lc15_interrupt_vector_handler>

20408200 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:165
{
20408200:	1101                	addi	sp,sp,-32
20408202:	ce22                	sw	s0,28(sp)
20408204:	1000                	addi	s0,sp,32
20408206:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:166
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040820a:	fec42703          	lw	a4,-20(s0)
2040820e:	800007b7          	lui	a5,0x80000
20408212:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffc7ac>
20408216:	00f71763          	bne	a4,a5,20408224 <__metal_driver_fixed_clock_rate+0x24>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:167
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040821a:	00f427b7          	lui	a5,0xf42
2040821e:	40078793          	addi	a5,a5,1024 # f42400 <__stack_size+0xf3fc00>
20408222:	a825                	j	2040825a <__metal_driver_fixed_clock_rate+0x5a>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:169
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
20408224:	fec42703          	lw	a4,-20(s0)
20408228:	800007b7          	lui	a5,0x80000
2040822c:	06c78793          	addi	a5,a5,108 # 8000006c <metal_segment_heap_target_end+0xffffc7b8>
20408230:	00f71763          	bne	a4,a5,2040823e <__metal_driver_fixed_clock_rate+0x3e>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:170
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
20408234:	044aa7b7          	lui	a5,0x44aa
20408238:	20078793          	addi	a5,a5,512 # 44aa200 <__stack_size+0x44a7a00>
2040823c:	a839                	j	2040825a <__metal_driver_fixed_clock_rate+0x5a>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:172
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
2040823e:	fec42703          	lw	a4,-20(s0)
20408242:	800007b7          	lui	a5,0x80000
20408246:	07878793          	addi	a5,a5,120 # 80000078 <metal_segment_heap_target_end+0xffffc7c4>
2040824a:	00f71763          	bne	a4,a5,20408258 <__metal_driver_fixed_clock_rate+0x58>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:173
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
2040824e:	01e857b7          	lui	a5,0x1e85
20408252:	80078793          	addi	a5,a5,-2048 # 1e84800 <__stack_size+0x1e82000>
20408256:	a011                	j	2040825a <__metal_driver_fixed_clock_rate+0x5a>
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:176
		return 0;
20408258:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/bsp/sifive-hifive1/build/debug/./metal/machine.h:178
}
2040825a:	853e                	mv	a0,a5
2040825c:	4472                	lw	s0,28(sp)
2040825e:	6105                	addi	sp,sp,32
20408260:	8082                	ret

20408262 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20408262:	1101                	addi	sp,sp,-32
20408264:	ce06                	sw	ra,28(sp)
20408266:	cc22                	sw	s0,24(sp)
20408268:	1000                	addi	s0,sp,32
2040826a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040826e:	fec42503          	lw	a0,-20(s0)
20408272:	f8fff0ef          	jal	ra,20408200 <__metal_driver_fixed_clock_rate>
20408276:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20408278:	853e                	mv	a0,a5
2040827a:	40f2                	lw	ra,28(sp)
2040827c:	4462                	lw	s0,24(sp)
2040827e:	6105                	addi	sp,sp,32
20408280:	8082                	ret

20408282 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20408282:	1101                	addi	sp,sp,-32
20408284:	ce06                	sw	ra,28(sp)
20408286:	cc22                	sw	s0,24(sp)
20408288:	1000                	addi	s0,sp,32
2040828a:	fea42623          	sw	a0,-20(s0)
2040828e:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20408292:	fec42503          	lw	a0,-20(s0)
20408296:	fcdff0ef          	jal	ra,20408262 <__metal_driver_fixed_clock_get_rate_hz>
2040829a:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
2040829c:	853e                	mv	a0,a5
2040829e:	40f2                	lw	ra,28(sp)
204082a0:	4462                	lw	s0,24(sp)
204082a2:	6105                	addi	sp,sp,32
204082a4:	8082                	ret

204082a6 <metal_timer_get_cyclecount>:
metal_timer_get_cyclecount():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:14

#if defined(__METAL_DT_MAX_HARTS)
/* This implementation serves as a small shim that interfaces with the first
 * timer on a system. */
int metal_timer_get_cyclecount(int hartid, unsigned long long *mcc)
{
204082a6:	7179                	addi	sp,sp,-48
204082a8:	d606                	sw	ra,44(sp)
204082aa:	d422                	sw	s0,40(sp)
204082ac:	1800                	addi	s0,sp,48
204082ae:	fca42e23          	sw	a0,-36(s0)
204082b2:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:15
    struct metal_cpu *cpu = metal_cpu_get(hartid);
204082b6:	fdc42783          	lw	a5,-36(s0)
204082ba:	853e                	mv	a0,a5
204082bc:	9efff0ef          	jal	ra,20407caa <metal_cpu_get>
204082c0:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:17

    if ( cpu ) {
204082c4:	fec42783          	lw	a5,-20(s0)
204082c8:	cf91                	beqz	a5,204082e4 <metal_timer_get_cyclecount+0x3e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:18
        *mcc = metal_cpu_get_timer(cpu);
204082ca:	fec42503          	lw	a0,-20(s0)
204082ce:	963ff0ef          	jal	ra,20407c30 <metal_cpu_get_timer>
204082d2:	87aa                	mv	a5,a0
204082d4:	882e                	mv	a6,a1
204082d6:	fd842703          	lw	a4,-40(s0)
204082da:	c31c                	sw	a5,0(a4)
204082dc:	01072223          	sw	a6,4(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:19
        return 0;
204082e0:	4781                	li	a5,0
204082e2:	a011                	j	204082e6 <metal_timer_get_cyclecount+0x40>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:21
    }	
    return -1;
204082e4:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:22
}
204082e6:	853e                	mv	a0,a5
204082e8:	50b2                	lw	ra,44(sp)
204082ea:	5422                	lw	s0,40(sp)
204082ec:	6145                	addi	sp,sp,48
204082ee:	8082                	ret

204082f0 <metal_timer_get_timebase_frequency>:
metal_timer_get_timebase_frequency():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:25

int metal_timer_get_timebase_frequency(int hartid, unsigned long long *timebase)
{
204082f0:	7179                	addi	sp,sp,-48
204082f2:	d606                	sw	ra,44(sp)
204082f4:	d422                	sw	s0,40(sp)
204082f6:	1800                	addi	s0,sp,48
204082f8:	fca42e23          	sw	a0,-36(s0)
204082fc:	fcb42c23          	sw	a1,-40(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:26
    struct metal_cpu *cpu = metal_cpu_get(hartid);
20408300:	fdc42783          	lw	a5,-36(s0)
20408304:	853e                	mv	a0,a5
20408306:	9a5ff0ef          	jal	ra,20407caa <metal_cpu_get>
2040830a:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:28

    if ( cpu ) {
2040830e:	fec42783          	lw	a5,-20(s0)
20408312:	cf91                	beqz	a5,2040832e <metal_timer_get_timebase_frequency+0x3e>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:29
        *timebase = metal_cpu_get_timebase(cpu);
20408314:	fec42503          	lw	a0,-20(s0)
20408318:	943ff0ef          	jal	ra,20407c5a <metal_cpu_get_timebase>
2040831c:	87aa                	mv	a5,a0
2040831e:	882e                	mv	a6,a1
20408320:	fd842703          	lw	a4,-40(s0)
20408324:	c31c                	sw	a5,0(a4)
20408326:	01072223          	sw	a6,4(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:30
        return 0;
2040832a:	4781                	li	a5,0
2040832c:	a011                	j	20408330 <metal_timer_get_timebase_frequency+0x40>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:32
    } 
    return -1;
2040832e:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/timer.c:33
}
20408330:	853e                	mv	a0,a5
20408332:	50b2                	lw	ra,44(sp)
20408334:	5422                	lw	s0,40(sp)
20408336:	6145                	addi	sp,sp,48
20408338:	8082                	ret

2040833a <_close>:
_close():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
2040833a:	1101                	addi	sp,sp,-32
2040833c:	ce06                	sw	ra,28(sp)
2040833e:	cc22                	sw	s0,24(sp)
20408340:	1000                	addi	s0,sp,32
20408342:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20408346:	2a51                	jal	204084da <__errno>
20408348:	872a                	mv	a4,a0
2040834a:	05800793          	li	a5,88
2040834e:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20408350:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20408352:	853e                	mv	a0,a5
20408354:	40f2                	lw	ra,28(sp)
20408356:	4462                	lw	s0,24(sp)
20408358:	6105                	addi	sp,sp,32
2040835a:	8082                	ret

2040835c <_fstat>:
_fstat():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
2040835c:	1101                	addi	sp,sp,-32
2040835e:	ce06                	sw	ra,28(sp)
20408360:	cc22                	sw	s0,24(sp)
20408362:	1000                	addi	s0,sp,32
20408364:	fea42623          	sw	a0,-20(s0)
20408368:	feb42423          	sw	a1,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
2040836c:	22bd                	jal	204084da <__errno>
2040836e:	872a                	mv	a4,a0
20408370:	fa800793          	li	a5,-88
20408374:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20408376:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20408378:	853e                	mv	a0,a5
2040837a:	40f2                	lw	ra,28(sp)
2040837c:	4462                	lw	s0,24(sp)
2040837e:	6105                	addi	sp,sp,32
20408380:	8082                	ret

20408382 <_isatty>:
_isatty():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20408382:	1101                	addi	sp,sp,-32
20408384:	ce22                	sw	s0,28(sp)
20408386:	1000                	addi	s0,sp,32
20408388:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
2040838c:	fec42783          	lw	a5,-20(s0)
20408390:	17fd                	addi	a5,a5,-1
20408392:	0017b793          	seqz	a5,a5
20408396:	0ff7f793          	andi	a5,a5,255
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
2040839a:	853e                	mv	a0,a5
2040839c:	4472                	lw	s0,28(sp)
2040839e:	6105                	addi	sp,sp,32
204083a0:	8082                	ret

204083a2 <_lseek>:
_lseek():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
204083a2:	1101                	addi	sp,sp,-32
204083a4:	ce06                	sw	ra,28(sp)
204083a6:	cc22                	sw	s0,24(sp)
204083a8:	1000                	addi	s0,sp,32
204083aa:	fea42623          	sw	a0,-20(s0)
204083ae:	feb42423          	sw	a1,-24(s0)
204083b2:	fec42223          	sw	a2,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
204083b6:	2215                	jal	204084da <__errno>
204083b8:	872a                	mv	a4,a0
204083ba:	05800793          	li	a5,88
204083be:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
204083c0:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
204083c2:	853e                	mv	a0,a5
204083c4:	40f2                	lw	ra,28(sp)
204083c6:	4462                	lw	s0,24(sp)
204083c8:	6105                	addi	sp,sp,32
204083ca:	8082                	ret

204083cc <_read>:
_read():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
204083cc:	1101                	addi	sp,sp,-32
204083ce:	ce06                	sw	ra,28(sp)
204083d0:	cc22                	sw	s0,24(sp)
204083d2:	1000                	addi	s0,sp,32
204083d4:	fea42623          	sw	a0,-20(s0)
204083d8:	feb42423          	sw	a1,-24(s0)
204083dc:	fec42223          	sw	a2,-28(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
204083e0:	28ed                	jal	204084da <__errno>
204083e2:	872a                	mv	a4,a0
204083e4:	05800793          	li	a5,88
204083e8:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
204083ea:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
204083ec:	853e                	mv	a0,a5
204083ee:	40f2                	lw	ra,28(sp)
204083f0:	4462                	lw	s0,24(sp)
204083f2:	6105                	addi	sp,sp,32
204083f4:	8082                	ret

204083f6 <_sbrk>:
_sbrk():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204083f6:	7179                	addi	sp,sp,-48
204083f8:	d622                	sw	s0,44(sp)
204083fa:	1800                	addi	s0,sp,48
204083fc:	fca42e23          	sw	a0,-36(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20408400:	84c1a783          	lw	a5,-1972(gp) # 80000814 <brk>
20408404:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20408408:	800037b7          	lui	a5,0x80003
2040840c:	0b478713          	addi	a4,a5,180 # 800030b4 <metal_segment_heap_target_end+0xfffff800>
20408410:	800047b7          	lui	a5,0x80004
20408414:	8b478793          	addi	a5,a5,-1868 # 800038b4 <metal_segment_heap_target_end+0x0>
20408418:	00f71463          	bne	a4,a5,20408420 <_sbrk+0x2a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
2040841c:	57fd                	li	a5,-1
2040841e:	a82d                	j	20408458 <_sbrk+0x62>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20408420:	84c1a703          	lw	a4,-1972(gp) # 80000814 <brk>
20408424:	fdc42783          	lw	a5,-36(s0)
20408428:	973e                	add	a4,a4,a5
2040842a:	800047b7          	lui	a5,0x80004
2040842e:	8b478793          	addi	a5,a5,-1868 # 800038b4 <metal_segment_heap_target_end+0x0>
20408432:	00f77c63          	bgeu	a4,a5,2040844a <_sbrk+0x54>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20408436:	84c1a703          	lw	a4,-1972(gp) # 80000814 <brk>
2040843a:	fdc42783          	lw	a5,-36(s0)
2040843e:	973e                	add	a4,a4,a5
20408440:	84e1a623          	sw	a4,-1972(gp) # 80000814 <brk>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20408444:	fec42783          	lw	a5,-20(s0)
20408448:	a801                	j	20408458 <_sbrk+0x62>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
2040844a:	80004737          	lui	a4,0x80004
2040844e:	8b470713          	addi	a4,a4,-1868 # 800038b4 <metal_segment_heap_target_end+0x0>
20408452:	84e1a623          	sw	a4,-1972(gp) # 80000814 <brk>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20408456:	57fd                	li	a5,-1
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20408458:	853e                	mv	a0,a5
2040845a:	5432                	lw	s0,44(sp)
2040845c:	6145                	addi	sp,sp,48
2040845e:	8082                	ret

20408460 <_write>:
_write():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20408460:	7179                	addi	sp,sp,-48
20408462:	d606                	sw	ra,44(sp)
20408464:	d422                	sw	s0,40(sp)
20408466:	1800                	addi	s0,sp,48
20408468:	fca42e23          	sw	a0,-36(s0)
2040846c:	fcb42c23          	sw	a1,-40(s0)
20408470:	fcc42a23          	sw	a2,-44(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20408474:	fdc42703          	lw	a4,-36(s0)
20408478:	4785                	li	a5,1
2040847a:	00f70963          	beq	a4,a5,2040848c <_write+0x2c>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
2040847e:	28b1                	jal	204084da <__errno>
20408480:	872a                	mv	a4,a0
20408482:	05800793          	li	a5,88
20408486:	c31c                	sw	a5,0(a4)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20408488:	57fd                	li	a5,-1
2040848a:	a835                	j	204084c6 <_write+0x66>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
2040848c:	fd842783          	lw	a5,-40(s0)
20408490:	fef42423          	sw	a5,-24(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20408494:	fe042623          	sw	zero,-20(s0)
20408498:	a005                	j	204084b8 <_write+0x58>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
2040849a:	fe842703          	lw	a4,-24(s0)
2040849e:	fec42783          	lw	a5,-20(s0)
204084a2:	97ba                	add	a5,a5,a4
204084a4:	0007c783          	lbu	a5,0(a5)
204084a8:	853e                	mv	a0,a5
204084aa:	103000ef          	jal	ra,20408dac <metal_tty_putc>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
204084ae:	fec42783          	lw	a5,-20(s0)
204084b2:	0785                	addi	a5,a5,1
204084b4:	fef42623          	sw	a5,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
204084b8:	fec42703          	lw	a4,-20(s0)
204084bc:	fd442783          	lw	a5,-44(s0)
204084c0:	fcf76de3          	bltu	a4,a5,2040849a <_write+0x3a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
204084c4:	4781                	li	a5,0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
204084c6:	853e                	mv	a0,a5
204084c8:	50b2                	lw	ra,44(sp)
204084ca:	5422                	lw	s0,40(sp)
204084cc:	6145                	addi	sp,sp,48
204084ce:	8082                	ret

204084d0 <atexit>:
atexit():
204084d0:	85aa                	mv	a1,a0
204084d2:	4681                	li	a3,0
204084d4:	4601                	li	a2,0
204084d6:	4501                	li	a0,0
204084d8:	a8d1                	j	204085ac <__register_exitproc>

204084da <__errno>:
__errno():
204084da:	81018793          	addi	a5,gp,-2032 # 800007d8 <_impure_ptr>
204084de:	4388                	lw	a0,0(a5)
204084e0:	8082                	ret

204084e2 <exit>:
exit():
204084e2:	1141                	addi	sp,sp,-16
204084e4:	c422                	sw	s0,8(sp)
204084e6:	c606                	sw	ra,12(sp)
204084e8:	00000797          	auipc	a5,0x0
204084ec:	14c78793          	addi	a5,a5,332 # 20408634 <__call_exitprocs>
204084f0:	842a                	mv	s0,a0
204084f2:	c399                	beqz	a5,204084f8 <exit+0x16>
204084f4:	4581                	li	a1,0
204084f6:	2a3d                	jal	20408634 <__call_exitprocs>
204084f8:	81418793          	addi	a5,gp,-2028 # 800007dc <_global_impure_ptr>
204084fc:	4388                	lw	a0,0(a5)
204084fe:	551c                	lw	a5,40(a0)
20408500:	c391                	beqz	a5,20408504 <exit+0x22>
20408502:	9782                	jalr	a5
20408504:	8522                	mv	a0,s0
20408506:	11f000ef          	jal	ra,20408e24 <_exit>

2040850a <__libc_fini_array>:
__libc_fini_array():
2040850a:	1141                	addi	sp,sp,-16
2040850c:	0003e797          	auipc	a5,0x3e
20408510:	e4078793          	addi	a5,a5,-448 # 2044634c <__fini_array_end>
20408514:	c422                	sw	s0,8(sp)
20408516:	0003e417          	auipc	s0,0x3e
2040851a:	e3640413          	addi	s0,s0,-458 # 2044634c <__fini_array_end>
2040851e:	8c1d                	sub	s0,s0,a5
20408520:	c226                	sw	s1,4(sp)
20408522:	c606                	sw	ra,12(sp)
20408524:	8409                	srai	s0,s0,0x2
20408526:	84be                	mv	s1,a5
20408528:	e411                	bnez	s0,20408534 <__libc_fini_array+0x2a>
2040852a:	40b2                	lw	ra,12(sp)
2040852c:	4422                	lw	s0,8(sp)
2040852e:	4492                	lw	s1,4(sp)
20408530:	0141                	addi	sp,sp,16
20408532:	8082                	ret
20408534:	147d                	addi	s0,s0,-1
20408536:	00241793          	slli	a5,s0,0x2
2040853a:	97a6                	add	a5,a5,s1
2040853c:	439c                	lw	a5,0(a5)
2040853e:	9782                	jalr	a5
20408540:	b7e5                	j	20408528 <__libc_fini_array+0x1e>

20408542 <__libc_init_array>:
__libc_init_array():
20408542:	1141                	addi	sp,sp,-16
20408544:	0003e797          	auipc	a5,0x3e
20408548:	dfc78793          	addi	a5,a5,-516 # 20446340 <__init_array_start>
2040854c:	c422                	sw	s0,8(sp)
2040854e:	0003e417          	auipc	s0,0x3e
20408552:	df240413          	addi	s0,s0,-526 # 20446340 <__init_array_start>
20408556:	8c1d                	sub	s0,s0,a5
20408558:	c226                	sw	s1,4(sp)
2040855a:	c04a                	sw	s2,0(sp)
2040855c:	c606                	sw	ra,12(sp)
2040855e:	8409                	srai	s0,s0,0x2
20408560:	4481                	li	s1,0
20408562:	893e                	mv	s2,a5
20408564:	02849663          	bne	s1,s0,20408590 <__libc_init_array+0x4e>
20408568:	0003e797          	auipc	a5,0x3e
2040856c:	dd878793          	addi	a5,a5,-552 # 20446340 <__init_array_start>
20408570:	0003e417          	auipc	s0,0x3e
20408574:	ddc40413          	addi	s0,s0,-548 # 2044634c <__fini_array_end>
20408578:	8c1d                	sub	s0,s0,a5
2040857a:	8409                	srai	s0,s0,0x2
2040857c:	4481                	li	s1,0
2040857e:	893e                	mv	s2,a5
20408580:	00849f63          	bne	s1,s0,2040859e <__libc_init_array+0x5c>
20408584:	40b2                	lw	ra,12(sp)
20408586:	4422                	lw	s0,8(sp)
20408588:	4492                	lw	s1,4(sp)
2040858a:	4902                	lw	s2,0(sp)
2040858c:	0141                	addi	sp,sp,16
2040858e:	8082                	ret
20408590:	00249793          	slli	a5,s1,0x2
20408594:	97ca                	add	a5,a5,s2
20408596:	439c                	lw	a5,0(a5)
20408598:	0485                	addi	s1,s1,1
2040859a:	9782                	jalr	a5
2040859c:	b7e1                	j	20408564 <__libc_init_array+0x22>
2040859e:	00249793          	slli	a5,s1,0x2
204085a2:	97ca                	add	a5,a5,s2
204085a4:	439c                	lw	a5,0(a5)
204085a6:	0485                	addi	s1,s1,1
204085a8:	9782                	jalr	a5
204085aa:	bfd9                	j	20408580 <__libc_init_array+0x3e>

204085ac <__register_exitproc>:
__register_exitproc():
204085ac:	5fbf8797          	auipc	a5,0x5fbf8
204085b0:	27478793          	addi	a5,a5,628 # 80000820 <_global_atexit>
204085b4:	439c                	lw	a5,0(a5)
204085b6:	8e2a                	mv	t3,a0
204085b8:	e39d                	bnez	a5,204085de <__register_exitproc+0x32>
204085ba:	5fbf8717          	auipc	a4,0x5fbf8
204085be:	26a70713          	addi	a4,a4,618 # 80000824 <_global_atexit0>
204085c2:	5fbf8797          	auipc	a5,0x5fbf8
204085c6:	24e7af23          	sw	a4,606(a5) # 80000820 <_global_atexit>
204085ca:	dfbf8517          	auipc	a0,0xdfbf8
204085ce:	a3650513          	addi	a0,a0,-1482 # 0 <__metal_boot_hart>
204085d2:	87ba                	mv	a5,a4
204085d4:	c509                	beqz	a0,204085de <__register_exitproc+0x32>
204085d6:	411c                	lw	a5,0(a0)
204085d8:	8ef1a223          	sw	a5,-1820(gp) # 800008ac <_global_atexit0+0x88>
204085dc:	87ba                	mv	a5,a4
204085de:	43d8                	lw	a4,4(a5)
204085e0:	487d                	li	a6,31
204085e2:	557d                	li	a0,-1
204085e4:	04e84763          	blt	a6,a4,20408632 <__register_exitproc+0x86>
204085e8:	020e0e63          	beqz	t3,20408624 <__register_exitproc+0x78>
204085ec:	0887a803          	lw	a6,136(a5)
204085f0:	04080163          	beqz	a6,20408632 <__register_exitproc+0x86>
204085f4:	00271893          	slli	a7,a4,0x2
204085f8:	98c2                	add	a7,a7,a6
204085fa:	00c8a023          	sw	a2,0(a7)
204085fe:	10082303          	lw	t1,256(a6)
20408602:	4605                	li	a2,1
20408604:	00e61633          	sll	a2,a2,a4
20408608:	00c36333          	or	t1,t1,a2
2040860c:	10682023          	sw	t1,256(a6)
20408610:	08d8a023          	sw	a3,128(a7)
20408614:	4689                	li	a3,2
20408616:	00de1763          	bne	t3,a3,20408624 <__register_exitproc+0x78>
2040861a:	10482683          	lw	a3,260(a6)
2040861e:	8e55                	or	a2,a2,a3
20408620:	10c82223          	sw	a2,260(a6)
20408624:	00170693          	addi	a3,a4,1
20408628:	070a                	slli	a4,a4,0x2
2040862a:	c3d4                	sw	a3,4(a5)
2040862c:	97ba                	add	a5,a5,a4
2040862e:	c78c                	sw	a1,8(a5)
20408630:	4501                	li	a0,0
20408632:	8082                	ret

20408634 <__call_exitprocs>:
__call_exitprocs():
20408634:	7179                	addi	sp,sp,-48
20408636:	cc52                	sw	s4,24(sp)
20408638:	ca56                	sw	s5,20(sp)
2040863a:	c85a                	sw	s6,16(sp)
2040863c:	c65e                	sw	s7,12(sp)
2040863e:	d606                	sw	ra,44(sp)
20408640:	d422                	sw	s0,40(sp)
20408642:	d226                	sw	s1,36(sp)
20408644:	d04a                	sw	s2,32(sp)
20408646:	ce4e                	sw	s3,28(sp)
20408648:	c462                	sw	s8,8(sp)
2040864a:	8b2a                	mv	s6,a0
2040864c:	8a2e                	mv	s4,a1
2040864e:	5fbf8a97          	auipc	s5,0x5fbf8
20408652:	1d2a8a93          	addi	s5,s5,466 # 80000820 <_global_atexit>
20408656:	4b85                	li	s7,1
20408658:	000aa403          	lw	s0,0(s5)
2040865c:	c811                	beqz	s0,20408670 <__call_exitprocs+0x3c>
2040865e:	4044                	lw	s1,4(s0)
20408660:	08842983          	lw	s3,136(s0)
20408664:	fff48913          	addi	s2,s1,-1
20408668:	048a                	slli	s1,s1,0x2
2040866a:	94a2                	add	s1,s1,s0
2040866c:	00095e63          	bgez	s2,20408688 <__call_exitprocs+0x54>
20408670:	50b2                	lw	ra,44(sp)
20408672:	5422                	lw	s0,40(sp)
20408674:	5492                	lw	s1,36(sp)
20408676:	5902                	lw	s2,32(sp)
20408678:	49f2                	lw	s3,28(sp)
2040867a:	4a62                	lw	s4,24(sp)
2040867c:	4ad2                	lw	s5,20(sp)
2040867e:	4b42                	lw	s6,16(sp)
20408680:	4bb2                	lw	s7,12(sp)
20408682:	4c22                	lw	s8,8(sp)
20408684:	6145                	addi	sp,sp,48
20408686:	8082                	ret
20408688:	000a0e63          	beqz	s4,204086a4 <__call_exitprocs+0x70>
2040868c:	00099563          	bnez	s3,20408696 <__call_exitprocs+0x62>
20408690:	197d                	addi	s2,s2,-1
20408692:	14f1                	addi	s1,s1,-4
20408694:	bfe1                	j	2040866c <__call_exitprocs+0x38>
20408696:	00291793          	slli	a5,s2,0x2
2040869a:	97ce                	add	a5,a5,s3
2040869c:	0807a783          	lw	a5,128(a5)
204086a0:	ff4798e3          	bne	a5,s4,20408690 <__call_exitprocs+0x5c>
204086a4:	4058                	lw	a4,4(s0)
204086a6:	40dc                	lw	a5,4(s1)
204086a8:	177d                	addi	a4,a4,-1
204086aa:	03271863          	bne	a4,s2,204086da <__call_exitprocs+0xa6>
204086ae:	01242223          	sw	s2,4(s0)
204086b2:	dff9                	beqz	a5,20408690 <__call_exitprocs+0x5c>
204086b4:	00442c03          	lw	s8,4(s0)
204086b8:	00098863          	beqz	s3,204086c8 <__call_exitprocs+0x94>
204086bc:	1009a683          	lw	a3,256(s3)
204086c0:	012b9733          	sll	a4,s7,s2
204086c4:	8ef9                	and	a3,a3,a4
204086c6:	ee89                	bnez	a3,204086e0 <__call_exitprocs+0xac>
204086c8:	9782                	jalr	a5
204086ca:	4058                	lw	a4,4(s0)
204086cc:	000aa783          	lw	a5,0(s5)
204086d0:	f98714e3          	bne	a4,s8,20408658 <__call_exitprocs+0x24>
204086d4:	faf40ee3          	beq	s0,a5,20408690 <__call_exitprocs+0x5c>
204086d8:	b741                	j	20408658 <__call_exitprocs+0x24>
204086da:	0004a223          	sw	zero,4(s1)
204086de:	bfd1                	j	204086b2 <__call_exitprocs+0x7e>
204086e0:	00291693          	slli	a3,s2,0x2
204086e4:	96ce                	add	a3,a3,s3
204086e6:	428c                	lw	a1,0(a3)
204086e8:	1049a683          	lw	a3,260(s3)
204086ec:	8f75                	and	a4,a4,a3
204086ee:	e701                	bnez	a4,204086f6 <__call_exitprocs+0xc2>
204086f0:	855a                	mv	a0,s6
204086f2:	9782                	jalr	a5
204086f4:	bfd9                	j	204086ca <__call_exitprocs+0x96>
204086f6:	852e                	mv	a0,a1
204086f8:	9782                	jalr	a5
204086fa:	bfc1                	j	204086ca <__call_exitprocs+0x96>

204086fc <__udivdi3>:
__udivdi3():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1319
204086fc:	87ae                	mv	a5,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1024
204086fe:	8832                	mv	a6,a2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1025
20408700:	8736                	mv	a4,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1026
20408702:	832a                	mv	t1,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1064
20408704:	20069663          	bnez	a3,20408910 <__udivdi3+0x214>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1066
20408708:	0003d897          	auipc	a7,0x3d
2040870c:	f4888893          	addi	a7,a7,-184 # 20445650 <__clz_tab>
20408710:	0ac5fe63          	bgeu	a1,a2,204087cc <__udivdi3+0xd0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1070
20408714:	6741                	lui	a4,0x10
20408716:	0ae67463          	bgeu	a2,a4,204087be <__udivdi3+0xc2>
2040871a:	0ff00713          	li	a4,255
2040871e:	00c73733          	sltu	a4,a4,a2
20408722:	070e                	slli	a4,a4,0x3
20408724:	00e656b3          	srl	a3,a2,a4
20408728:	98b6                	add	a7,a7,a3
2040872a:	0008c683          	lbu	a3,0(a7)
2040872e:	9736                	add	a4,a4,a3
20408730:	02000693          	li	a3,32
20408734:	8e99                	sub	a3,a3,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1072
20408736:	ca99                	beqz	a3,2040874c <__udivdi3+0x50>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1078
20408738:	00d797b3          	sll	a5,a5,a3
2040873c:	00e55733          	srl	a4,a0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1077
20408740:	00d61833          	sll	a6,a2,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1078
20408744:	00f765b3          	or	a1,a4,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1079
20408748:	00d51333          	sll	t1,a0,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1082
2040874c:	01085513          	srli	a0,a6,0x10
20408750:	02a5f733          	remu	a4,a1,a0
20408754:	01081613          	slli	a2,a6,0x10
20408758:	8241                	srli	a2,a2,0x10
2040875a:	01035693          	srli	a3,t1,0x10
2040875e:	02a5d5b3          	divu	a1,a1,a0
20408762:	0742                	slli	a4,a4,0x10
20408764:	8ed9                	or	a3,a3,a4
20408766:	02b607b3          	mul	a5,a2,a1
2040876a:	872e                	mv	a4,a1
2040876c:	00f6fc63          	bgeu	a3,a5,20408784 <__udivdi3+0x88>
20408770:	96c2                	add	a3,a3,a6
20408772:	fff58713          	addi	a4,a1,-1
20408776:	0106e763          	bltu	a3,a6,20408784 <__udivdi3+0x88>
2040877a:	00f6f563          	bgeu	a3,a5,20408784 <__udivdi3+0x88>
2040877e:	ffe58713          	addi	a4,a1,-2
20408782:	96c2                	add	a3,a3,a6
20408784:	8e9d                	sub	a3,a3,a5
20408786:	02a6f7b3          	remu	a5,a3,a0
2040878a:	0342                	slli	t1,t1,0x10
2040878c:	01035313          	srli	t1,t1,0x10
20408790:	02a6d6b3          	divu	a3,a3,a0
20408794:	07c2                	slli	a5,a5,0x10
20408796:	0067e333          	or	t1,a5,t1
2040879a:	02d605b3          	mul	a1,a2,a3
2040879e:	8536                	mv	a0,a3
204087a0:	00b37b63          	bgeu	t1,a1,204087b6 <__udivdi3+0xba>
204087a4:	9342                	add	t1,t1,a6
204087a6:	fff68513          	addi	a0,a3,-1
204087aa:	01036663          	bltu	t1,a6,204087b6 <__udivdi3+0xba>
204087ae:	00b37463          	bgeu	t1,a1,204087b6 <__udivdi3+0xba>
204087b2:	ffe68513          	addi	a0,a3,-2
204087b6:	0742                	slli	a4,a4,0x10
204087b8:	8f49                	or	a4,a4,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1209
204087ba:	4581                	li	a1,0
204087bc:	a84d                	j	2040886e <__udivdi3+0x172>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1070
204087be:	010006b7          	lui	a3,0x1000
204087c2:	4741                	li	a4,16
204087c4:	f6d660e3          	bltu	a2,a3,20408724 <__udivdi3+0x28>
204087c8:	4761                	li	a4,24
204087ca:	bfa9                	j	20408724 <__udivdi3+0x28>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1091
204087cc:	e601                	bnez	a2,204087d4 <__udivdi3+0xd8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1092
204087ce:	4685                	li	a3,1
204087d0:	02c6d833          	divu	a6,a3,a2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1094
204087d4:	66c1                	lui	a3,0x10
204087d6:	08d87e63          	bgeu	a6,a3,20408872 <__udivdi3+0x176>
204087da:	0ff00693          	li	a3,255
204087de:	0106f363          	bgeu	a3,a6,204087e4 <__udivdi3+0xe8>
204087e2:	4721                	li	a4,8
204087e4:	00e856b3          	srl	a3,a6,a4
204087e8:	98b6                	add	a7,a7,a3
204087ea:	0008c683          	lbu	a3,0(a7)
204087ee:	96ba                	add	a3,a3,a4
204087f0:	02000713          	li	a4,32
204087f4:	8f15                	sub	a4,a4,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1096
204087f6:	e749                	bnez	a4,20408880 <__udivdi3+0x184>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1105
204087f8:	410787b3          	sub	a5,a5,a6
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1106
204087fc:	4585                	li	a1,1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1124
204087fe:	01085613          	srli	a2,a6,0x10
20408802:	01081893          	slli	a7,a6,0x10
20408806:	0108d893          	srli	a7,a7,0x10
2040880a:	01035693          	srli	a3,t1,0x10
2040880e:	02c7f733          	remu	a4,a5,a2
20408812:	02c7d7b3          	divu	a5,a5,a2
20408816:	0742                	slli	a4,a4,0x10
20408818:	8ed9                	or	a3,a3,a4
2040881a:	02f88533          	mul	a0,a7,a5
2040881e:	873e                	mv	a4,a5
20408820:	00a6fc63          	bgeu	a3,a0,20408838 <__udivdi3+0x13c>
20408824:	96c2                	add	a3,a3,a6
20408826:	fff78713          	addi	a4,a5,-1
2040882a:	0106e763          	bltu	a3,a6,20408838 <__udivdi3+0x13c>
2040882e:	00a6f563          	bgeu	a3,a0,20408838 <__udivdi3+0x13c>
20408832:	ffe78713          	addi	a4,a5,-2
20408836:	96c2                	add	a3,a3,a6
20408838:	8e89                	sub	a3,a3,a0
2040883a:	02c6f7b3          	remu	a5,a3,a2
2040883e:	0342                	slli	t1,t1,0x10
20408840:	01035313          	srli	t1,t1,0x10
20408844:	02c6d6b3          	divu	a3,a3,a2
20408848:	07c2                	slli	a5,a5,0x10
2040884a:	0067e333          	or	t1,a5,t1
2040884e:	02d888b3          	mul	a7,a7,a3
20408852:	8536                	mv	a0,a3
20408854:	01137b63          	bgeu	t1,a7,2040886a <__udivdi3+0x16e>
20408858:	9342                	add	t1,t1,a6
2040885a:	fff68513          	addi	a0,a3,-1 # ffff <__stack_size+0xd7ff>
2040885e:	01036663          	bltu	t1,a6,2040886a <__udivdi3+0x16e>
20408862:	01137463          	bgeu	t1,a7,2040886a <__udivdi3+0x16e>
20408866:	ffe68513          	addi	a0,a3,-2
2040886a:	0742                	slli	a4,a4,0x10
2040886c:	8f49                	or	a4,a4,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1321
2040886e:	853a                	mv	a0,a4
20408870:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1094
20408872:	010006b7          	lui	a3,0x1000
20408876:	4741                	li	a4,16
20408878:	f6d866e3          	bltu	a6,a3,204087e4 <__udivdi3+0xe8>
2040887c:	4761                	li	a4,24
2040887e:	b79d                	j	204087e4 <__udivdi3+0xe8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1114
20408880:	00e81833          	sll	a6,a6,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1115
20408884:	00d7d5b3          	srl	a1,a5,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1117
20408888:	00e51333          	sll	t1,a0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1116
2040888c:	00d556b3          	srl	a3,a0,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1119
20408890:	01085513          	srli	a0,a6,0x10
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1116
20408894:	00e797b3          	sll	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1119
20408898:	02a5f733          	remu	a4,a1,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1116
2040889c:	00f6e8b3          	or	a7,a3,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1119
204088a0:	01081793          	slli	a5,a6,0x10
204088a4:	83c1                	srli	a5,a5,0x10
204088a6:	0108d613          	srli	a2,a7,0x10
204088aa:	02a5d5b3          	divu	a1,a1,a0
204088ae:	0742                	slli	a4,a4,0x10
204088b0:	8f51                	or	a4,a4,a2
204088b2:	02b786b3          	mul	a3,a5,a1
204088b6:	862e                	mv	a2,a1
204088b8:	00d77c63          	bgeu	a4,a3,204088d0 <__udivdi3+0x1d4>
204088bc:	9742                	add	a4,a4,a6
204088be:	fff58613          	addi	a2,a1,-1
204088c2:	01076763          	bltu	a4,a6,204088d0 <__udivdi3+0x1d4>
204088c6:	00d77563          	bgeu	a4,a3,204088d0 <__udivdi3+0x1d4>
204088ca:	ffe58613          	addi	a2,a1,-2
204088ce:	9742                	add	a4,a4,a6
204088d0:	40d706b3          	sub	a3,a4,a3
204088d4:	02a6f733          	remu	a4,a3,a0
204088d8:	08c2                	slli	a7,a7,0x10
204088da:	0108d893          	srli	a7,a7,0x10
204088de:	02a6d6b3          	divu	a3,a3,a0
204088e2:	0742                	slli	a4,a4,0x10
204088e4:	02d785b3          	mul	a1,a5,a3
204088e8:	011767b3          	or	a5,a4,a7
204088ec:	8736                	mv	a4,a3
204088ee:	00b7fc63          	bgeu	a5,a1,20408906 <__udivdi3+0x20a>
204088f2:	97c2                	add	a5,a5,a6
204088f4:	fff68713          	addi	a4,a3,-1 # ffffff <__stack_size+0xffd7ff>
204088f8:	0107e763          	bltu	a5,a6,20408906 <__udivdi3+0x20a>
204088fc:	00b7f563          	bgeu	a5,a1,20408906 <__udivdi3+0x20a>
20408900:	ffe68713          	addi	a4,a3,-2
20408904:	97c2                	add	a5,a5,a6
20408906:	8f8d                	sub	a5,a5,a1
20408908:	01061593          	slli	a1,a2,0x10
2040890c:	8dd9                	or	a1,a1,a4
2040890e:	bdc5                	j	204087fe <__udivdi3+0x102>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1140
20408910:	14d5e263          	bltu	a1,a3,20408a54 <__udivdi3+0x358>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1159
20408914:	6741                	lui	a4,0x10
20408916:	02e6fe63          	bgeu	a3,a4,20408952 <__udivdi3+0x256>
2040891a:	0ff00813          	li	a6,255
2040891e:	00d83733          	sltu	a4,a6,a3
20408922:	070e                	slli	a4,a4,0x3
20408924:	00e6d833          	srl	a6,a3,a4
20408928:	0003d597          	auipc	a1,0x3d
2040892c:	d2858593          	addi	a1,a1,-728 # 20445650 <__clz_tab>
20408930:	95c2                	add	a1,a1,a6
20408932:	0005c803          	lbu	a6,0(a1)
20408936:	02000593          	li	a1,32
2040893a:	983a                	add	a6,a6,a4
2040893c:	410585b3          	sub	a1,a1,a6
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1160
20408940:	e185                	bnez	a1,20408960 <__udivdi3+0x264>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1172
20408942:	4705                	li	a4,1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1170
20408944:	f2f6e5e3          	bltu	a3,a5,2040886e <__udivdi3+0x172>
20408948:	00c53533          	sltu	a0,a0,a2
2040894c:	00154713          	xori	a4,a0,1
20408950:	bf39                	j	2040886e <__udivdi3+0x172>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1159
20408952:	010005b7          	lui	a1,0x1000
20408956:	4741                	li	a4,16
20408958:	fcb6e6e3          	bltu	a3,a1,20408924 <__udivdi3+0x228>
2040895c:	4761                	li	a4,24
2040895e:	b7d9                	j	20408924 <__udivdi3+0x228>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1194
20408960:	01065733          	srl	a4,a2,a6
20408964:	00b696b3          	sll	a3,a3,a1
20408968:	8ed9                	or	a3,a3,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
2040896a:	0106de93          	srli	t4,a3,0x10
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1196
2040896e:	0107d733          	srl	a4,a5,a6
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408972:	03d778b3          	remu	a7,a4,t4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1197
20408976:	00b797b3          	sll	a5,a5,a1
2040897a:	01055833          	srl	a6,a0,a6
2040897e:	00f86333          	or	t1,a6,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408982:	01069793          	slli	a5,a3,0x10
20408986:	83c1                	srli	a5,a5,0x10
20408988:	01035813          	srli	a6,t1,0x10
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1195
2040898c:	00b61633          	sll	a2,a2,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408990:	03d75733          	divu	a4,a4,t4
20408994:	08c2                	slli	a7,a7,0x10
20408996:	0108e833          	or	a6,a7,a6
2040899a:	02e78f33          	mul	t5,a5,a4
2040899e:	8e3a                	mv	t3,a4
204089a0:	01e87c63          	bgeu	a6,t5,204089b8 <__udivdi3+0x2bc>
204089a4:	9836                	add	a6,a6,a3
204089a6:	fff70e13          	addi	t3,a4,-1 # ffff <__stack_size+0xd7ff>
204089aa:	00d86763          	bltu	a6,a3,204089b8 <__udivdi3+0x2bc>
204089ae:	01e87563          	bgeu	a6,t5,204089b8 <__udivdi3+0x2bc>
204089b2:	ffe70e13          	addi	t3,a4,-2
204089b6:	9836                	add	a6,a6,a3
204089b8:	41e80833          	sub	a6,a6,t5
204089bc:	03d878b3          	remu	a7,a6,t4
204089c0:	03d85833          	divu	a6,a6,t4
204089c4:	08c2                	slli	a7,a7,0x10
204089c6:	03078eb3          	mul	t4,a5,a6
204089ca:	01031793          	slli	a5,t1,0x10
204089ce:	83c1                	srli	a5,a5,0x10
204089d0:	00f8e7b3          	or	a5,a7,a5
204089d4:	8742                	mv	a4,a6
204089d6:	01d7fc63          	bgeu	a5,t4,204089ee <__udivdi3+0x2f2>
204089da:	97b6                	add	a5,a5,a3
204089dc:	fff80713          	addi	a4,a6,-1
204089e0:	00d7e763          	bltu	a5,a3,204089ee <__udivdi3+0x2f2>
204089e4:	01d7f563          	bgeu	a5,t4,204089ee <__udivdi3+0x2f2>
204089e8:	ffe80713          	addi	a4,a6,-2
204089ec:	97b6                	add	a5,a5,a3
204089ee:	0e42                	slli	t3,t3,0x10
204089f0:	41d787b3          	sub	a5,a5,t4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1201
204089f4:	6ec1                	lui	t4,0x10
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
204089f6:	00ee6733          	or	a4,t3,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1201
204089fa:	fffe8813          	addi	a6,t4,-1 # ffff <__stack_size+0xd7ff>
204089fe:	01077333          	and	t1,a4,a6
20408a02:	01075893          	srli	a7,a4,0x10
20408a06:	01067833          	and	a6,a2,a6
20408a0a:	8241                	srli	a2,a2,0x10
20408a0c:	03030e33          	mul	t3,t1,a6
20408a10:	03088833          	mul	a6,a7,a6
20408a14:	010e5693          	srli	a3,t3,0x10
20408a18:	02c30333          	mul	t1,t1,a2
20408a1c:	9342                	add	t1,t1,a6
20408a1e:	969a                	add	a3,a3,t1
20408a20:	02c888b3          	mul	a7,a7,a2
20408a24:	0106f363          	bgeu	a3,a6,20408a2a <__udivdi3+0x32e>
20408a28:	98f6                	add	a7,a7,t4
20408a2a:	0106d613          	srli	a2,a3,0x10
20408a2e:	98b2                	add	a7,a7,a2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1203
20408a30:	0317e063          	bltu	a5,a7,20408a50 <__udivdi3+0x354>
20408a34:	d91793e3          	bne	a5,a7,204087ba <__udivdi3+0xbe>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1201
20408a38:	67c1                	lui	a5,0x10
20408a3a:	17fd                	addi	a5,a5,-1
20408a3c:	8efd                	and	a3,a3,a5
20408a3e:	06c2                	slli	a3,a3,0x10
20408a40:	00fe7e33          	and	t3,t3,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1198
20408a44:	00b51533          	sll	a0,a0,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1201
20408a48:	96f2                	add	a3,a3,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1209
20408a4a:	4581                	li	a1,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1203
20408a4c:	e2d571e3          	bgeu	a0,a3,2040886e <__udivdi3+0x172>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1205
20408a50:	177d                	addi	a4,a4,-1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1206
20408a52:	b3a5                	j	204087ba <__udivdi3+0xbe>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1145
20408a54:	4581                	li	a1,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1144
20408a56:	4701                	li	a4,0
20408a58:	bd19                	j	2040886e <__udivdi3+0x172>

20408a5a <__umoddi3>:
__udivmoddi4():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1024
20408a5a:	88b2                	mv	a7,a2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1025
20408a5c:	8736                	mv	a4,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1026
20408a5e:	87aa                	mv	a5,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1027
20408a60:	882e                	mv	a6,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1064
20408a62:	1c069863          	bnez	a3,20408c32 <__umoddi3+0x1d8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1066
20408a66:	0003d697          	auipc	a3,0x3d
20408a6a:	bea68693          	addi	a3,a3,-1046 # 20445650 <__clz_tab>
20408a6e:	0ac5f863          	bgeu	a1,a2,20408b1e <__umoddi3+0xc4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1070
20408a72:	6341                	lui	t1,0x10
20408a74:	08667e63          	bgeu	a2,t1,20408b10 <__umoddi3+0xb6>
20408a78:	0ff00313          	li	t1,255
20408a7c:	00c37363          	bgeu	t1,a2,20408a82 <__umoddi3+0x28>
20408a80:	4721                	li	a4,8
20408a82:	00e65333          	srl	t1,a2,a4
20408a86:	969a                	add	a3,a3,t1
20408a88:	0006ce03          	lbu	t3,0(a3)
20408a8c:	02000313          	li	t1,32
20408a90:	9e3a                	add	t3,t3,a4
20408a92:	41c30333          	sub	t1,t1,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1072
20408a96:	00030c63          	beqz	t1,20408aae <__umoddi3+0x54>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1078
20408a9a:	006595b3          	sll	a1,a1,t1
20408a9e:	01c55e33          	srl	t3,a0,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1077
20408aa2:	006618b3          	sll	a7,a2,t1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1078
20408aa6:	00be6833          	or	a6,t3,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1079
20408aaa:	006517b3          	sll	a5,a0,t1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1082
20408aae:	0108d613          	srli	a2,a7,0x10
20408ab2:	02c87733          	remu	a4,a6,a2
20408ab6:	01089513          	slli	a0,a7,0x10
20408aba:	8141                	srli	a0,a0,0x10
20408abc:	0107d693          	srli	a3,a5,0x10
20408ac0:	02c85833          	divu	a6,a6,a2
20408ac4:	0742                	slli	a4,a4,0x10
20408ac6:	8ed9                	or	a3,a3,a4
20408ac8:	03050833          	mul	a6,a0,a6
20408acc:	0106f863          	bgeu	a3,a6,20408adc <__umoddi3+0x82>
20408ad0:	96c6                	add	a3,a3,a7
20408ad2:	0116e563          	bltu	a3,a7,20408adc <__umoddi3+0x82>
20408ad6:	0106f363          	bgeu	a3,a6,20408adc <__umoddi3+0x82>
20408ada:	96c6                	add	a3,a3,a7
20408adc:	410686b3          	sub	a3,a3,a6
20408ae0:	02c6f733          	remu	a4,a3,a2
20408ae4:	07c2                	slli	a5,a5,0x10
20408ae6:	83c1                	srli	a5,a5,0x10
20408ae8:	02c6d6b3          	divu	a3,a3,a2
20408aec:	02d506b3          	mul	a3,a0,a3
20408af0:	01071513          	slli	a0,a4,0x10
20408af4:	8fc9                	or	a5,a5,a0
20408af6:	00d7f863          	bgeu	a5,a3,20408b06 <__umoddi3+0xac>
20408afa:	97c6                	add	a5,a5,a7
20408afc:	0117e563          	bltu	a5,a7,20408b06 <__umoddi3+0xac>
20408b00:	00d7f363          	bgeu	a5,a3,20408b06 <__umoddi3+0xac>
20408b04:	97c6                	add	a5,a5,a7
20408b06:	8f95                	sub	a5,a5,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1131
20408b08:	0067d533          	srl	a0,a5,t1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1133
20408b0c:	4581                	li	a1,0
__umoddi3():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1313
20408b0e:	8082                	ret
__udivmoddi4():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1070
20408b10:	01000337          	lui	t1,0x1000
20408b14:	4741                	li	a4,16
20408b16:	f66666e3          	bltu	a2,t1,20408a82 <__umoddi3+0x28>
20408b1a:	4761                	li	a4,24
20408b1c:	b79d                	j	20408a82 <__umoddi3+0x28>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1091
20408b1e:	e601                	bnez	a2,20408b26 <__umoddi3+0xcc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1092
20408b20:	4605                	li	a2,1
20408b22:	031658b3          	divu	a7,a2,a7
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1094
20408b26:	6641                	lui	a2,0x10
20408b28:	08c8f363          	bgeu	a7,a2,20408bae <__umoddi3+0x154>
20408b2c:	0ff00613          	li	a2,255
20408b30:	01167363          	bgeu	a2,a7,20408b36 <__umoddi3+0xdc>
20408b34:	4721                	li	a4,8
20408b36:	00e8d633          	srl	a2,a7,a4
20408b3a:	96b2                	add	a3,a3,a2
20408b3c:	0006ce03          	lbu	t3,0(a3)
20408b40:	02000313          	li	t1,32
20408b44:	9e3a                	add	t3,t3,a4
20408b46:	41c30333          	sub	t1,t1,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1096
20408b4a:	06031963          	bnez	t1,20408bbc <__umoddi3+0x162>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1105
20408b4e:	411585b3          	sub	a1,a1,a7
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1124
20408b52:	0108d713          	srli	a4,a7,0x10
20408b56:	01089513          	slli	a0,a7,0x10
20408b5a:	8141                	srli	a0,a0,0x10
20408b5c:	0107d613          	srli	a2,a5,0x10
20408b60:	02e5f6b3          	remu	a3,a1,a4
20408b64:	02e5d5b3          	divu	a1,a1,a4
20408b68:	06c2                	slli	a3,a3,0x10
20408b6a:	8ed1                	or	a3,a3,a2
20408b6c:	02b505b3          	mul	a1,a0,a1
20408b70:	00b6f863          	bgeu	a3,a1,20408b80 <__umoddi3+0x126>
20408b74:	96c6                	add	a3,a3,a7
20408b76:	0116e563          	bltu	a3,a7,20408b80 <__umoddi3+0x126>
20408b7a:	00b6f363          	bgeu	a3,a1,20408b80 <__umoddi3+0x126>
20408b7e:	96c6                	add	a3,a3,a7
20408b80:	40b685b3          	sub	a1,a3,a1
20408b84:	02e5f6b3          	remu	a3,a1,a4
20408b88:	07c2                	slli	a5,a5,0x10
20408b8a:	83c1                	srli	a5,a5,0x10
20408b8c:	02e5d5b3          	divu	a1,a1,a4
20408b90:	02b505b3          	mul	a1,a0,a1
20408b94:	01069513          	slli	a0,a3,0x10
20408b98:	8fc9                	or	a5,a5,a0
20408b9a:	00b7f863          	bgeu	a5,a1,20408baa <__umoddi3+0x150>
20408b9e:	97c6                	add	a5,a5,a7
20408ba0:	0117e563          	bltu	a5,a7,20408baa <__umoddi3+0x150>
20408ba4:	00b7f363          	bgeu	a5,a1,20408baa <__umoddi3+0x150>
20408ba8:	97c6                	add	a5,a5,a7
20408baa:	8f8d                	sub	a5,a5,a1
20408bac:	bfb1                	j	20408b08 <__umoddi3+0xae>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1094
20408bae:	01000637          	lui	a2,0x1000
20408bb2:	4741                	li	a4,16
20408bb4:	f8c8e1e3          	bltu	a7,a2,20408b36 <__umoddi3+0xdc>
20408bb8:	4761                	li	a4,24
20408bba:	bfb5                	j	20408b36 <__umoddi3+0xdc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1114
20408bbc:	006898b3          	sll	a7,a7,t1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1115
20408bc0:	01c5d733          	srl	a4,a1,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1117
20408bc4:	006517b3          	sll	a5,a0,t1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1116
20408bc8:	01c55e33          	srl	t3,a0,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1119
20408bcc:	0108d513          	srli	a0,a7,0x10
20408bd0:	02a776b3          	remu	a3,a4,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1116
20408bd4:	006595b3          	sll	a1,a1,t1
20408bd8:	00be6e33          	or	t3,t3,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1119
20408bdc:	01089593          	slli	a1,a7,0x10
20408be0:	81c1                	srli	a1,a1,0x10
20408be2:	010e5613          	srli	a2,t3,0x10
20408be6:	02a75733          	divu	a4,a4,a0
20408bea:	06c2                	slli	a3,a3,0x10
20408bec:	8ed1                	or	a3,a3,a2
20408bee:	02e58733          	mul	a4,a1,a4
20408bf2:	00e6f863          	bgeu	a3,a4,20408c02 <__umoddi3+0x1a8>
20408bf6:	96c6                	add	a3,a3,a7
20408bf8:	0116e563          	bltu	a3,a7,20408c02 <__umoddi3+0x1a8>
20408bfc:	00e6f363          	bgeu	a3,a4,20408c02 <__umoddi3+0x1a8>
20408c00:	96c6                	add	a3,a3,a7
20408c02:	40e68633          	sub	a2,a3,a4
20408c06:	02a676b3          	remu	a3,a2,a0
20408c0a:	0e42                	slli	t3,t3,0x10
20408c0c:	010e5e13          	srli	t3,t3,0x10
20408c10:	02a65633          	divu	a2,a2,a0
20408c14:	06c2                	slli	a3,a3,0x10
20408c16:	02c58633          	mul	a2,a1,a2
20408c1a:	01c6e5b3          	or	a1,a3,t3
20408c1e:	00c5f863          	bgeu	a1,a2,20408c2e <__umoddi3+0x1d4>
20408c22:	95c6                	add	a1,a1,a7
20408c24:	0115e563          	bltu	a1,a7,20408c2e <__umoddi3+0x1d4>
20408c28:	00c5f363          	bgeu	a1,a2,20408c2e <__umoddi3+0x1d4>
20408c2c:	95c6                	add	a1,a1,a7
20408c2e:	8d91                	sub	a1,a1,a2
20408c30:	b70d                	j	20408b52 <__umoddi3+0xf8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1140
20408c32:	ecd5eee3          	bltu	a1,a3,20408b0e <__umoddi3+0xb4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1159
20408c36:	6741                	lui	a4,0x10
20408c38:	04e6f563          	bgeu	a3,a4,20408c82 <__umoddi3+0x228>
20408c3c:	0ff00e93          	li	t4,255
20408c40:	00deb733          	sltu	a4,t4,a3
20408c44:	070e                	slli	a4,a4,0x3
20408c46:	00e6d333          	srl	t1,a3,a4
20408c4a:	0003d897          	auipc	a7,0x3d
20408c4e:	a0688893          	addi	a7,a7,-1530 # 20445650 <__clz_tab>
20408c52:	989a                	add	a7,a7,t1
20408c54:	0008ce83          	lbu	t4,0(a7)
20408c58:	02000e13          	li	t3,32
20408c5c:	9eba                	add	t4,t4,a4
20408c5e:	41de0e33          	sub	t3,t3,t4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1160
20408c62:	020e1763          	bnez	t3,20408c90 <__umoddi3+0x236>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1170
20408c66:	00b6e463          	bltu	a3,a1,20408c6e <__umoddi3+0x214>
20408c6a:	00c56963          	bltu	a0,a2,20408c7c <__umoddi3+0x222>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1173
20408c6e:	40c507b3          	sub	a5,a0,a2
20408c72:	8d95                	sub	a1,a1,a3
20408c74:	00f53533          	sltu	a0,a0,a5
20408c78:	40a58833          	sub	a6,a1,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1184
20408c7c:	853e                	mv	a0,a5
20408c7e:	85c2                	mv	a1,a6
20408c80:	b579                	j	20408b0e <__umoddi3+0xb4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1159
20408c82:	010008b7          	lui	a7,0x1000
20408c86:	4741                	li	a4,16
20408c88:	fb16efe3          	bltu	a3,a7,20408c46 <__umoddi3+0x1ec>
20408c8c:	4761                	li	a4,24
20408c8e:	bf65                	j	20408c46 <__umoddi3+0x1ec>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1194
20408c90:	01d65733          	srl	a4,a2,t4
20408c94:	01c696b3          	sll	a3,a3,t3
20408c98:	8ed9                	or	a3,a3,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408c9a:	0106d813          	srli	a6,a3,0x10
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1196
20408c9e:	01d5d733          	srl	a4,a1,t4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408ca2:	03077333          	remu	t1,a4,a6
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1197
20408ca6:	01c595b3          	sll	a1,a1,t3
20408caa:	01d557b3          	srl	a5,a0,t4
20408cae:	8fcd                	or	a5,a5,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408cb0:	01069593          	slli	a1,a3,0x10
20408cb4:	81c1                	srli	a1,a1,0x10
20408cb6:	0107d893          	srli	a7,a5,0x10
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1195
20408cba:	01c61633          	sll	a2,a2,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1198
20408cbe:	01c51533          	sll	a0,a0,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408cc2:	03075733          	divu	a4,a4,a6
20408cc6:	0342                	slli	t1,t1,0x10
20408cc8:	011368b3          	or	a7,t1,a7
20408ccc:	02e58f33          	mul	t5,a1,a4
20408cd0:	833a                	mv	t1,a4
20408cd2:	01e8fc63          	bgeu	a7,t5,20408cea <__umoddi3+0x290>
20408cd6:	98b6                	add	a7,a7,a3
20408cd8:	fff70313          	addi	t1,a4,-1 # ffff <__stack_size+0xd7ff>
20408cdc:	00d8e763          	bltu	a7,a3,20408cea <__umoddi3+0x290>
20408ce0:	01e8f563          	bgeu	a7,t5,20408cea <__umoddi3+0x290>
20408ce4:	ffe70313          	addi	t1,a4,-2
20408ce8:	98b6                	add	a7,a7,a3
20408cea:	41e888b3          	sub	a7,a7,t5
20408cee:	0308ff33          	remu	t5,a7,a6
20408cf2:	0308d8b3          	divu	a7,a7,a6
20408cf6:	0f42                	slli	t5,t5,0x10
20408cf8:	03158833          	mul	a6,a1,a7
20408cfc:	01079593          	slli	a1,a5,0x10
20408d00:	81c1                	srli	a1,a1,0x10
20408d02:	00bf65b3          	or	a1,t5,a1
20408d06:	87c6                	mv	a5,a7
20408d08:	0105fc63          	bgeu	a1,a6,20408d20 <__umoddi3+0x2c6>
20408d0c:	95b6                	add	a1,a1,a3
20408d0e:	fff88793          	addi	a5,a7,-1 # ffffff <__stack_size+0xffd7ff>
20408d12:	00d5e763          	bltu	a1,a3,20408d20 <__umoddi3+0x2c6>
20408d16:	0105f563          	bgeu	a1,a6,20408d20 <__umoddi3+0x2c6>
20408d1a:	ffe88793          	addi	a5,a7,-2
20408d1e:	95b6                	add	a1,a1,a3
20408d20:	0342                	slli	t1,t1,0x10
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1201
20408d22:	6f41                	lui	t5,0x10
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408d24:	00f36333          	or	t1,t1,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1201
20408d28:	ffff0793          	addi	a5,t5,-1 # ffff <__stack_size+0xd7ff>
20408d2c:	00f378b3          	and	a7,t1,a5
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1200
20408d30:	410585b3          	sub	a1,a1,a6
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1201
20408d34:	01035313          	srli	t1,t1,0x10
20408d38:	01065813          	srli	a6,a2,0x10
20408d3c:	8ff1                	and	a5,a5,a2
20408d3e:	02f88733          	mul	a4,a7,a5
20408d42:	02f307b3          	mul	a5,t1,a5
20408d46:	030888b3          	mul	a7,a7,a6
20408d4a:	03030333          	mul	t1,t1,a6
20408d4e:	98be                	add	a7,a7,a5
20408d50:	01075813          	srli	a6,a4,0x10
20408d54:	9846                	add	a6,a6,a7
20408d56:	00f87363          	bgeu	a6,a5,20408d5c <__umoddi3+0x302>
20408d5a:	937a                	add	t1,t1,t5
20408d5c:	01085793          	srli	a5,a6,0x10
20408d60:	933e                	add	t1,t1,a5
20408d62:	67c1                	lui	a5,0x10
20408d64:	17fd                	addi	a5,a5,-1
20408d66:	00f87833          	and	a6,a6,a5
20408d6a:	0842                	slli	a6,a6,0x10
20408d6c:	8f7d                	and	a4,a4,a5
20408d6e:	9742                	add	a4,a4,a6
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1203
20408d70:	0065e663          	bltu	a1,t1,20408d7c <__umoddi3+0x322>
20408d74:	00659c63          	bne	a1,t1,20408d8c <__umoddi3+0x332>
20408d78:	00e57a63          	bgeu	a0,a4,20408d8c <__umoddi3+0x332>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1206
20408d7c:	40c70633          	sub	a2,a4,a2
20408d80:	00c73733          	sltu	a4,a4,a2
20408d84:	9736                	add	a4,a4,a3
20408d86:	40e30333          	sub	t1,t1,a4
20408d8a:	8732                	mv	a4,a2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1214
20408d8c:	40e50733          	sub	a4,a0,a4
20408d90:	00e53533          	sltu	a0,a0,a4
20408d94:	406585b3          	sub	a1,a1,t1
20408d98:	8d89                	sub	a1,a1,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1215
20408d9a:	01d597b3          	sll	a5,a1,t4
20408d9e:	01c75733          	srl	a4,a4,t3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1217
20408da2:	00e7e533          	or	a0,a5,a4
20408da6:	01c5d5b3          	srl	a1,a1,t3
__umoddi3():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:1312
20408daa:	b395                	j	20408b0e <__umoddi3+0xb4>

20408dac <metal_tty_putc>:
metal_tty_putc():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20408dac:	1101                	addi	sp,sp,-32
20408dae:	ce06                	sw	ra,28(sp)
20408db0:	cc22                	sw	s0,24(sp)
20408db2:	1000                	addi	s0,sp,32
20408db4:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20408db8:	fec42703          	lw	a4,-20(s0)
20408dbc:	47a9                	li	a5,10
20408dbe:	00f71463          	bne	a4,a5,20408dc6 <metal_tty_putc+0x1a>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20408dc2:	4535                	li	a0,13
20408dc4:	2811                	jal	20408dd8 <metal_tty_putc_raw>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20408dc6:	fec42503          	lw	a0,-20(s0)
20408dca:	2039                	jal	20408dd8 <metal_tty_putc_raw>
20408dcc:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20408dce:	853e                	mv	a0,a5
20408dd0:	40f2                	lw	ra,28(sp)
20408dd2:	4462                	lw	s0,24(sp)
20408dd4:	6105                	addi	sp,sp,32
20408dd6:	8082                	ret

20408dd8 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20408dd8:	1101                	addi	sp,sp,-32
20408dda:	ce06                	sw	ra,28(sp)
20408ddc:	cc22                	sw	s0,24(sp)
20408dde:	1000                	addi	s0,sp,32
20408de0:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20408de4:	fec42583          	lw	a1,-20(s0)
20408de8:	800007b7          	lui	a5,0x80000
20408dec:	78078513          	addi	a0,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
20408df0:	b16ff0ef          	jal	ra,20408106 <metal_uart_putc>
20408df4:	87aa                	mv	a5,a0
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20408df6:	853e                	mv	a0,a5
20408df8:	40f2                	lw	ra,28(sp)
20408dfa:	4462                	lw	s0,24(sp)
20408dfc:	6105                	addi	sp,sp,32
20408dfe:	8082                	ret

20408e00 <metal_tty_init>:
metal_tty_init():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20408e00:	1141                	addi	sp,sp,-16
20408e02:	c606                	sw	ra,12(sp)
20408e04:	c422                	sw	s0,8(sp)
20408e06:	0800                	addi	s0,sp,16
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20408e08:	67f1                	lui	a5,0x1c
20408e0a:	20078593          	addi	a1,a5,512 # 1c200 <__stack_size+0x19a00>
20408e0e:	800007b7          	lui	a5,0x80000
20408e12:	78078513          	addi	a0,a5,1920 # 80000780 <metal_segment_heap_target_end+0xffffcecc>
20408e16:	ac4ff0ef          	jal	ra,204080da <metal_uart_init>
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20408e1a:	0001                	nop
20408e1c:	40b2                	lw	ra,12(sp)
20408e1e:	4422                	lw	s0,8(sp)
20408e20:	0141                	addi	sp,sp,16
20408e22:	8082                	ret

20408e24 <_exit>:
_exit():
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20408e24:	1101                	addi	sp,sp,-32
20408e26:	ce06                	sw	ra,28(sp)
20408e28:	cc22                	sw	s0,24(sp)
20408e2a:	1000                	addi	s0,sp,32
20408e2c:	fea42623          	sw	a0,-20(s0)
/home/hunlu/workspace/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20408e30:	fec42503          	lw	a0,-20(s0)
20408e34:	8a6ff0ef          	jal	ra,20407eda <metal_shutdown>
